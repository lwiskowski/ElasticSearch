[
 "BOOTSTRAP",
 {
  "defaultCharset": "UTF-8",
  "pidString": "2435@host238-95.aruba.fit.edu",
  "systemProperties": {
   "awt.toolkit": "sun.lwawt.macosx.LWCToolkit",
   "es.logger.level": "WARN",
   "file.encoding": "UTF-8",
   "file.encoding.pkg": "sun.io",
   "file.separator": "/",
   "ftp.nonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "gopherProxySet": "false",
   "http.nonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "java.awt.graphicsenv": "sun.awt.CGraphicsEnvironment",
   "java.awt.headless": "true",
   "java.awt.printerjob": "sun.lwawt.macosx.CPrinterJob",
   "java.class.path": "/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/classes/test:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/resources/test:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/classes/main:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/resources/main:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-core/5.5.0-snapshot-1721183/f6854c65c7f4c6d9de583f4daa4fd3ae8a3800f1/lucene-core-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-analyzers-common/5.5.0-snapshot-1721183/69e187ef1d2d9c9570363eb4186821e0341df5b8/lucene-analyzers-common-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-backward-codecs/5.5.0-snapshot-1721183/fa00a45ff9bc6a4df44db81f2e4e44ea94bf88e/lucene-backward-codecs-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-grouping/5.5.0-snapshot-1721183/e996e6c723eb415ba2cfa7f5e98bbf194a4918dd/lucene-grouping-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-highlighter/5.5.0-snapshot-1721183/3b7a5d97b10885f16eb53deb15d64c942b9f9fdb/lucene-highlighter-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-join/5.5.0-snapshot-1721183/e4dda3eeb76e340aa4713a3b20d68c4a1504e505/lucene-join-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-memory/5.5.0-snapshot-1721183/800442a5d7612ce4c8748831871b4d436a50554e/lucene-memory-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-misc/5.5.0-snapshot-1721183/bdf184de9b5773c7af3ae908af78eeb1e512470c/lucene-misc-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-queries/5.5.0-snapshot-1721183/fc59de52bd2c7e420edfd235723cb8b0dd44e92d/lucene-queries-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-queryparser/5.5.0-snapshot-1721183/1d341e6a4f11f3170773ccffdbe6815b45967e3d/lucene-queryparser-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-sandbox/5.5.0-snapshot-1721183/a1b02c2b595ac92f45f0d2be03841a3a7fcae1f1/lucene-sandbox-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-spatial/5.5.0-snapshot-1721183/e3ea422b56734329fb6974e9cf9f66478adb5793/lucene-spatial-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-spatial3d/5.5.0-snapshot-1721183/5eadbd4e63120b59ab6445e39489205f98420471/lucene-spatial3d-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-suggest/5.5.0-snapshot-1721183/a336287e65d082535f02a8427666dbe46b1b9b74/lucene-suggest-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.elasticsearch/securesm/1.0/c0c6cf986ba0057390bfcc80c366a0e3157f944b/securesm-1.0.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/commons-cli/commons-cli/1.3.1/1303efbc4b181e5a58bf2e967dc156a3132b97c0/commons-cli-1.3.1.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.carrotsearch/hppc/0.7.1/8b5057f74ea378c0150a1860874a3ebdcb713767/hppc-0.7.1.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/joda-time/joda-time/2.8.2/d27c24204c5e507b16fec01006b3d0f1ec42aed4/joda-time-2.8.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.joda/joda-convert/1.2/35ec554f0cd00c956cc69051514d9488b1374dec/joda-convert-1.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.6.2/123f29333b2c6b3516b14252b6e93226bfcd6e37/jackson-core-2.6.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-smile/2.6.2/395d18c1a1dd730b8026ee59c4067e5d2b45ba6e/jackson-dataformat-smile-2.6.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.6.2/4ae23088dd3fae47c66843f2e4251d7255ee140e/jackson-dataformat-yaml-2.6.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.dataformat/jackson-dataformat-cbor/2.6.2/1e13c575f914c83761bb8e2aca7dfd9e4c647579/jackson-dataformat-cbor-2.6.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/io.netty/netty/3.10.5.Final/9ca7d55d246092bddd29b867706e2f6c7db701a0/netty-3.10.5.Final.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.tdunning/t-digest/3.0/84ccf145ac2215e6bfa63baa3101c0af41017cfc/t-digest-3.0.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.hdrhistogram/HdrHistogram/2.1.6/7495feb7f71ee124bd2a7e7d83590e296d71d80e/HdrHistogram-2.1.6.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.spatial4j/spatial4j/0.5/6e16edaf6b1ba76db7f08c2f3723fce3b358ecc3/spatial4j-0.5.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.vividsolutions/jts/1.13/3ccfb9b60f04d71add996a666ceb8902904fd805/jts-1.13.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/log4j/apache-log4j-extras/1.2.17/85863614d82185d7e51fe21c00aa9117a523a8b6/apache-log4j-extras-1.2.17.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.6.2/8619e95939167fb37245b5670135e4feb0ec7d50/slf4j-api-1.6.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/net.java.dev.jna/jna/4.1.0/1c12d070e602efd8021891cdd7fd18bc129372d4/jna-4.1.0.jar:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/test/framework/build/libs/framework-3.0.0-SNAPSHOT.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.carrotsearch.randomizedtesting/randomizedtesting-runner/2.3.2/307965917fe8a22b7ee72deba39ef4b8e6ebc069/randomizedtesting-runner-2.3.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/junit/junit/4.11/4e031bb61df09069aeb2bffb4019e7a5034a4ee0/junit-4.11.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.hamcrest/hamcrest-all/1.3/63a21ebc981131004ad02e0434e799fd7f3a8d5a/hamcrest-all-1.3.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-test-framework/5.5.0-snapshot-1721183/a8d851d0ad82182b3a02f4b30c336e7aa0e173cb/lucene-test-framework-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.lucene/lucene-codecs/5.5.0-snapshot-1721183/8aa59442b028c7a2c1a516accb6142a8910ba5fc/lucene-codecs-5.5.0-snapshot-1721183.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.3.6/4c47155e3e6c9a41a28db36680b828ced53b8af4/httpclient-4.3.6.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.3.3/f91b7a4aadc5cf486df6e4634748d7dd7a73f06d/httpcore-4.3.3.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f/commons-logging-1.1.3.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.10/4b95f4897fa13f2cd904aee711aeafc0c5295cd8/commons-codec-1.10.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/org.elasticsearch/securemock/1.2/98201d4ad5ac93f6b415ae9172d52b5e7cda490e/securemock-1.2.jar:/Users/lwiskowski/.gradle/caches/modules-2/files-2.1/com.carrotsearch.randomizedtesting/junit4-ant/2.3.2/dc8f03f6111974092491f35b8269eb0fc57f52f7/junit4-ant-2.3.2.jar",
   "java.class.version": "52.0",
   "java.endorsed.dirs": "/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/endorsed",
   "java.ext.dirs": "/Users/lwiskowski/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java",
   "java.home": "/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre",
   "java.io.tmpdir": "./temp",
   "java.library.path": "/Users/lwiskowski/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.",
   "java.runtime.name": "Java(TM) SE Runtime Environment",
   "java.runtime.version": "1.8.0_71-b15",
   "java.specification.name": "Java Platform API Specification",
   "java.specification.vendor": "Oracle Corporation",
   "java.specification.version": "1.8",
   "java.vendor": "Oracle Corporation",
   "java.vendor.url": "http://java.oracle.com/",
   "java.vendor.url.bug": "http://bugreport.sun.com/bugreport/",
   "java.version": "1.8.0_71",
   "java.vm.info": "mixed mode",
   "java.vm.name": "Java HotSpot(TM) 64-Bit Server VM",
   "java.vm.specification.name": "Java Virtual Machine Specification",
   "java.vm.specification.vendor": "Oracle Corporation",
   "java.vm.specification.version": "1.8",
   "java.vm.vendor": "Oracle Corporation",
   "java.vm.version": "25.71-b15",
   "junit4.childvm.count": "4",
   "junit4.childvm.cwd": "/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1",
   "junit4.childvm.id": "1",
   "junit4.memory.total": "514850816",
   "junit4.pidString": "2435@host238-95.aruba.fit.edu",
   "junit4.processors": "8",
   "line.separator": "\n",
   "os.arch": "x86_64",
   "os.name": "Mac OS X",
   "os.version": "10.11.4",
   "path.separator": ":",
   "socksNonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
   "sun.arch.data.model": "64",
   "sun.boot.class.path": "/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/classes",
   "sun.boot.library.path": "/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib",
   "sun.cpu.endian": "little",
   "sun.cpu.isalist": "",
   "sun.io.unicode.encoding": "UnicodeBig",
   "sun.java.command": "com.carrotsearch.ant.tasks.junit4.slave.SlaveMainSafe -eventsfile /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/temp/junit4-J1-20160418_021237_701.events @/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/temp/junit4-J1-20160418_021237_701.suites -stdin",
   "sun.java.launcher": "SUN_STANDARD",
   "sun.jnu.encoding": "UTF-8",
   "sun.management.compiler": "HotSpot 64-Bit Tiered Compilers",
   "sun.os.patch.level": "unknown",
   "tests.artifact": "core",
   "tests.ifNoTests": "fail",
   "tests.maven": "true",
   "tests.prefix": "tests",
   "tests.security.manager": "true",
   "tests.seed": "34FFB022680374F5",
   "tests.task": ":core:integTest",
   "user.country": "US",
   "user.dir": "/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1",
   "user.home": "/Users/lwiskowski",
   "user.language": "en",
   "user.name": "lwiskowski",
   "user.timezone": ""
  }
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
   "displayName": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
   "children": [
    {
     "id": "ID#testSimpleGetMappings(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "displayName": "testSimpleGetMappings(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "methodName": "testSimpleGetMappings",
     "className": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
     "children": []
    },
    {
     "id": "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "displayName": "testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "methodName": "testGetMappingsWhereThereAreNone",
     "className": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
     "children": []
    },
    {
     "id": "ID#testGetMappingsWithBlocks(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "displayName": "testGetMappingsWithBlocks(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
     "methodName": "testGetMappingsWithBlocks",
     "className": "org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959958388
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:12:38,771][WARN ][org.elasticsearch.bootstrap] Unable to lock JVM Memory: error=78,reason=Function not implemented%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:12:38,772][WARN ][org.elasticsearch.bootstrap] This can result in part of the JVM being swapped out.%0A"
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleGetMappings(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleGetMappings(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
  "startTimestamp": 1460959960611,
  "executionTime": 8209
 }
]

[
 "TEST_STARTED",
 "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetMappingsWhereThereAreNone(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
  "startTimestamp": 1460959968820,
  "executionTime": 368
 }
]

[
 "TEST_STARTED",
 "ID#testGetMappingsWithBlocks(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetMappingsWithBlocks(org.elasticsearch.indices.mapping.SimpleGetMappingsIT)",
  "startTimestamp": 1460959969189,
  "executionTime": 1558
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.mapping.SimpleGetMappingsIT",
  "startTimestamp": 1460959958388,
  "executionTime": 12446
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.scroll.DuelScrollIT",
   "displayName": "org.elasticsearch.search.scroll.DuelScrollIT",
   "methodName": null,
   "className": "org.elasticsearch.search.scroll.DuelScrollIT",
   "children": [
    {
     "id": "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelIndexOrderQueryAndFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelIndexOrderQueryThenFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelQueryAndFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    },
    {
     "id": "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "displayName": "testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
     "methodName": "testDuelQueryThenFetch",
     "className": "org.elasticsearch.search.scroll.DuelScrollIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959970846
 }
]

[
 "TEST_STARTED",
 "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelIndexOrderQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1460959970888,
  "executionTime": 1573
 }
]

[
 "TEST_STARTED",
 "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelIndexOrderQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1460959972461,
  "executionTime": 1070
 }
]

[
 "TEST_STARTED",
 "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelQueryAndFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1460959973532,
  "executionTime": 1642
 }
]

[
 "TEST_STARTED",
 "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelQueryThenFetch(org.elasticsearch.search.scroll.DuelScrollIT)",
  "startTimestamp": 1460959975174,
  "executionTime": 2325
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.scroll.DuelScrollIT",
  "startTimestamp": 1460959970846,
  "executionTime": 6661
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.create.CreateIndexIT",
   "displayName": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
   "children": [
    {
     "id": "ID#testCreationDateGivenFails(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testCreationDateGivenFails(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testCreationDateGivenFails",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testCreateIndexWithMetadataBlocks(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testCreateIndexWithMetadataBlocks(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testCreateIndexWithMetadataBlocks",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testRestartIndexCreationAfterFullClusterRestart(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testRestartIndexCreationAfterFullClusterRestart(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testRestartIndexCreationAfterFullClusterRestart",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testInvalidShardCountSettingsWithoutPrefix(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testInvalidShardCountSettingsWithoutPrefix(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testInvalidShardCountSettingsWithoutPrefix",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testUnknownSettingFails(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testUnknownSettingFails(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testUnknownSettingFails",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testCreationDateGenerated(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testCreationDateGenerated(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testCreationDateGenerated",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testInvalidShardCountSettings(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testInvalidShardCountSettings(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testInvalidShardCountSettings",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testDoubleAddMapping(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testDoubleAddMapping(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testDoubleAddMapping",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testMappingConflictRootCause(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testMappingConflictRootCause(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testMappingConflictRootCause",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testCreateIndexWithBlocks(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testCreateIndexWithBlocks(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testCreateIndexWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    },
    {
     "id": "ID#testCreateAndDeleteIndexConcurrently(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "displayName": "testCreateAndDeleteIndexConcurrently(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
     "methodName": "testCreateAndDeleteIndexConcurrently",
     "className": "org.elasticsearch.action.admin.indices.create.CreateIndexIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959977524
 }
]

[
 "TEST_STARTED",
 "ID#testCreationDateGivenFails(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreationDateGivenFails(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959977542,
  "executionTime": 306
 }
]

[
 "TEST_STARTED",
 "ID#testCreateIndexWithMetadataBlocks(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateIndexWithMetadataBlocks(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959977848,
  "executionTime": 306
 }
]

[
 "TEST_STARTED",
 "ID#testRestartIndexCreationAfterFullClusterRestart(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestartIndexCreationAfterFullClusterRestart(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959978154,
  "executionTime": 566
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidShardCountSettingsWithoutPrefix(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidShardCountSettingsWithoutPrefix(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959978720,
  "executionTime": 387
 }
]

[
 "TEST_STARTED",
 "ID#testUnknownSettingFails(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnknownSettingFails(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959979108,
  "executionTime": 827
 }
]

[
 "TEST_STARTED",
 "ID#testCreationDateGenerated(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreationDateGenerated(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959979936,
  "executionTime": 674
 }
]

[
 "TEST_STARTED",
 "ID#testInvalidShardCountSettings(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInvalidShardCountSettings(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959980610,
  "executionTime": 433
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleAddMapping(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleAddMapping(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959981044,
  "executionTime": 309
 }
]

[
 "TEST_STARTED",
 "ID#testMappingConflictRootCause(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMappingConflictRootCause(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959981353,
  "executionTime": 476
 }
]

[
 "TEST_STARTED",
 "ID#testCreateIndexWithBlocks(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateIndexWithBlocks(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959981830,
  "executionTime": 259
 }
]

[
 "TEST_STARTED",
 "ID#testCreateAndDeleteIndexConcurrently(org.elasticsearch.action.admin.indices.create.CreateIndexIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testCreateAndDeleteIndexConcurrently(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959982091,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testCreateAndDeleteIndexConcurrently(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "message": "'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/14932,https://github.com/elastic/elasticsearch/pull/15853))",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/14932,https://github.com/elastic/elasticsearch/pull/15853))\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1236)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$400(RandomizedRunner.java:140)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:766)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat java.lang.Thread.run(Thread.java:745)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'awaitsfix' test group is disabled (@AwaitsFix(bugUrl=https://github.com/elastic/elasticsearch/issues/14932,https://github.com/elastic/elasticsearch/pull/15853))",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateAndDeleteIndexConcurrently(org.elasticsearch.action.admin.indices.create.CreateIndexIT)",
  "startTimestamp": 1460959982090,
  "executionTime": 9
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.create.CreateIndexIT",
  "startTimestamp": 1460959977524,
  "executionTime": 4626
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.UpdateSettingsValidationIT",
   "displayName": "org.elasticsearch.cluster.UpdateSettingsValidationIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.UpdateSettingsValidationIT",
   "children": [
    {
     "id": "ID#testUpdateSettingsValidation(org.elasticsearch.cluster.UpdateSettingsValidationIT)",
     "displayName": "testUpdateSettingsValidation(org.elasticsearch.cluster.UpdateSettingsValidationIT)",
     "methodName": "testUpdateSettingsValidation",
     "className": "org.elasticsearch.cluster.UpdateSettingsValidationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959982158
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateSettingsValidation(org.elasticsearch.cluster.UpdateSettingsValidationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateSettingsValidation(org.elasticsearch.cluster.UpdateSettingsValidationIT)",
  "startTimestamp": 1460959982190,
  "executionTime": 251
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.UpdateSettingsValidationIT",
  "startTimestamp": 1460959982158,
  "executionTime": 289
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.source.SourceFetchingIT",
   "displayName": "org.elasticsearch.search.source.SourceFetchingIT",
   "methodName": null,
   "className": "org.elasticsearch.search.source.SourceFetchingIT",
   "children": [
    {
     "id": "ID#testSourceWithWildcardFiltering(org.elasticsearch.search.source.SourceFetchingIT)",
     "displayName": "testSourceWithWildcardFiltering(org.elasticsearch.search.source.SourceFetchingIT)",
     "methodName": "testSourceWithWildcardFiltering",
     "className": "org.elasticsearch.search.source.SourceFetchingIT",
     "children": []
    },
    {
     "id": "ID#testSourceDefaultBehavior(org.elasticsearch.search.source.SourceFetchingIT)",
     "displayName": "testSourceDefaultBehavior(org.elasticsearch.search.source.SourceFetchingIT)",
     "methodName": "testSourceDefaultBehavior",
     "className": "org.elasticsearch.search.source.SourceFetchingIT",
     "children": []
    },
    {
     "id": "ID#testSourceFiltering(org.elasticsearch.search.source.SourceFetchingIT)",
     "displayName": "testSourceFiltering(org.elasticsearch.search.source.SourceFetchingIT)",
     "methodName": "testSourceFiltering",
     "className": "org.elasticsearch.search.source.SourceFetchingIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959982454
 }
]

[
 "TEST_STARTED",
 "ID#testSourceWithWildcardFiltering(org.elasticsearch.search.source.SourceFetchingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSourceWithWildcardFiltering(org.elasticsearch.search.source.SourceFetchingIT)",
  "startTimestamp": 1460959982470,
  "executionTime": 569
 }
]

[
 "TEST_STARTED",
 "ID#testSourceDefaultBehavior(org.elasticsearch.search.source.SourceFetchingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSourceDefaultBehavior(org.elasticsearch.search.source.SourceFetchingIT)",
  "startTimestamp": 1460959983039,
  "executionTime": 355
 }
]

[
 "TEST_STARTED",
 "ID#testSourceFiltering(org.elasticsearch.search.source.SourceFetchingIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSourceFiltering(org.elasticsearch.search.source.SourceFetchingIT)",
  "startTimestamp": 1460959983394,
  "executionTime": 252
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.source.SourceFetchingIT",
  "startTimestamp": 1460959982454,
  "executionTime": 1216
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
   "displayName": "org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
   "children": [
    {
     "id": "ID#testRegexpFilter(org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT)",
     "displayName": "testRegexpFilter(org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT)",
     "methodName": "testRegexpFilter",
     "className": "org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959983679
 }
]

[
 "TEST_STARTED",
 "ID#testRegexpFilter(org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRegexpFilter(org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT)",
  "startTimestamp": 1460959983694,
  "executionTime": 235
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.fielddata.FieldDataFilterIntegrationIT",
  "startTimestamp": 1460959983679,
  "executionTime": 257
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.IndexWithShadowReplicasIT",
   "displayName": "org.elasticsearch.index.IndexWithShadowReplicasIT",
   "methodName": null,
   "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
   "children": [
    {
     "id": "ID#testIndexWithFewDocuments(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testIndexWithFewDocuments(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testIndexWithFewDocuments",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testReplicaToPrimaryPromotion(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testReplicaToPrimaryPromotion(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testReplicaToPrimaryPromotion",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testPrimaryRelocationWithConcurrentIndexing(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testPrimaryRelocationWithConcurrentIndexing(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testPrimaryRelocationWithConcurrentIndexing",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testIndexOnSharedFSRecoversToAnyNode(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testIndexOnSharedFSRecoversToAnyNode(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testIndexOnSharedFSRecoversToAnyNode",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testPrimaryRelocation(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testPrimaryRelocation(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testPrimaryRelocation",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testCannotCreateWithBadPath(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testCannotCreateWithBadPath(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testCannotCreateWithBadPath",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testRestoreToShadow(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testRestoreToShadow(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testRestoreToShadow",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testDeletingClosedIndexRemovesFiles(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testDeletingClosedIndexRemovesFiles(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testDeletingClosedIndexRemovesFiles",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testShadowReplicasUsingFieldData(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testShadowReplicasUsingFieldData(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testShadowReplicasUsingFieldData",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testIndexWithShadowReplicasCleansUp(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testIndexWithShadowReplicasCleansUp(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testIndexWithShadowReplicasCleansUp",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testPrimaryRelocationWhereRecoveryFails(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testPrimaryRelocationWhereRecoveryFails(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testPrimaryRelocationWhereRecoveryFails",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    },
    {
     "id": "ID#testShadowReplicaNaturalRelocation(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "displayName": "testShadowReplicaNaturalRelocation(org.elasticsearch.index.IndexWithShadowReplicasIT)",
     "methodName": "testShadowReplicaNaturalRelocation",
     "className": "org.elasticsearch.index.IndexWithShadowReplicasIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959983948
 }
]

[
 "TEST_STARTED",
 "ID#testIndexWithFewDocuments(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,455][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [14]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,465][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [16]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,476][WARN ][org.elasticsearch.gateway] [node_t1] [test][0]: failed to list shard for shard_store on node [DMXdgfnyTW2POhrBhNdtew]%0AFailedNodeException[Failed node [DMXdgfnyTW2POhrBhNdtew]]; nested: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]];%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.onFailure(TransportNodesAction.java:208)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$700(TransportNodesAction.java:109)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction$2.handleException(TransportNodesAction.java:181)%0A%09at org.elasticsearch.transport.TransportService$2.run(TransportService.java:190)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]]%0A%09... 4 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,487][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [15]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,491][WARN ][org.elasticsearch.gateway] [node_t1] [test][0]: failed to list shard for shard_store on node [-6tzWNkgRP66jjj1InZP6Q]%0AFailedNodeException[Failed node [-6tzWNkgRP66jjj1InZP6Q]]; nested: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]];%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.onFailure(TransportNodesAction.java:208)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$700(TransportNodesAction.java:109)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction$2.handleException(TransportNodesAction.java:181)%0A%09at org.elasticsearch.transport.TransportService$2.run(TransportService.java:190)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]]%0A%09... 4 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,491][WARN ][org.elasticsearch.gateway] [node_t1] [test][0]: failed to list shard for shard_store on node [1hR5wIRnRDq6wCvRGT_aIg]%0AFailedNodeException[Failed node [1hR5wIRnRDq6wCvRGT_aIg]]; nested: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]];%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.onFailure(TransportNodesAction.java:208)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$700(TransportNodesAction.java:109)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction$2.handleException(TransportNodesAction.java:181)%0A%09at org.elasticsearch.transport.TransportService$2.run(TransportService.java:190)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]]%0A%09... 4 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,559][WARN ][org.elasticsearch.test.transport] [node_t2] Transport response handler not found of id [35]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,559][WARN ][org.elasticsearch.gateway] [node_t2] [test][0]: failed to list shard for shard_store on node [CUh8ghr5QCqyKjYtMmlD2g]%0AFailedNodeException[Failed node [CUh8ghr5QCqyKjYtMmlD2g]]; nested: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]];%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.onFailure(TransportNodesAction.java:208)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$700(TransportNodesAction.java:109)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction$2.handleException(TransportNodesAction.java:181)%0A%09at org.elasticsearch.transport.TransportService$2.run(TransportService.java:190)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]]%0A%09... 4 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,560][WARN ][org.elasticsearch.gateway] [node_t2] [test][0]: failed to list shard for shard_store on node [1hR5wIRnRDq6wCvRGT_aIg]%0AFailedNodeException[Failed node [1hR5wIRnRDq6wCvRGT_aIg]]; nested: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]];%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.onFailure(TransportNodesAction.java:208)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$700(TransportNodesAction.java:109)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction$2.handleException(TransportNodesAction.java:181)%0A%09at org.elasticsearch.transport.TransportService$2.run(TransportService.java:190)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: TransportException[transport stopped, action: internal:cluster/nodes/indices/shard/store[n]]%0A%09... 4 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:04,562][WARN ][org.elasticsearch.test.transport] [node_t2] Transport response handler not found of id [31]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexWithFewDocuments(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959983964,
  "executionTime": 896
 }
]

[
 "TEST_STARTED",
 "ID#testReplicaToPrimaryPromotion(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReplicaToPrimaryPromotion(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959984860,
  "executionTime": 402
 }
]

[
 "TEST_STARTED",
 "ID#testPrimaryRelocationWithConcurrentIndexing(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrimaryRelocationWithConcurrentIndexing(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959985262,
  "executionTime": 686
 }
]

[
 "TEST_STARTED",
 "ID#testIndexOnSharedFSRecoversToAnyNode(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:07,266][WARN ][org.elasticsearch.index.engine] [node_t4] [test][1] failed to rollback writer on close%0Ajava.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-008/test/1/index%0A%09at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)%0A%09at sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:407)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newDirectoryStream(FilterFileSystemProvider.java:224)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newDirectoryStream(FilterFileSystemProvider.java:224)%0A%09at org.apache.lucene.mockfile.ShuffleFS.newDirectoryStream(ShuffleFS.java:51)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newDirectoryStream(HandleTrackingFS.java:284)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newDirectoryStream(HandleTrackingFS.java:284)%0A%09at java.nio.file.Files.newDirectoryStream(Files.java:457)%0A%09at org.apache.lucene.store.FSDirectory.listAll(FSDirectory.java:190)%0A%09at org.apache.lucene.store.FSDirectory.listAll(FSDirectory.java:202)%0A%09at org.elasticsearch.index.store.FsDirectoryService$1.listAll(FsDirectoryService.java:129)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.index.IndexFileDeleter.refresh(IndexFileDeleter.java:426)%0A%09at org.apache.lucene.index.IndexWriter.rollbackInternalNoCommit(IndexWriter.java:2099)%0A%09at org.apache.lucene.index.IndexWriter.rollbackInternal(IndexWriter.java:2041)%0A%09at org.apache.lucene.index.IndexWriter.rollback(IndexWriter.java:2034)%0A%09at org.elasticsearch.index.engine.InternalEngine.closeNoLock(InternalEngine.java:877)%0A%09at org.elasticsearch.index.engine.Engine.close(Engine.java:1063)%0A%09at org.apache.lucene.util.IOUtils.close(IOUtils.java:97)%0A%09at org.apache.lucene.util.IOUtils.close(IOUtils.java:84)%0A%09at org.elasticsearch.index.shard.IndexShard.close(IndexShard.java:809)%0A%09at org.elasticsearch.index.IndexService.closeShard(IndexService.java:367)%0A%09at org.elasticsearch.index.IndexService.removeShard(IndexService.java:351)%0A%09at org.elasticsearch.index.IndexService.close(IndexService.java:226)%0A%09at org.elasticsearch.indices.IndicesService.removeIndex(IndicesService.java:351)%0A%09at org.elasticsearch.indices.IndicesService.deleteIndex(IndicesService.java:399)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.deleteIndex(IndicesClusterStateService.java:763)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.applyDeletedIndices(IndicesClusterStateService.java:256)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:194)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:596)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:07,272][WARN ][org.elasticsearch.index.engine] [node_t4] [test][2] failed to rollback writer on close%0Ajava.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-008/test/2/index%0A%09at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)%0A%09at sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:407)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newDirectoryStream(FilterFileSystemProvider.java:224)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newDirectoryStream(FilterFileSystemProvider.java:224)%0A%09at org.apache.lucene.mockfile.ShuffleFS.newDirectoryStream(ShuffleFS.java:51)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newDirectoryStream(HandleTrackingFS.java:284)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newDirectoryStream(HandleTrackingFS.java:284)%0A%09at java.nio.file.Files.newDirectoryStream(Files.java:457)%0A%09at org.apache.lucene.store.FSDirectory.listAll(FSDirectory.java:190)%0A%09at org.apache.lucene.store.FSDirectory.listAll(FSDirectory.java:202)%0A%09at org.elasticsearch.index.store.FsDirectoryService$1.listAll(FsDirectoryService.java:129)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.index.IndexFileDeleter.refresh(IndexFileDeleter.java:426)%0A%09at org.apache.lucene.index.IndexWriter.rollbackInternalNoCommit(IndexWriter.java:2099)%0A%09at org.apache.lucene.index.IndexWriter.rollbackInternal(IndexWriter.java:2041)%0A%09at org.apache.lucene.index.IndexWriter.rollback(IndexWriter.java:2034)%0A%09at org.elasticsearch.index.engine.InternalEngine.closeNoLock(InternalEngine.java:877)%0A%09at org.elasticsearch.index.engine.Engine.close(Engine.java:1063)%0A%09at org.apache.lucene.util.IOUtils.close(IOUtils.java:97)%0A%09at org.apache.lucene.util.IOUtils.close(IOUtils.java:84)%0A%09at org.elasticsearch.index.shard.IndexShard.close(IndexShard.java:809)%0A%09at org.elasticsearch.index.IndexService.closeShard(IndexService.java:367)%0A%09at org.elasticsearch.index.IndexService.removeShard(IndexService.java:351)%0A%09at org.elasticsearch.index.IndexService.close(IndexService.java:226)%0A%09at org.elasticsearch.indices.IndicesService.removeIndex(IndicesService.java:351)%0A%09at org.elasticsearch.indices.IndicesService.deleteIndex(IndicesService.java:399)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.deleteIndex(IndicesClusterStateService.java:763)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.applyDeletedIndices(IndicesClusterStateService.java:256)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:194)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:596)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:07,278][WARN ][org.elasticsearch.index.engine] [node_t4] [test][3] failed to rollback writer on close%0Ajava.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-008/test/3/index%0A%09at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)%0A%09at sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:407)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newDirectoryStream(FilterFileSystemProvider.java:224)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newDirectoryStream(FilterFileSystemProvider.java:224)%0A%09at org.apache.lucene.mockfile.ShuffleFS.newDirectoryStream(ShuffleFS.java:51)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newDirectoryStream(HandleTrackingFS.java:284)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newDirectoryStream(HandleTrackingFS.java:284)%0A%09at java.nio.file.Files.newDirectoryStream(Files.java:457)%0A%09at org.apache.lucene.store.FSDirectory.listAll(FSDirectory.java:190)%0A%09at org.apache.lucene.store.FSDirectory.listAll(FSDirectory.java:202)%0A%09at org.elasticsearch.index.store.FsDirectoryService$1.listAll(FsDirectoryService.java:129)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.index.IndexFileDeleter.refresh(IndexFileDeleter.java:426)%0A%09at org.apache.lucene.index.IndexWriter.rollbackInternalNoCommit(IndexWriter.java:2099)%0A%09at org.apache.lucene.index.IndexWriter.rollbackInternal(IndexWriter.java:2041)%0A%09at org.apache.lucene.index.IndexWriter.rollback(IndexWriter.java:2034)%0A%09at org.elasticsearch.index.engine.InternalEngine.closeNoLock(InternalEngine.java:877)%0A%09at org.elasticsearch.index.engine.Engine.close(Engine.java:1063)%0A%09at org.apache.lucene.util.IOUtils.close(IOUtils.java:97)%0A%09at org.apache.lucene.util.IOUtils.close(IOUtils.java:84)%0A%09at org.elasticsearch.index.shard.IndexShard.close(IndexShard.java:809)%0A%09at org.elasticsearch.index.IndexService.closeShard(IndexService.java:367)%0A%09at org.elasticsearch.index.IndexService.removeShard(IndexService.java:351)%0A%09at org.elasticsearch.index.IndexService.close(IndexService.java:226)%0A%09at org.elasticsearch.indices.IndicesService.removeIndex(IndicesService.java:351)%0A%09at org.elasticsearch.indices.IndicesService.deleteIndex(IndicesService.java:399)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.deleteIndex(IndicesClusterStateService.java:763)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.applyDeletedIndices(IndicesClusterStateService.java:256)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:194)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:596)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:07,285][WARN ][org.elasticsearch.index.engine] [node_t4] [test][4] failed to rollback writer on close%0Ajava.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-008/test/4/index%0A%09at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)%0A%09at sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:407)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newDirectoryStream(FilterFileSystemProvider.java:224)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newDirectoryStream(FilterFileSystemProvider.java:224)%0A%09at org.apache.lucene.mockfile.ShuffleFS.newDirectoryStream(ShuffleFS.java:51)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newDirectoryStream(HandleTrackingFS.java:284)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newDirectoryStream(HandleTrackingFS.java:284)%0A%09at java.nio.file.Files.newDirectoryStream(Files.java:457)%0A%09at org.apache.lucene.store.FSDirectory.listAll(FSDirectory.java:190)%0A%09at org.apache.lucene.store.FSDirectory.listAll(FSDirectory.java:202)%0A%09at org.elasticsearch.index.store.FsDirectoryService$1.listAll(FsDirectoryService.java:129)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.store.FilterDirectory.listAll(FilterDirectory.java:57)%0A%09at org.apache.lucene.index.IndexFileDeleter.refresh(IndexFileDeleter.java:426)%0A%09at org.apache.lucene.index.IndexWriter.rollbackInternalNoCommit(IndexWriter.java:2099)%0A%09at org.apache.lucene.index.IndexWriter.rollbackInternal(IndexWriter.java:2041)%0A%09at org.apache.lucene.index.IndexWriter.rollback(IndexWriter.java:2034)%0A%09at org.elasticsearch.index.engine.InternalEngine.closeNoLock(InternalEngine.java:877)%0A%09at org.elasticsearch.index.engine.Engine.close(Engine.java:1063)%0A%09at org.apache.lucene.util.IOUtils.close(IOUtils.java:97)%0A%09at org.apache.lucene.util.IOUtils.close(IOUtils.java:84)%0A%09at org.elasticsearch.index.shard.IndexShard.close(IndexShard.java:809)%0A%09at org.elasticsearch.index.IndexService.closeShard(IndexService.java:367)%0A%09at org.elasticsearch.index.IndexService.removeShard(IndexService.java:351)%0A%09at org.elasticsearch.index.IndexService.close(IndexService.java:226)%0A%09at org.elasticsearch.indices.IndicesService.removeIndex(IndicesService.java:351)%0A%09at org.elasticsearch.indices.IndicesService.deleteIndex(IndicesService.java:399)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.deleteIndex(IndicesClusterStateService.java:763)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.applyDeletedIndices(IndicesClusterStateService.java:256)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:194)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:596)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:07,349][WARN ][org.elasticsearch.test.transport] [node_t3] Transport response handler not found of id [37]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexOnSharedFSRecoversToAnyNode(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959985948,
  "executionTime": 1413
 }
]

[
 "TEST_STARTED",
 "ID#testPrimaryRelocation(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:07,815][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [13]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrimaryRelocation(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959987362,
  "executionTime": 464
 }
]

[
 "TEST_STARTED",
 "ID#testCannotCreateWithBadPath(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCannotCreateWithBadPath(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959987826,
  "executionTime": 111
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreToShadow(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreToShadow(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959987937,
  "executionTime": 735
 }
]

[
 "TEST_STARTED",
 "ID#testDeletingClosedIndexRemovesFiles(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeletingClosedIndexRemovesFiles(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959988672,
  "executionTime": 883
 }
]

[
 "TEST_STARTED",
 "ID#testShadowReplicasUsingFieldData(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShadowReplicasUsingFieldData(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959989556,
  "executionTime": 419
 }
]

[
 "TEST_STARTED",
 "ID#testIndexWithShadowReplicasCleansUp(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:10,491][WARN ][org.elasticsearch.indices] [node_t3] [test] failed to delete index%0Ajava.io.IOException: Could not remove the following files (in the order of attempts):%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index/_0.si: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index/_0.si%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index/_0.cfe: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index/_0.cfe%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index/_0.cfs: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index/_0.cfs%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index/segments_2: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index/segments_2%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/index%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/translog/translog-2.tlog: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/translog/translog-2.tlog%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/translog/translog.ckp: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/translog/translog.ckp%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/translog: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0/translog%0A   /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.index.IndexWithShadowReplicasIT_34FFB022680374F5-001/tempDir-020/test/0%0A%0A%09at org.apache.lucene.util.IOUtils.rm(IOUtils.java:295)%0A%09at org.elasticsearch.env.NodeEnvironment.deleteIndexDirectoryUnderLock(NodeEnvironment.java:431)%0A%09at org.elasticsearch.env.NodeEnvironment.deleteIndexDirectorySafe(NodeEnvironment.java:411)%0A%09at org.elasticsearch.indices.IndicesService.deleteIndexStore(IndicesService.java:450)%0A%09at org.elasticsearch.indices.IndicesService.deleteIndexStore(IndicesService.java:438)%0A%09at org.elasticsearch.indices.IndicesService.deleteClosedIndex(IndicesService.java:410)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.applyDeletedIndices(IndicesClusterStateService.java:261)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:194)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:596)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:10,608][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [6]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:10,614][WARN ][org.elasticsearch.test.transport] [node_t2] Transport response handler not found of id [13]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexWithShadowReplicasCleansUp(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959989976,
  "executionTime": 662
 }
]

[
 "TEST_STARTED",
 "ID#testPrimaryRelocationWhereRecoveryFails(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:11,252][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [76]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPrimaryRelocationWhereRecoveryFails(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959990638,
  "executionTime": 656
 }
]

[
 "TEST_STARTED",
 "ID#testShadowReplicaNaturalRelocation(org.elasticsearch.index.IndexWithShadowReplicasIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:12,103][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [54]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShadowReplicaNaturalRelocation(org.elasticsearch.index.IndexWithShadowReplicasIT)",
  "startTimestamp": 1460959991295,
  "executionTime": 831
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.IndexWithShadowReplicasIT",
  "startTimestamp": 1460959983948,
  "executionTime": 8331
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.template.IndexTemplateFilteringIT",
   "displayName": "org.elasticsearch.indices.template.IndexTemplateFilteringIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.template.IndexTemplateFilteringIT",
   "children": [
    {
     "id": "ID#testTemplateFiltering(org.elasticsearch.indices.template.IndexTemplateFilteringIT)",
     "displayName": "testTemplateFiltering(org.elasticsearch.indices.template.IndexTemplateFilteringIT)",
     "methodName": "testTemplateFiltering",
     "className": "org.elasticsearch.indices.template.IndexTemplateFilteringIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959992286
 }
]

[
 "TEST_STARTED",
 "ID#testTemplateFiltering(org.elasticsearch.indices.template.IndexTemplateFilteringIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTemplateFiltering(org.elasticsearch.indices.template.IndexTemplateFilteringIT)",
  "startTimestamp": 1460959992303,
  "executionTime": 219
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.template.IndexTemplateFilteringIT",
  "startTimestamp": 1460959992286,
  "executionTime": 244
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
   "children": [
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testBadSigmaAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "displayName": "testBadSigmaAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "methodName": "testBadSigmaAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "displayName": "testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "methodName": "testDocCountTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959992549
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
  "startTimestamp": 1460959993012,
  "executionTime": 76
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
  "startTimestamp": 1460959993088,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
  "startTimestamp": 1460959993125,
  "executionTime": 40
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
  "startTimestamp": 1460959993166,
  "executionTime": 48
 }
]

[
 "TEST_STARTED",
 "ID#testBadSigmaAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadSigmaAsSubAgg(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
  "startTimestamp": 1460959993214,
  "executionTime": 8
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
  "startTimestamp": 1460959993222,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
  "startTimestamp": 1460959993244,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT)",
  "startTimestamp": 1460959993264,
  "executionTime": 91
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.ExtendedStatsBucketIT",
  "startTimestamp": 1460959992549,
  "executionTime": 1000
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
   "displayName": "org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
   "children": [
    {
     "id": "ID#testIndicesStatsWithBlocks(org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT)",
     "displayName": "testIndicesStatsWithBlocks(org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT)",
     "methodName": "testIndicesStatsWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959993556
 }
]

[
 "TEST_STARTED",
 "ID#testIndicesStatsWithBlocks(org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndicesStatsWithBlocks(org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT)",
  "startTimestamp": 1460959993569,
  "executionTime": 781
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.stats.IndicesStatsBlocksIT",
  "startTimestamp": 1460959993556,
  "executionTime": 798
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.gateway.RecoverAfterNodesIT",
   "displayName": "org.elasticsearch.gateway.RecoverAfterNodesIT",
   "methodName": null,
   "className": "org.elasticsearch.gateway.RecoverAfterNodesIT",
   "children": [
    {
     "id": "ID#testRecoverAfterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "displayName": "testRecoverAfterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "methodName": "testRecoverAfterNodes",
     "className": "org.elasticsearch.gateway.RecoverAfterNodesIT",
     "children": []
    },
    {
     "id": "ID#testRecoverAfterDataNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "displayName": "testRecoverAfterDataNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "methodName": "testRecoverAfterDataNodes",
     "className": "org.elasticsearch.gateway.RecoverAfterNodesIT",
     "children": []
    },
    {
     "id": "ID#testRecoverAfterMasterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "displayName": "testRecoverAfterMasterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
     "methodName": "testRecoverAfterMasterNodes",
     "className": "org.elasticsearch.gateway.RecoverAfterNodesIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460959994362
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverAfterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:24,625][WARN ][org.elasticsearch.transport] [node_t1] Transport response handler not found of id [4]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverAfterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
  "startTimestamp": 1460959994387,
  "executionTime": 10240
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverAfterDataNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverAfterDataNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
  "startTimestamp": 1460960004628,
  "executionTime": 496
 }
]

[
 "TEST_STARTED",
 "ID#testRecoverAfterMasterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecoverAfterMasterNodes(org.elasticsearch.gateway.RecoverAfterNodesIT)",
  "startTimestamp": 1460960005124,
  "executionTime": 320
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.gateway.RecoverAfterNodesIT",
  "startTimestamp": 1460959994362,
  "executionTime": 11093
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.plugins.SitePluginRelativePathConfigIT",
   "displayName": "org.elasticsearch.plugins.SitePluginRelativePathConfigIT",
   "methodName": null,
   "className": "org.elasticsearch.plugins.SitePluginRelativePathConfigIT",
   "children": [
    {
     "id": "ID#testThatRelativePathsDontAffectPlugins(org.elasticsearch.plugins.SitePluginRelativePathConfigIT)",
     "displayName": "testThatRelativePathsDontAffectPlugins(org.elasticsearch.plugins.SitePluginRelativePathConfigIT)",
     "methodName": "testThatRelativePathsDontAffectPlugins",
     "className": "org.elasticsearch.plugins.SitePluginRelativePathConfigIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960005461
 }
]

[
 "TEST_STARTED",
 "ID#testThatRelativePathsDontAffectPlugins(org.elasticsearch.plugins.SitePluginRelativePathConfigIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatRelativePathsDontAffectPlugins(org.elasticsearch.plugins.SitePluginRelativePathConfigIT)",
  "startTimestamp": 1460960005476,
  "executionTime": 18195
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.plugins.SitePluginRelativePathConfigIT",
  "startTimestamp": 1460960005461,
  "executionTime": 18236
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT",
   "displayName": "org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT",
   "methodName": null,
   "className": "org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT",
   "children": [
    {
     "id": "ID#testGetSettings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
     "displayName": "testGetSettings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
     "methodName": "testGetSettings",
     "className": "org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testGetAliases(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
     "displayName": "testGetAliases(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
     "methodName": "testGetAliases",
     "className": "org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT",
     "children": []
    },
    {
     "id": "ID#testGetMappings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
     "displayName": "testGetMappings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
     "methodName": "testGetMappings",
     "className": "org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960023712
 }
]

[
 "TEST_STARTED",
 "ID#testGetSettings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testGetSettings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "startTimestamp": 1460960023719,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testGetSettings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1236)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:668)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:140)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:591)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetSettings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "startTimestamp": 1460960023718,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testGetAliases(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testGetAliases(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "startTimestamp": 1460960023719,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testGetAliases(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1236)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:668)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:140)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:591)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetAliases(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "startTimestamp": 1460960023719,
  "executionTime": 1
 }
]

[
 "TEST_STARTED",
 "ID#testGetMappings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)"
]

[
 "TEST_IGNORED",
 {
  "description": "ID#testGetMappings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "startTimestamp": 1460960023720,
  "cause": "Unknown reason for ignore status."
 }
]

[
 "TEST_IGNORED_ASSUMPTION",
 {
  "description": "ID#testGetMappings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "message": "'backwards' test group is disabled (@Backwards())",
  "trace": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.isTestIgnored(RandomizedRunner.java:1236)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:668)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:140)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:591)\n",
  "throwableString": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException: 'backwards' test group is disabled (@Backwards())",
  "throwableClass": "com.carrotsearch.randomizedtesting.InternalAssumptionViolatedException",
  "assertionViolation": false,
  "assumptionViolation": true
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetMappings(org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT)",
  "startTimestamp": 1460960023720,
  "executionTime": 1
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.bwcompat.GetIndexBackwardsCompatibilityIT",
  "startTimestamp": 1460960023712,
  "executionTime": 9
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.RejectionActionIT",
   "displayName": "org.elasticsearch.action.RejectionActionIT",
   "methodName": null,
   "className": "org.elasticsearch.action.RejectionActionIT",
   "children": [
    {
     "id": "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
     "displayName": "testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
     "methodName": "testSimulatedSearchRejectionLoad",
     "className": "org.elasticsearch.action.RejectionActionIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960023731
 }
]

[
 "TEST_STARTED",
 "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimulatedSearchRejectionLoad(org.elasticsearch.action.RejectionActionIT)",
  "startTimestamp": 1460960023744,
  "executionTime": 1971
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.RejectionActionIT",
  "startTimestamp": 1460960023731,
  "executionTime": 2006
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT",
   "displayName": "org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT",
   "children": [
    {
     "id": "ID#testDestructiveOperations(org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT)",
     "displayName": "testDestructiveOperations(org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT)",
     "methodName": "testDestructiveOperations",
     "className": "org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960025745
 }
]

[
 "TEST_STARTED",
 "ID#testDestructiveOperations(org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDestructiveOperations(org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT)",
  "startTimestamp": 1460960025759,
  "executionTime": 2699
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.operateAllIndices.DestructiveOperationsIntegrationIT",
  "startTimestamp": 1460960025745,
  "executionTime": 2719
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.state.SimpleIndexStateIT",
   "displayName": "org.elasticsearch.indices.state.SimpleIndexStateIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
   "children": [
    {
     "id": "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testSimpleOpenClose",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testConsistencyAfterIndexCreationFailure",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    },
    {
     "id": "ID#testFastCloseAfterCreateContinuesCreateAfterOpen(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "displayName": "testFastCloseAfterCreateContinuesCreateAfterOpen(org.elasticsearch.indices.state.SimpleIndexStateIT)",
     "methodName": "testFastCloseAfterCreateContinuesCreateAfterOpen",
     "className": "org.elasticsearch.indices.state.SimpleIndexStateIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960028471
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:49,056][WARN ][org.elasticsearch.action.index] [node_s2] unexpected error during the primary phase for action [indices:data/write/index], request [index {[test][type1][1], source[{\"field1\":\"value1\"}]}]%0A[test] IndexClosedException[closed]%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:170)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:93)%0A%09at org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteSingleIndex(IndexNameExpressionResolver.java:206)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase.doRun(TransportReplicationAction.java:425)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at org.elasticsearch.action.support.replication.TransportReplicationAction.doExecute(TransportReplicationAction.java:137)%0A%09at org.elasticsearch.action.index.TransportIndexAction.innerExecute(TransportIndexAction.java:133)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:117)%0A%09at org.elasticsearch.action.index.TransportIndexAction.doExecute(TransportIndexAction.java:64)%0A%09at org.elasticsearch.action.support.TransportAction.doExecute(TransportAction.java:113)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:101)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:74)%0A%09at org.elasticsearch.client.node.NodeClient.doExecute(NodeClient.java:65)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:387)%0A%09at org.elasticsearch.client.FilterClient.doExecute(FilterClient.java:57)%0A%09at org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:387)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)%0A%09at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:60)%0A%09at org.elasticsearch.action.ActionRequestBuilder.get(ActionRequestBuilder.java:68)%0A%09at org.elasticsearch.indices.state.SimpleIndexStateIT.testSimpleOpenClose(SimpleIndexStateIT.java:76)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleOpenClose(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1460960028487,
  "executionTime": 995
 }
]

[
 "TEST_STARTED",
 "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testConsistencyAfterIndexCreationFailure(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1460960029482,
  "executionTime": 115
 }
]

[
 "TEST_STARTED",
 "ID#testFastCloseAfterCreateContinuesCreateAfterOpen(org.elasticsearch.indices.state.SimpleIndexStateIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFastCloseAfterCreateContinuesCreateAfterOpen(org.elasticsearch.indices.state.SimpleIndexStateIT)",
  "startTimestamp": 1460960029597,
  "executionTime": 314
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.state.SimpleIndexStateIT",
  "startTimestamp": 1460960028471,
  "executionTime": 1455
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.geo.GeoFilterIT",
   "displayName": "org.elasticsearch.search.geo.GeoFilterIT",
   "methodName": null,
   "className": "org.elasticsearch.search.geo.GeoFilterIT",
   "children": [
    {
     "id": "ID#testShapeBuilders(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testShapeBuilders(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testShapeBuilders",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    },
    {
     "id": "ID#testGeohashCellFilter(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testGeohashCellFilter(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testGeohashCellFilter",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    },
    {
     "id": "ID#testNeighbors(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testNeighbors(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testNeighbors",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    },
    {
     "id": "ID#testShapeRelations(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testShapeRelations(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testShapeRelations",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    },
    {
     "id": "ID#testBulk(org.elasticsearch.search.geo.GeoFilterIT)",
     "displayName": "testBulk(org.elasticsearch.search.geo.GeoFilterIT)",
     "methodName": "testBulk",
     "className": "org.elasticsearch.search.geo.GeoFilterIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960029941
 }
]

[
 "TEST_STARTED",
 "ID#testShapeBuilders(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShapeBuilders(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1460960029986,
  "executionTime": 412
 }
]

[
 "TEST_STARTED",
 "ID#testGeohashCellFilter(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGeohashCellFilter(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1460960030399,
  "executionTime": 758
 }
]

[
 "TEST_STARTED",
 "ID#testNeighbors(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNeighbors(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1460960031157,
  "executionTime": 56
 }
]

[
 "TEST_STARTED",
 "ID#testShapeRelations(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShapeRelations(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1460960031213,
  "executionTime": 2127
 }
]

[
 "TEST_STARTED",
 "ID#testBulk(org.elasticsearch.search.geo.GeoFilterIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBulk(org.elasticsearch.search.geo.GeoFilterIT)",
  "startTimestamp": 1460960033341,
  "executionTime": 4122
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.geo.GeoFilterIT",
  "startTimestamp": 1460960029941,
  "executionTime": 7539
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "displayName": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
   "children": [
    {
     "id": "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testGetIndexWithBlocks",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleUnknownIndex",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleMapping",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testEmpty",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleAlias",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleMixedFeatures",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testEmptyMixedFeatures",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    },
    {
     "id": "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "displayName": "testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
     "methodName": "testSimpleSettings",
     "className": "org.elasticsearch.action.admin.indices.get.GetIndexIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960037487
 }
]

[
 "TEST_STARTED",
 "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetIndexWithBlocks(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960037891,
  "executionTime": 366
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleUnknownIndex(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960038257,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMapping(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960038278,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmpty(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960038296,
  "executionTime": 13
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleAlias(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960038310,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960038328,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960038343,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyMixedFeatures(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960038358,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleSettings(org.elasticsearch.action.admin.indices.get.GetIndexIT)",
  "startTimestamp": 1460960038387,
  "executionTime": 26
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:13:58,548][WARN ][org.elasticsearch.transport] [node_s1] Transport response handler not found of id [108]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.indices.get.GetIndexIT",
  "startTimestamp": 1460960037487,
  "executionTime": 1072
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
   "children": [
    {
     "id": "ID#testLongValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testLongValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testLongValueField",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testLongValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testLongValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testLongValueFieldWithRouting",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testDoubleValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testDoubleValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testDoubleValueFieldTermSortAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testDoubleValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testDoubleValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testDoubleValueFieldTermSortDesc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testStringValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testStringValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testStringValueField",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testLongValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testLongValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testLongValueFieldSubAggAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testStringValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testStringValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testStringValueFieldDocCountAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testDoubleValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testDoubleValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testDoubleValueFieldDocCountAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testLongValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testLongValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testLongValueFieldTermSortAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testLongValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testLongValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testLongValueFieldSubAggDesc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testDoubleValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testDoubleValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testDoubleValueFieldSubAggAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testStringValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testStringValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testStringValueFieldSubAggDesc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testStringValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testStringValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testStringValueFieldTermSortDesc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testLongValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testLongValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testLongValueFieldDocCountAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testDoubleValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testDoubleValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testDoubleValueFieldWithRouting",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testStringValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testStringValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testStringValueFieldWithRouting",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testStringValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testStringValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testStringValueFieldTermSortAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testDoubleValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testDoubleValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testDoubleValueField",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testStringValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testStringValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testStringValueFieldSubAggAsc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testLongValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testLongValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testLongValueFieldTermSortDesc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testStringValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testStringValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testStringValueFieldSingleShard",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testDoubleValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testDoubleValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testDoubleValueFieldSubAggDesc",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testDoubleValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testDoubleValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testDoubleValueFieldSingleShard",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    },
    {
     "id": "ID#testLongValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "displayName": "testLongValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
     "methodName": "testLongValueFieldSingleShard",
     "className": "org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960038571
 }
]

[
 "TEST_STARTED",
 "ID#testLongValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039301,
  "executionTime": 47
 }
]

[
 "TEST_STARTED",
 "ID#testLongValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039348,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039371,
  "executionTime": 33
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039404,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testStringValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039431,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testLongValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039457,
  "executionTime": 30
 }
]

[
 "TEST_STARTED",
 "ID#testStringValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039487,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039511,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testLongValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039538,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testLongValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039560,
  "executionTime": 25
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039585,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testStringValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039611,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testStringValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039648,
  "executionTime": 34
 }
]

[
 "TEST_STARTED",
 "ID#testLongValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongValueFieldDocCountAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039682,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039709,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testStringValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringValueFieldWithRouting(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039732,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testStringValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringValueFieldTermSortAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039761,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleValueField(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039788,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testStringValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringValueFieldSubAggAsc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039816,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testLongValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongValueFieldTermSortDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039842,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testStringValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStringValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039870,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleValueFieldSubAggDesc(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039900,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testDoubleValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDoubleValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039928,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testLongValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLongValueFieldSingleShard(org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT)",
  "startTimestamp": 1460960039950,
  "executionTime": 23
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.TermsDocCountErrorIT",
  "startTimestamp": 1460960038571,
  "executionTime": 1535
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.update.UpdateNoopIT",
   "displayName": "org.elasticsearch.update.UpdateNoopIT",
   "methodName": null,
   "className": "org.elasticsearch.update.UpdateNoopIT",
   "children": [
    {
     "id": "ID#testTwoFields(org.elasticsearch.update.UpdateNoopIT)",
     "displayName": "testTwoFields(org.elasticsearch.update.UpdateNoopIT)",
     "methodName": "testTwoFields",
     "className": "org.elasticsearch.update.UpdateNoopIT",
     "children": []
    },
    {
     "id": "ID#testMapAndField(org.elasticsearch.update.UpdateNoopIT)",
     "displayName": "testMapAndField(org.elasticsearch.update.UpdateNoopIT)",
     "methodName": "testMapAndField",
     "className": "org.elasticsearch.update.UpdateNoopIT",
     "children": []
    },
    {
     "id": "ID#testArrayField(org.elasticsearch.update.UpdateNoopIT)",
     "displayName": "testArrayField(org.elasticsearch.update.UpdateNoopIT)",
     "methodName": "testArrayField",
     "className": "org.elasticsearch.update.UpdateNoopIT",
     "children": []
    },
    {
     "id": "ID#testSingleField(org.elasticsearch.update.UpdateNoopIT)",
     "displayName": "testSingleField(org.elasticsearch.update.UpdateNoopIT)",
     "methodName": "testSingleField",
     "className": "org.elasticsearch.update.UpdateNoopIT",
     "children": []
    },
    {
     "id": "ID#testMap(org.elasticsearch.update.UpdateNoopIT)",
     "displayName": "testMap(org.elasticsearch.update.UpdateNoopIT)",
     "methodName": "testMap",
     "className": "org.elasticsearch.update.UpdateNoopIT",
     "children": []
    },
    {
     "id": "ID#testTotallyEmpty(org.elasticsearch.update.UpdateNoopIT)",
     "displayName": "testTotallyEmpty(org.elasticsearch.update.UpdateNoopIT)",
     "methodName": "testTotallyEmpty",
     "className": "org.elasticsearch.update.UpdateNoopIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960040112
 }
]

[
 "TEST_STARTED",
 "ID#testTwoFields(org.elasticsearch.update.UpdateNoopIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoFields(org.elasticsearch.update.UpdateNoopIT)",
  "startTimestamp": 1460960040123,
  "executionTime": 220
 }
]

[
 "TEST_STARTED",
 "ID#testMapAndField(org.elasticsearch.update.UpdateNoopIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMapAndField(org.elasticsearch.update.UpdateNoopIT)",
  "startTimestamp": 1460960040344,
  "executionTime": 176
 }
]

[
 "TEST_STARTED",
 "ID#testArrayField(org.elasticsearch.update.UpdateNoopIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArrayField(org.elasticsearch.update.UpdateNoopIT)",
  "startTimestamp": 1460960040520,
  "executionTime": 86
 }
]

[
 "TEST_STARTED",
 "ID#testSingleField(org.elasticsearch.update.UpdateNoopIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleField(org.elasticsearch.update.UpdateNoopIT)",
  "startTimestamp": 1460960040606,
  "executionTime": 104
 }
]

[
 "TEST_STARTED",
 "ID#testMap(org.elasticsearch.update.UpdateNoopIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMap(org.elasticsearch.update.UpdateNoopIT)",
  "startTimestamp": 1460960040711,
  "executionTime": 156
 }
]

[
 "TEST_STARTED",
 "ID#testTotallyEmpty(org.elasticsearch.update.UpdateNoopIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTotallyEmpty(org.elasticsearch.update.UpdateNoopIT)",
  "startTimestamp": 1460960040868,
  "executionTime": 176
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.update.UpdateNoopIT",
  "startTimestamp": 1460960040112,
  "executionTime": 945
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.SearchTimeoutIT",
   "displayName": "org.elasticsearch.search.SearchTimeoutIT",
   "methodName": null,
   "className": "org.elasticsearch.search.SearchTimeoutIT",
   "children": [
    {
     "id": "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
     "displayName": "testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
     "methodName": "testSimpleTimeout",
     "className": "org.elasticsearch.search.SearchTimeoutIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960041062
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTimeout(org.elasticsearch.search.SearchTimeoutIT)",
  "startTimestamp": 1460960041074,
  "executionTime": 688
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.SearchTimeoutIT",
  "startTimestamp": 1460960041062,
  "executionTime": 705
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.recovery.SimpleRecoveryIT",
   "displayName": "org.elasticsearch.recovery.SimpleRecoveryIT",
   "methodName": null,
   "className": "org.elasticsearch.recovery.SimpleRecoveryIT",
   "children": [
    {
     "id": "ID#testSimpleRecovery(org.elasticsearch.recovery.SimpleRecoveryIT)",
     "displayName": "testSimpleRecovery(org.elasticsearch.recovery.SimpleRecoveryIT)",
     "methodName": "testSimpleRecovery",
     "className": "org.elasticsearch.recovery.SimpleRecoveryIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960041771
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleRecovery(org.elasticsearch.recovery.SimpleRecoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleRecovery(org.elasticsearch.recovery.SimpleRecoveryIT)",
  "startTimestamp": 1460960041782,
  "executionTime": 676
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.recovery.SimpleRecoveryIT",
  "startTimestamp": 1460960041771,
  "executionTime": 700
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
   "displayName": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
   "children": [
    {
     "id": "ID#testIncompatibleFilter(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testIncompatibleFilter(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testIncompatibleFilter",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testFieldStatsIndexLevel(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testFieldStatsIndexLevel(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testFieldStatsIndexLevel",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testIncompatibleFieldTypes(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testIncompatibleFieldTypes(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testIncompatibleFieldTypes",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testRandom(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testRandom(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testRandom",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    },
    {
     "id": "ID#testFieldStatsFiltering(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "displayName": "testFieldStatsFiltering(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
     "methodName": "testFieldStatsFiltering",
     "className": "org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960042477
 }
]

[
 "TEST_STARTED",
 "ID#testIncompatibleFilter(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncompatibleFilter(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1460960042486,
  "executionTime": 302
 }
]

[
 "TEST_STARTED",
 "ID#testFieldStatsIndexLevel(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldStatsIndexLevel(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1460960042788,
  "executionTime": 947
 }
]

[
 "TEST_STARTED",
 "ID#testIncompatibleFieldTypes(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncompatibleFieldTypes(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1460960043735,
  "executionTime": 100
 }
]

[
 "TEST_STARTED",
 "ID#testRandom(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandom(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1460960043835,
  "executionTime": 340
 }
]

[
 "TEST_STARTED",
 "ID#testFieldStatsFiltering(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldStatsFiltering(org.elasticsearch.fieldstats.FieldStatsIntegrationIT)",
  "startTimestamp": 1460960044175,
  "executionTime": 611
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.fieldstats.FieldStatsIntegrationIT",
  "startTimestamp": 1460960042477,
  "executionTime": 2321
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.settings.ClusterSettingsIT",
   "displayName": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
   "children": [
    {
     "id": "ID#testMissingUnits(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "displayName": "testMissingUnits(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "methodName": "testMissingUnits",
     "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
     "children": []
    },
    {
     "id": "ID#testClusterNonExistingSettingsUpdate(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "displayName": "testClusterNonExistingSettingsUpdate(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "methodName": "testClusterNonExistingSettingsUpdate",
     "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
     "children": []
    },
    {
     "id": "ID#testClusterUpdateSettingsWithBlocks(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "displayName": "testClusterUpdateSettingsWithBlocks(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "methodName": "testClusterUpdateSettingsWithBlocks",
     "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
     "children": []
    },
    {
     "id": "ID#testDeleteIsAppliedFirst(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "displayName": "testDeleteIsAppliedFirst(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "methodName": "testDeleteIsAppliedFirst",
     "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
     "children": []
    },
    {
     "id": "ID#testCanUpdateTracerSettings(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "displayName": "testCanUpdateTracerSettings(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "methodName": "testCanUpdateTracerSettings",
     "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
     "children": []
    },
    {
     "id": "ID#testClusterSettingsUpdateResponse(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "displayName": "testClusterSettingsUpdateResponse(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "methodName": "testClusterSettingsUpdateResponse",
     "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
     "children": []
    },
    {
     "id": "ID#testResetClusterSetting(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "displayName": "testResetClusterSetting(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "methodName": "testResetClusterSetting",
     "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
     "children": []
    },
    {
     "id": "ID#testUpdateDiscoveryPublishTimeout(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "displayName": "testUpdateDiscoveryPublishTimeout(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
     "methodName": "testUpdateDiscoveryPublishTimeout",
     "className": "org.elasticsearch.cluster.settings.ClusterSettingsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960044807
 }
]

[
 "TEST_STARTED",
 "ID#testMissingUnits(org.elasticsearch.cluster.settings.ClusterSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMissingUnits(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
  "startTimestamp": 1460960044821,
  "executionTime": 236
 }
]

[
 "TEST_STARTED",
 "ID#testClusterNonExistingSettingsUpdate(org.elasticsearch.cluster.settings.ClusterSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterNonExistingSettingsUpdate(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
  "startTimestamp": 1460960045057,
  "executionTime": 92
 }
]

[
 "TEST_STARTED",
 "ID#testClusterUpdateSettingsWithBlocks(org.elasticsearch.cluster.settings.ClusterSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterUpdateSettingsWithBlocks(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
  "startTimestamp": 1460960045149,
  "executionTime": 210
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIsAppliedFirst(org.elasticsearch.cluster.settings.ClusterSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIsAppliedFirst(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
  "startTimestamp": 1460960045359,
  "executionTime": 234
 }
]

[
 "TEST_STARTED",
 "ID#testCanUpdateTracerSettings(org.elasticsearch.cluster.settings.ClusterSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCanUpdateTracerSettings(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
  "startTimestamp": 1460960045593,
  "executionTime": 188
 }
]

[
 "TEST_STARTED",
 "ID#testClusterSettingsUpdateResponse(org.elasticsearch.cluster.settings.ClusterSettingsIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:05,943][WARN ][org.elasticsearch.test.transport] [node_t1] Transport response handler not found of id [7]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterSettingsUpdateResponse(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
  "startTimestamp": 1460960045781,
  "executionTime": 167
 }
]

[
 "TEST_STARTED",
 "ID#testResetClusterSetting(org.elasticsearch.cluster.settings.ClusterSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResetClusterSetting(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
  "startTimestamp": 1460960045949,
  "executionTime": 185
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateDiscoveryPublishTimeout(org.elasticsearch.cluster.settings.ClusterSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateDiscoveryPublishTimeout(org.elasticsearch.cluster.settings.ClusterSettingsIT)",
  "startTimestamp": 1460960046134,
  "executionTime": 365
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.settings.ClusterSettingsIT",
  "startTimestamp": 1460960044807,
  "executionTime": 1724
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.settings.UpdateSettingsIT",
   "displayName": "org.elasticsearch.indices.settings.UpdateSettingsIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.settings.UpdateSettingsIT",
   "children": [
    {
     "id": "ID#testOpenCloseUpdateSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "displayName": "testOpenCloseUpdateSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "methodName": "testOpenCloseUpdateSettings",
     "className": "org.elasticsearch.indices.settings.UpdateSettingsIT",
     "children": []
    },
    {
     "id": "ID#testUpdateAutoThrottleSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "displayName": "testUpdateAutoThrottleSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "methodName": "testUpdateAutoThrottleSettings",
     "className": "org.elasticsearch.indices.settings.UpdateSettingsIT",
     "children": []
    },
    {
     "id": "ID#testEngineGCDeletesSetting(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "displayName": "testEngineGCDeletesSetting(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "methodName": "testEngineGCDeletesSetting",
     "className": "org.elasticsearch.indices.settings.UpdateSettingsIT",
     "children": []
    },
    {
     "id": "ID#testUpdateThrottleSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "displayName": "testUpdateThrottleSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "methodName": "testUpdateThrottleSettings",
     "className": "org.elasticsearch.indices.settings.UpdateSettingsIT",
     "children": []
    },
    {
     "id": "ID#testUpdateMergeMaxThreadCount(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "displayName": "testUpdateMergeMaxThreadCount(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "methodName": "testUpdateMergeMaxThreadCount",
     "className": "org.elasticsearch.indices.settings.UpdateSettingsIT",
     "children": []
    },
    {
     "id": "ID#testUpdateSettingsWithBlocks(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "displayName": "testUpdateSettingsWithBlocks(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "methodName": "testUpdateSettingsWithBlocks",
     "className": "org.elasticsearch.indices.settings.UpdateSettingsIT",
     "children": []
    },
    {
     "id": "ID#testResetDefault(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "displayName": "testResetDefault(org.elasticsearch.indices.settings.UpdateSettingsIT)",
     "methodName": "testResetDefault",
     "className": "org.elasticsearch.indices.settings.UpdateSettingsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960046538
 }
]

[
 "TEST_STARTED",
 "ID#testOpenCloseUpdateSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOpenCloseUpdateSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
  "startTimestamp": 1460960046549,
  "executionTime": 235
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateAutoThrottleSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,794][TRACE][org.elasticsearch.test   ] Using transport client for node [node_s0] sniff: [false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,794][TRACE][org.elasticsearch.transport.tracer] [transport_client_node_s0] [6][indices:admin/create] sent to [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]] (timeout: [null])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,794][TRACE][org.elasticsearch.transport.tracer] [node_s0] [6][indices:admin/create] received request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,795][TRACE][org.elasticsearch.tasks  ] [node_s0] register 67 [local] [indices:admin/create] [org.elasticsearch.action.admin.indices.create.CreateIndexRequest@62747e53]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,795][TRACE][org.elasticsearch.tasks  ] [node_s0] register 68 [transport] [indices:admin/create] [org.elasticsearch.action.admin.indices.create.CreateIndexRequest@62747e53]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,795][TRACE][org.elasticsearch.cluster.service] [node_s0] will process [create-index [test], cause [api]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,795][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create-index [test], cause [api]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,796][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,796][DEBUG][org.elasticsearch.indices] [node_s0] creating Index [test], shards [1]/[0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,796][DEBUG][org.elasticsearch.index.store] [node_s0] [test] using index.store.throttle.type [NONE], with index.store.throttle.max_bytes_per_sec [null]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,797][TRACE][org.elasticsearch.index.mapper] [node_s0] [test] using dynamic[true], default mapping source[{\"_default_\":{}}], default percolator mapping source[{%0A\"_default_\":{%0A\"properties\" : {%0A\"query\" : {%0A\"type\" : \"percolator\"%0A}%0A}%0A}%0A}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,797][TRACE][org.elasticsearch.index  ] [node_s0] [test] scheduling translog_sync every 5s%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,797][TRACE][org.elasticsearch.index  ] [node_s0] [test] scheduling refresh every 1s%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,798][INFO ][org.elasticsearch.cluster.metadata] [node_s0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [_default_]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start balancing cluster%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start distributing Shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start allocating unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.decider] [node_s0] only a single data node is present, allowing allocation%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Assigned shard [[test][0], node[null], [P], v[0], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]] to [oNTLkK8YT_WKSqf3Lyo76g]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start assigning unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start distributing Shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Assigned shard [[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]] to node [oNTLkK8YT_WKSqf3Lyo76g]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,799][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start allocating unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,800][DEBUG][org.elasticsearch.indices] [node_s0] [test] closing ... (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,800][DEBUG][org.elasticsearch.indices] [node_s0] [test] closing index service (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,800][DEBUG][org.elasticsearch.index.cache.bitset] [node_s0] [test] clearing all bitsets because [close]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,800][DEBUG][org.elasticsearch.index.cache.query.index] [node_s0] [test] full cache clear, reason [close]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,800][DEBUG][org.elasticsearch.index.cache.bitset] [node_s0] [test] clearing all bitsets because [close]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,800][DEBUG][org.elasticsearch.indices] [node_s0] [test] closed... (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,800][TRACE][org.elasticsearch.cluster.service] expecting 2 acknowledgements for cluster_state update (version: 15)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,801][TRACE][org.elasticsearch.cluster.service] [node_s0] cluster state updated, source [create-index [test], cause [api]]%0Aversion: 15%0Astate uuid: 5sAVZhP4Tm20iU7lifhHpg%0Afrom_diff: false%0Ameta data version: 13%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], local, master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]%0Arouting_table (version 10):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,801][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [15]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,802][TRACE][org.elasticsearch.discovery.local] [node_s0] sending diff cluster state version [15] with size 1085 to [node_s1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,802][TRACE][org.elasticsearch.cluster.service] [node_s1] will process [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,802][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,803][TRACE][org.elasticsearch.cluster.service] [node_s1] cluster state updated, source [local-disco-receive(from master)]%0Aversion: 15%0Astate uuid: 5sAVZhP4Tm20iU7lifhHpg%0Afrom_diff: false%0Ameta data version: 13%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true], local%0Arouting_table (version 10):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,803][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 15%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,803][DEBUG][org.elasticsearch.index  ] [node_s1] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,804][TRACE][org.elasticsearch.cluster.service] ack received from node [{node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]], cluster_state update (version: 15)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,804][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 15%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,804][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 15, uuid: 5sAVZhP4Tm20iU7lifhHpg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,804][TRACE][org.elasticsearch.cluster.routing] [node_s0] no need to schedule reroute - no delayed unassigned shards, minDelaySetting [0], scheduled [9223372036854775807]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,806][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test] creating index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,806][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,806][DEBUG][org.elasticsearch.indices] [node_s0] creating Index [test], shards [1]/[0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,807][DEBUG][org.elasticsearch.index.store] [node_s0] [test] using index.store.throttle.type [NONE], with index.store.throttle.max_bytes_per_sec [null]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,807][TRACE][org.elasticsearch.index.mapper] [node_s0] [test] using dynamic[true], default mapping source[{\"_default_\":{}}], default percolator mapping source[{%0A\"_default_\":{%0A\"properties\" : {%0A\"query\" : {%0A\"type\" : \"percolator\"%0A}%0A}%0A}%0A}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,807][TRACE][org.elasticsearch.index  ] [node_s0] [test] scheduling translog_sync every 5s%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,807][TRACE][org.elasticsearch.index  ] [node_s0] [test] scheduling refresh every 1s%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,807][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test] adding mapping [_default_], source [{\"_default_\":{\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,808][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test][0] creating shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,808][TRACE][org.elasticsearch.env    ] [node_s0] acquiring node shardlock on [[test][0]], timeout [5000]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,808][TRACE][org.elasticsearch.env    ] [node_s0] successfully acquired shardlock for [[test][0]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,808][DEBUG][org.elasticsearch.index  ] [node_s0] [test] [test][0] creating using a new path [ShardPath{path=/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.indices.settings.UpdateSettingsIT_34FFB022680374F5-001/tempDir-001/data/SUITE-CHILD_VM=[1]-CLUSTER_SEED=[-7158772897230561731]-HASH=[2392B3A18D07]-cluster/nodes/0/indices/test/0, indexUUID='UauY_yl9Rhm-sLwEnabLNw', shard=[test][0]}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,809][DEBUG][org.elasticsearch.index  ] [node_s0] [test] creating shard_id [test][0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,810][DEBUG][org.elasticsearch.index.store] [node_s0] [test][0] store stats are refreshed with refresh_interval [10s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,810][DEBUG][org.elasticsearch.index.shard] [node_s0] [test][0] state: [CREATED]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,810][DEBUG][org.elasticsearch.index.shard] [node_s0] [test][0] state: [CREATED]->[RECOVERING], reason [from store]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,810][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,811][TRACE][org.elasticsearch.gateway] [node_s0] [test] writing state, reason [freshly created]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,811][DEBUG][org.elasticsearch.index.shard] [node_s0] [test][0] starting recovery from store ...%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,813][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: init: current segments file is \"segments\"; deletionPolicy=org.apache.lucene.index.SnapshotDeletionPolicy@7c6fdbdd%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,813][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: now checkpoint \"\" [0 segments ; isCommit = false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,813][TRACE][org.elasticsearch.cluster.service] ack received from node [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]], cluster_state update (version: 15)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,813][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: 0 msec to checkpoint%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,813][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: init: create=true%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,814][TRACE][org.elasticsearch.cluster.service] all expected nodes acknowledged cluster_state update (version: 15)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,814][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create-index [test], cause [api]]: took 18ms done applying updated cluster_state (version: 15, uuid: 5sAVZhP4Tm20iU7lifhHpg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,814][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 68%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,814][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 67%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,814][TRACE][org.elasticsearch.transport.tracer] [node_s0] [6][indices:admin/create] sent response%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,814][TRACE][org.elasticsearch.transport.tracer] [transport_client_node_s0] [6][indices:admin/create] received response from [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,814][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: %0Adir=store(default(mmapfs(/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.indices.settings.UpdateSettingsIT_34FFB022680374F5-001/tempDir-001/data/SUITE-CHILD_VM=[1]-CLUSTER_SEED=[-7158772897230561731]-HASH=[2392B3A18D07]-cluster/nodes/0/indices/test/0/index),niofs(/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.indices.settings.UpdateSettingsIT_34FFB022680374F5-001/tempDir-001/data/SUITE-CHILD_VM=[1]-CLUSTER_SEED=[-7158772897230561731]-HASH=[2392B3A18D07]-cluster/nodes/0/indices/test/0/index)))%0Aindex=%0Aversion=5.5.0%0Aanalyzer=org.elasticsearch.index.mapper.MapperService$MapperAnalyzerWrapper%0AramBufferSizeMB=256.0%0AmaxBufferedDocs=-1%0AmaxBufferedDeleteTerms=-1%0AmergedSegmentWarmer=org.elasticsearch.index.engine.InternalEngine$1@23177993%0AdelPolicy=org.apache.lucene.index.SnapshotDeletionPolicy%0Acommit=null%0AopenMode=CREATE%0Asimilarity=org.elasticsearch.index.similarity.SimilarityService$PerFieldSimilarity%0AmergeScheduler=EngineMergeScheduler: maxThreadCount=1, maxMergeCount=2, ioThrottle=true%0Adefault WRITE_LOCK_TIMEOUT=0%0AwriteLockTimeout=5000%0Acodec=Asserting(Lucene54): {}, docValues:{}%0AinfoStream=org.elasticsearch.common.lucene.LoggerInfoStream%0AmergePolicy=ElasticsearchMergePolicy([TieredMergePolicy: maxMergeAtOnce=2, maxMergeAtOnceExplicit=30, maxMergedSegmentMB=5120.0, floorSegmentMB=2.0, forceMergeDeletesPctAllowed=10.0, segmentsPerTier=2.0, maxCFSSegmentSizeMB=8.796093022207999E12, noCFSRatio=0.0)%0AindexerThreadPool=org.apache.lucene.index.DocumentsWriterPerThreadPool@2de51ae6%0AreaderPooling=false%0AperThreadHardLimitMB=1945%0AuseCompoundFile=true%0AcommitOnClose=false%0Awriter=org.apache.lucene.index.IndexWriter@7b8acd65%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,815][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: MMapDirectory.UNMAP_SUPPORTED=true%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,815][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] wipe translog location - creating new translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,815][TRACE][org.elasticsearch.tasks  ] [node_s0] register 69 [transport] [indices:admin/settings/update] [org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest@41b5b149]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][DEBUG][org.elasticsearch.index.engine] [node_s0] [test][0] no translog ID present in the current generation - creating one%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.cluster.service] [node_s0] will process [update-settings]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update-settings]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.index.engine] [node_s0] [test][0] committing writer with translog id [1]  and sync id [null] %0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: start%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start assigning unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: enter lock%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: now prepare%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: prepareCommit: flush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW:   index before flush %0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] DW: startFullFlush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,825][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start distributing Shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,826][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: apply all deletes during flush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,826][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Assigned shard [[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]] to node [oNTLkK8YT_WKSqf3Lyo76g]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,826][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: now apply all deletes for all segments maxDoc=0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,826][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start allocating unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,826][TRACE][org.elasticsearch.cluster.service] expecting 2 acknowledgements for cluster_state update (version: 16)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,826][TRACE][org.elasticsearch.cluster.service] [node_s0] cluster state updated, source [update-settings]%0Aversion: 16%0Astate uuid: V75k1e9OTJy1MbFvEHZh2Q%0Afrom_diff: false%0Ameta data version: 14%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], local, master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]%0Arouting_table (version 11):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,827][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [16]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,827][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] BD: prune sis=segments:  minGen=9223372036854775807 packetCount=0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,827][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] DW: elasticsearch[node_s0][generic][T#1] finishFullFlush success=true%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,827][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: startCommit(): start%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,828][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: startCommit index= changeCount=3%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,828][TRACE][org.elasticsearch.discovery.local] [node_s0] sending diff cluster state version [16] with size 770 to [node_s1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,828][TRACE][org.elasticsearch.cluster.service] [node_s1] will process [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,829][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,828][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: startCommit: wrote pending segments file \"pending_segments_1\"%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,829][TRACE][org.elasticsearch.cluster.service] [node_s1] cluster state updated, source [local-disco-receive(from master)]%0Aversion: 16%0Astate uuid: V75k1e9OTJy1MbFvEHZh2Q%0Afrom_diff: false%0Ameta data version: 14%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true], local%0Arouting_table (version 11):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=jNkSZ4mnQN6Ff3EIdNL8ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:06.798Z]]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,829][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 16%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,829][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: done all syncs: []%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: pendingCommit != null%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][DEBUG][org.elasticsearch.index  ] [node_s1] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][TRACE][org.elasticsearch.cluster.service] ack received from node [{node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]], cluster_state update (version: 16)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 1ms done applying updated cluster_state (version: 16, uuid: V75k1e9OTJy1MbFvEHZh2Q)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: done writing segments file \"segments_1\"%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 16%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][TRACE][org.elasticsearch.cluster.routing] [node_s0] no need to schedule reroute - no delayed unassigned shards, minDelaySetting [0], scheduled [9223372036854775807]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: now checkpoint \"\" [0 segments ; isCommit = true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][TRACE][org.elasticsearch.indices.cluster] [node_s0] ignoring recovery instruction for an existing shard [test][0] (shard state: [RECOVERING])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,830][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: 0 msec to checkpoint%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,831][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: took 5.5 msec%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,831][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: done%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,831][INFO ][org.elasticsearch.common.settings] [node_s0] updating [index.merge.scheduler.auto_throttle] from [true] to [false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,831][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: flush at getReader%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,831][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] DW: startFullFlush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,831][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,832][TRACE][org.elasticsearch.gateway] [node_s0] [test] writing state, reason [version changed from [1] to [2]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,832][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: apply all deletes during flush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,832][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: now apply all deletes for all segments maxDoc=0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,832][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] BD: prune sis=segments_1:  minGen=9223372036854775807 packetCount=0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,833][TRACE][org.elasticsearch.cluster.service] ack received from node [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]], cluster_state update (version: 16)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,833][TRACE][org.elasticsearch.cluster.service] all expected nodes acknowledged cluster_state update (version: 16)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,833][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update-settings]: took 8ms done applying updated cluster_state (version: 16, uuid: V75k1e9OTJy1MbFvEHZh2Q)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,833][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 69%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,833][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: incRefDeleter for NRT reader version=3 segments=%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,833][TRACE][org.elasticsearch.test   ] Using transport client for node [node_s0] sniff: [false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.transport.tracer] [transport_client_node_s0] [7][indices:monitor/settings/get] sent to [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]] (timeout: [null])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: return reader version=3 reader=StandardDirectoryReader(segments_1:3:nrt)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.transport.tracer] [node_s0] [7][indices:monitor/settings/get] received request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] DW: elasticsearch[node_s0][generic][T#1] finishFullFlush success=true%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.tasks  ] [node_s0] register 70 [local] [indices:monitor/settings/get] [org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest@11a9a433]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.tasks  ] [node_s0] register 71 [transport] [indices:monitor/settings/get] [org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest@11a9a433]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 71%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: getReader took 3 msec%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 70%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.indices] [node_s0] [test][0] warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.transport.tracer] [node_s0] [7][indices:monitor/settings/get] sent response%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,834][TRACE][org.elasticsearch.transport.tracer] [transport_client_node_s0] [7][indices:monitor/settings/get] received response from [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,835][TRACE][org.elasticsearch.index.warmer] [node_s0] [test][0] warming took [48.5micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:06,835][TRACE][org.elasticsearch.indices] [node_s0] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateAutoThrottleSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
  "startTimestamp": 1460960046785,
  "executionTime": 64
 }
]

[
 "TEST_STARTED",
 "ID#testEngineGCDeletesSetting(org.elasticsearch.indices.settings.UpdateSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEngineGCDeletesSetting(org.elasticsearch.indices.settings.UpdateSettingsIT)",
  "startTimestamp": 1460960046850,
  "executionTime": 472
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateThrottleSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateThrottleSettings(org.elasticsearch.indices.settings.UpdateSettingsIT)",
  "startTimestamp": 1460960047323,
  "executionTime": 6075
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateMergeMaxThreadCount(org.elasticsearch.indices.settings.UpdateSettingsIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,504][TRACE][org.elasticsearch.test   ] Using transport client for node [node_s1] sniff: [false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,504][TRACE][org.elasticsearch.transport.tracer] [transport_client_node_s1] [92][indices:admin/create] sent to [{node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]] (timeout: [null])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,504][TRACE][org.elasticsearch.transport.tracer] [node_s1] [92][indices:admin/create] received request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,514][TRACE][org.elasticsearch.tasks  ] [node_s1] register 396 [local] [indices:admin/create] [org.elasticsearch.action.admin.indices.create.CreateIndexRequest@20e1aa10]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,514][TRACE][org.elasticsearch.tasks  ] [node_s1] register 397 [transport] [indices:admin/create] [org.elasticsearch.action.admin.indices.create.CreateIndexRequest@20e1aa10]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,514][TRACE][org.elasticsearch.transport.tracer] [node_s1] [249][indices:admin/create] sent to [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]] (timeout: [null])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,524][TRACE][org.elasticsearch.transport.tracer] [node_s0] [249][indices:admin/create] received request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,524][TRACE][org.elasticsearch.tasks  ] [node_s0] register 1228 [local] [indices:admin/create] [org.elasticsearch.action.admin.indices.create.CreateIndexRequest@1a7b148d]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,524][TRACE][org.elasticsearch.tasks  ] [node_s0] register 1229 [transport] [indices:admin/create] [org.elasticsearch.action.admin.indices.create.CreateIndexRequest@1a7b148d]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,525][TRACE][org.elasticsearch.cluster.service] [node_s0] will process [create-index [test], cause [api]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,525][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create-index [test], cause [api]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,525][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,525][DEBUG][org.elasticsearch.indices] [node_s0] creating Index [test], shards [1]/[0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,525][DEBUG][org.elasticsearch.index.store] [node_s0] [test] using index.store.throttle.type [NONE], with index.store.throttle.max_bytes_per_sec [null]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,526][TRACE][org.elasticsearch.index.mapper] [node_s0] [test] using dynamic[true], default mapping source[{\"_default_\":{}}], default percolator mapping source[{%0A\"_default_\":{%0A\"properties\" : {%0A\"query\" : {%0A\"type\" : \"percolator\"%0A}%0A}%0A}%0A}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,526][TRACE][org.elasticsearch.index  ] [node_s0] [test] scheduling translog_sync every 4.5s%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,526][TRACE][org.elasticsearch.index  ] [node_s0] [test] scheduling refresh every 1s%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,527][INFO ][org.elasticsearch.cluster.metadata] [node_s0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [_default_]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,527][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,528][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start balancing cluster%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,528][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start distributing Shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,528][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start allocating unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,528][TRACE][org.elasticsearch.cluster.routing.allocation.decider] [node_s0] only a single data node is present, allowing allocation%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Assigned shard [[test][0], node[null], [P], v[0], s[UNASSIGNED], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]] to [oNTLkK8YT_WKSqf3Lyo76g]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start assigning unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start distributing Shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Assigned shard [[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]] to node [oNTLkK8YT_WKSqf3Lyo76g]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start allocating unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][DEBUG][org.elasticsearch.indices] [node_s0] [test] closing ... (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][DEBUG][org.elasticsearch.indices] [node_s0] [test] closing index service (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][DEBUG][org.elasticsearch.index.cache.bitset] [node_s0] [test] clearing all bitsets because [close]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][DEBUG][org.elasticsearch.index.cache.query.index] [node_s0] [test] full cache clear, reason [close]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][DEBUG][org.elasticsearch.index.cache.bitset] [node_s0] [test] clearing all bitsets because [close]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][DEBUG][org.elasticsearch.indices] [node_s0] [test] closed... (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,529][TRACE][org.elasticsearch.cluster.service] expecting 2 acknowledgements for cluster_state update (version: 47)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,547][TRACE][org.elasticsearch.cluster.service] [node_s0] cluster state updated, source [create-index [test], cause [api]]%0Aversion: 47%0Astate uuid: 1iIR6pUwQ86ow4XPdUW72g%0Afrom_diff: false%0Ameta data version: 45%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], local, master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]%0Arouting_table (version 25):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,547][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [47]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,547][TRACE][org.elasticsearch.discovery.local] [node_s0] sending diff cluster state version [47] with size 1178 to [node_s1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,547][TRACE][org.elasticsearch.cluster.service] [node_s1] will process [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,557][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,557][TRACE][org.elasticsearch.cluster.service] [node_s1] cluster state updated, source [local-disco-receive(from master)]%0Aversion: 47%0Astate uuid: 1iIR6pUwQ86ow4XPdUW72g%0Afrom_diff: false%0Ameta data version: 45%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true], local%0Arouting_table (version 25):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,557][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 47%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,558][DEBUG][org.elasticsearch.index  ] [node_s1] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,558][TRACE][org.elasticsearch.cluster.service] ack received from node [{node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]], cluster_state update (version: 47)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,558][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 47, uuid: 1iIR6pUwQ86ow4XPdUW72g)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,558][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 47%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,567][TRACE][org.elasticsearch.cluster.routing] [node_s0] no need to schedule reroute - no delayed unassigned shards, minDelaySetting [0], scheduled [9223372036854775807]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,567][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test] creating index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,567][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,568][DEBUG][org.elasticsearch.indices] [node_s0] creating Index [test], shards [1]/[0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,568][DEBUG][org.elasticsearch.index.store] [node_s0] [test] using index.store.throttle.type [NONE], with index.store.throttle.max_bytes_per_sec [null]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,568][TRACE][org.elasticsearch.index.mapper] [node_s0] [test] using dynamic[true], default mapping source[{\"_default_\":{}}], default percolator mapping source[{%0A\"_default_\":{%0A\"properties\" : {%0A\"query\" : {%0A\"type\" : \"percolator\"%0A}%0A}%0A}%0A}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,568][TRACE][org.elasticsearch.index  ] [node_s0] [test] scheduling translog_sync every 4.5s%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,568][TRACE][org.elasticsearch.index  ] [node_s0] [test] scheduling refresh every 1s%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,569][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test] adding mapping [_default_], source [{\"_default_\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,569][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test][0] creating shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,569][TRACE][org.elasticsearch.env    ] [node_s0] acquiring node shardlock on [[test][0]], timeout [5000]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,569][TRACE][org.elasticsearch.env    ] [node_s0] successfully acquired shardlock for [[test][0]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,570][DEBUG][org.elasticsearch.index  ] [node_s0] [test] [test][0] creating using a new path [ShardPath{path=/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.indices.settings.UpdateSettingsIT_34FFB022680374F5-001/tempDir-001/data/SUITE-CHILD_VM=[1]-CLUSTER_SEED=[-7158772897230561731]-HASH=[2392B3A18D07]-cluster/nodes/0/indices/test/0, indexUUID='TkJZnjnVTN-OON8GuLtrvw', shard=[test][0]}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,570][DEBUG][org.elasticsearch.index  ] [node_s0] [test] creating shard_id [test][0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,571][DEBUG][org.elasticsearch.index.store] [node_s0] [test][0] store stats are refreshed with refresh_interval [10s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,571][DEBUG][org.elasticsearch.index.shard] [node_s0] [test][0] state: [CREATED]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,571][DEBUG][org.elasticsearch.index.shard] [node_s0] [test][0] state: [CREATED]->[RECOVERING], reason [from store]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,572][DEBUG][org.elasticsearch.index.shard] [node_s0] [test][0] starting recovery from store ...%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,573][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,573][TRACE][org.elasticsearch.gateway] [node_s0] [test] writing state, reason [freshly created]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,573][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: init: current segments file is \"segments\"; deletionPolicy=org.apache.lucene.index.SnapshotDeletionPolicy@16526c5b%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,574][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: now checkpoint \"\" [0 segments ; isCommit = false]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,574][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: 0 msec to checkpoint%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,574][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: init: create=true%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,574][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: %0Adir=store(default(mmapfs(/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.indices.settings.UpdateSettingsIT_34FFB022680374F5-001/tempDir-001/data/SUITE-CHILD_VM=[1]-CLUSTER_SEED=[-7158772897230561731]-HASH=[2392B3A18D07]-cluster/nodes/0/indices/test/0/index),niofs(/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.indices.settings.UpdateSettingsIT_34FFB022680374F5-001/tempDir-001/data/SUITE-CHILD_VM=[1]-CLUSTER_SEED=[-7158772897230561731]-HASH=[2392B3A18D07]-cluster/nodes/0/indices/test/0/index)))%0Aindex=%0Aversion=5.5.0%0Aanalyzer=org.elasticsearch.index.mapper.MapperService$MapperAnalyzerWrapper%0AramBufferSizeMB=256.0%0AmaxBufferedDocs=-1%0AmaxBufferedDeleteTerms=-1%0AmergedSegmentWarmer=org.elasticsearch.index.engine.InternalEngine$1@7a88fec8%0AdelPolicy=org.apache.lucene.index.SnapshotDeletionPolicy%0Acommit=null%0AopenMode=CREATE%0Asimilarity=org.elasticsearch.index.similarity.SimilarityService$PerFieldSimilarity%0AmergeScheduler=EngineMergeScheduler: maxThreadCount=10000, maxMergeCount=10000, ioThrottle=true%0Adefault WRITE_LOCK_TIMEOUT=0%0AwriteLockTimeout=5000%0Acodec=Asserting(Lucene54): {_type=PostingsFormat(name=Asserting), _all=PostingsFormat(name=Asserting), field1=PostingsFormat(name=Asserting), field0=PostingsFormat(name=Asserting), _field_names=PostingsFormat(name=Asserting), field7=PostingsFormat(name=Asserting), field6=PostingsFormat(name=Asserting), field9=PostingsFormat(name=Asserting), field8=PostingsFormat(name=Asserting), field3=PostingsFormat(name=Asserting), _uid=PostingsFormat(name=Asserting), field2=PostingsFormat(name=Asserting), field5=PostingsFormat(name=Asserting), field4=PostingsFormat(name=Asserting)}, docValues:{_type=DocValuesFormat(name=Lucene54), _version=DocValuesFormat(name=Lucene54)}%0AinfoStream=org.elasticsearch.common.lucene.LoggerInfoStream%0AmergePolicy=ElasticsearchMergePolicy([TieredMergePolicy: maxMergeAtOnce=2, maxMergeAtOnceExplicit=30, maxMergedSegmentMB=5120.0, floorSegmentMB=2.0, forceMergeDeletesPctAllowed=10.0, segmentsPerTier=2.0, maxCFSSegmentSizeMB=8.796093022207999E12, noCFSRatio=0.5275479584764102)%0AindexerThreadPool=org.apache.lucene.index.DocumentsWriterPerThreadPool@6d08da90%0AreaderPooling=false%0AperThreadHardLimitMB=1945%0AuseCompoundFile=true%0AcommitOnClose=false%0Awriter=org.apache.lucene.index.IndexWriter@1105a757%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,574][TRACE][org.elasticsearch.cluster.service] ack received from node [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]], cluster_state update (version: 47)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,574][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: MMapDirectory.UNMAP_SUPPORTED=true%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,574][TRACE][org.elasticsearch.cluster.service] all expected nodes acknowledged cluster_state update (version: 47)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create-index [test], cause [api]]: took 50ms done applying updated cluster_state (version: 47, uuid: 1iIR6pUwQ86ow4XPdUW72g)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 1229%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 1228%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][TRACE][org.elasticsearch.transport.tracer] [node_s0] [249][indices:admin/create] sent response%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][DEBUG][org.elasticsearch.index.translog] [node_s0] [test][0] wipe translog location - creating new translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][TRACE][org.elasticsearch.transport.tracer] [node_s1] [249][indices:admin/create] received response from [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][TRACE][org.elasticsearch.tasks  ] [node_s1] unregister task for id: 397%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][TRACE][org.elasticsearch.tasks  ] [node_s1] unregister task for id: 396%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][TRACE][org.elasticsearch.transport.tracer] [node_s1] [92][indices:admin/create] sent response%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,575][TRACE][org.elasticsearch.transport.tracer] [transport_client_node_s1] [92][indices:admin/create] received response from [{node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.tasks  ] [node_s1] register 398 [transport] [indices:admin/settings/update] [org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest@6986b1af]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.transport.tracer] [node_s1] [250][indices:admin/settings/update] sent to [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]] (timeout: [null])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][DEBUG][org.elasticsearch.index.engine] [node_s0] [test][0] no translog ID present in the current generation - creating one%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.transport.tracer] [node_s0] [250][indices:admin/settings/update] received request%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.index.engine] [node_s0] [test][0] committing writer with translog id [1]  and sync id [null] %0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.tasks  ] [node_s0] register 1230 [local] [indices:admin/settings/update] [org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest@16dc3ff9]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: start%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.tasks  ] [node_s0] register 1231 [transport] [indices:admin/settings/update] [org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest@16dc3ff9]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: enter lock%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: now prepare%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: prepareCommit: flush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.cluster.service] [node_s0] will process [update-settings]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW:   index before flush %0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] DW: startFullFlush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: apply all deletes during flush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: now apply all deletes for all segments maxDoc=0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] BD: prune sis=segments:  minGen=9223372036854775807 packetCount=0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] DW: elasticsearch[node_s0][generic][T#1] finishFullFlush success=true%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: startCommit(): start%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: startCommit index= changeCount=3%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,576][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update-settings]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start assigning unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start distributing Shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Assigned shard [[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]] to node [oNTLkK8YT_WKSqf3Lyo76g]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,577][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start allocating unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,578][TRACE][org.elasticsearch.cluster.service] expecting 2 acknowledgements for cluster_state update (version: 48)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,578][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: startCommit: wrote pending segments file \"pending_segments_1\"%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,578][TRACE][org.elasticsearch.cluster.service] [node_s0] cluster state updated, source [update-settings]%0Aversion: 48%0Astate uuid: yFVOub5uTpmfzVB_BL2b3A%0Afrom_diff: false%0Ameta data version: 46%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], local, master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]%0Arouting_table (version 26):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,578][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: done all syncs: []%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,578][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: pendingCommit != null%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,578][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [48]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,587][TRACE][org.elasticsearch.discovery.local] [node_s0] sending diff cluster state version [48] with size 842 to [node_s1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,587][TRACE][org.elasticsearch.cluster.service] [node_s1] will process [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,587][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,587][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: done writing segments file \"segments_1\"%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,587][TRACE][org.elasticsearch.cluster.service] [node_s1] cluster state updated, source [local-disco-receive(from master)]%0Aversion: 48%0Astate uuid: yFVOub5uTpmfzVB_BL2b3A%0Afrom_diff: false%0Ameta data version: 46%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true], local%0Arouting_table (version 26):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,587][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: now checkpoint \"\" [0 segments ; isCommit = true]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,587][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 48%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,587][TRACE][org.elasticsearch.index.engine.lucene.iw.ifd] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IFD: 0 msec to checkpoint%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: took 20.6 msec%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: commit: done%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: flush at getReader%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] DW: startFullFlush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: apply all deletes during flush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: now apply all deletes for all segments maxDoc=0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][DEBUG][org.elasticsearch.index  ] [node_s1] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] BD: prune sis=segments_1:  minGen=9223372036854775807 packetCount=0%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.cluster.service] ack received from node [{node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]], cluster_state update (version: 48)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: incRefDeleter for NRT reader version=3 segments=%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 10ms done applying updated cluster_state (version: 48, uuid: yFVOub5uTpmfzVB_BL2b3A)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 48%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,597][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: return reader version=3 reader=StandardDirectoryReader(segments_1:3:nrt)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] DW: elasticsearch[node_s0][generic][T#1] finishFullFlush success=true%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.index.engine.lucene.iw] [node_s0] [test][0] elasticsearch[node_s0][generic][T#1] IW: getReader took 1 msec%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.indices] [node_s0] [test][0] warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.cluster.routing] [node_s0] no need to schedule reroute - no delayed unassigned shards, minDelaySetting [0], scheduled [9223372036854775807]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.index.warmer] [node_s0] [test][0] warming took [73.3micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.indices.cluster] [node_s0] ignoring recovery instruction for an existing shard [test][0] (shard state: [RECOVERING])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.indices] [node_s0] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.index.warmer] [node_s0] [test][0] top warming took [10.2micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][TRACE][org.elasticsearch.index.engine] [node_s0] [test][0] created new InternalEngine%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][INFO ][org.elasticsearch.common.settings] [node_s0] updating [index.merge.scheduler.max_thread_count] from [10000] to [1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,598][DEBUG][org.elasticsearch.index.shard] [node_s0] [test][0] state: [RECOVERING]->[POST_RECOVERY], reason [post recovery from shard_store]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,599][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,599][TRACE][org.elasticsearch.gateway] [node_s0] [test] writing state, reason [version changed from [1] to [2]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,599][TRACE][org.elasticsearch.index.shard] [node_s0] [test][0] recovery completed from shard_store, took [27ms]%0A    index    : files           [0] with total_size [0b], took[0s]%0A             : recovered_files [0] with total_size [0b]%0A             : reusing_files   [0] with total_size [0b]%0A    verify_index    : took [0s], check_index [0s]%0A    translog : number_of_operations [0], took [25ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,599][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 0 sending [internal:cluster/shard/started] to [oNTLkK8YT_WKSqf3Lyo76g] for shard [[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]], indexUUID [TkJZnjnVTN-OON8GuLtrvw], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,600][TRACE][org.elasticsearch.tasks  ] [node_s0] register 1232 [direct] [internal:cluster/shard/started] [[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]], indexUUID [TkJZnjnVTN-OON8GuLtrvw], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,600][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test][0] received shard started for [[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]], indexUUID [TkJZnjnVTN-OON8GuLtrvw], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,600][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 1232%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,600][TRACE][org.elasticsearch.transport.tracer] [node_s0] [340][internal:cluster/shard/started] received response from [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][TRACE][org.elasticsearch.cluster.service] ack received from node [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]], cluster_state update (version: 48)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][TRACE][org.elasticsearch.cluster.service] all expected nodes acknowledged cluster_state update (version: 48)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update-settings]: took 24ms done applying updated cluster_state (version: 48, uuid: yFVOub5uTpmfzVB_BL2b3A)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][TRACE][org.elasticsearch.cluster.service] [node_s0] will process [shard-started ([test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]), reason [after recovery from store]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]), reason [after recovery from store]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][TRACE][org.elasticsearch.cluster.routing.allocation] [node_s0] [test][0] marked shard as started (routing: [test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][TRACE][org.elasticsearch.cluster.routing.allocation.decider] [node_s0] only a single data node is present, allowing allocation%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start assigning unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,601][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start distributing Shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,602][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Assigned shard [[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[2], s[STARTED], a[id=AdFFyzYQR7SBezpcdghqHA]] to node [oNTLkK8YT_WKSqf3Lyo76g]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,602][TRACE][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] Start allocating unassigned shards%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,602][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[test][0]] ...]).%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,602][TRACE][org.elasticsearch.cluster.service] [node_s0] cluster state updated, source [shard-started ([test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]), reason [after recovery from store]]%0Aversion: 49%0Astate uuid: qpD99zz-TUCML692kMmneg%0Afrom_diff: false%0Ameta data version: 47%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], local, master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true]%0Arouting_table (version 27):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[2], s[STARTED], a[id=AdFFyzYQR7SBezpcdghqHA]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[2], s[STARTED], a[id=AdFFyzYQR7SBezpcdghqHA]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,602][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [49]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,603][TRACE][org.elasticsearch.discovery.local] [node_s0] sending diff cluster state version [49] with size 944 to [node_s1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,603][TRACE][org.elasticsearch.cluster.service] [node_s1] will process [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,608][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 1231%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,608][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,608][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 1230%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,608][TRACE][org.elasticsearch.cluster.service] [node_s1] cluster state updated, source [local-disco-receive(from master)]%0Aversion: 49%0Astate uuid: qpD99zz-TUCML692kMmneg%0Afrom_diff: false%0Ameta data version: 47%0Anodes: %0A   {node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local], master%0A   {node_s1}{a04j11QySCeej5BLlHIXZw}{local}{local[278]}[data=>false, mode=>local, client=>true], local%0Arouting_table (version 27):%0A-- index [test]%0A----shard_id [test][0]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[2], s[STARTED], a[id=AdFFyzYQR7SBezpcdghqHA]%0A%0Arouting_nodes:%0A-----node_id[oNTLkK8YT_WKSqf3Lyo76g][V]%0A--------[test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[2], s[STARTED], a[id=AdFFyzYQR7SBezpcdghqHA]%0A---- unassigned%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,608][TRACE][org.elasticsearch.transport.tracer] [node_s1] [250][indices:admin/settings/update] received response from [{node_s0}{oNTLkK8YT_WKSqf3Lyo76g}{local}{local[277]}[mode=>local]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,608][TRACE][org.elasticsearch.transport.tracer] [node_s0] [250][indices:admin/settings/update] sent response%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,618][TRACE][org.elasticsearch.tasks  ] [node_s1] unregister task for id: 398%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,608][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 49%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,618][TRACE][org.elasticsearch.tasks  ] [node_s0] register 1233 [transport] [indices:monitor/settings/get] [org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest@512d3063]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,619][DEBUG][org.elasticsearch.index  ] [node_s1] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,619][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 10ms done applying updated cluster_state (version: 49, uuid: qpD99zz-TUCML692kMmneg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,619][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 49%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,619][TRACE][org.elasticsearch.cluster.routing] [node_s0] no need to schedule reroute - no delayed unassigned shards, minDelaySetting [0], scheduled [9223372036854775807]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,619][DEBUG][org.elasticsearch.index.shard] [node_s0] [test][0] state: [POST_RECOVERY]->[STARTED], reason [global state is [STARTED]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,619][TRACE][org.elasticsearch.index.shard] [node_s0] [test][0] [test][0] writing shard state, reason [version changed from [1] to [2]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,621][DEBUG][org.elasticsearch.index  ] [node_s0] [test] using [tiered] merge mergePolicy with expunge_deletes_allowed[10.0], floor_segment[2mb], max_merge_at_once[2], max_merge_at_once_explicit[30], max_merged_segment[5gb], segments_per_tier[2.0], reclaim_deletes_weight[2.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,622][TRACE][org.elasticsearch.gateway] [node_s0] [test] writing state, reason [version changed from [2] to [3]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,624][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test][0], node[oNTLkK8YT_WKSqf3Lyo76g], [P], v[1], s[INITIALIZING], a[id=AdFFyzYQR7SBezpcdghqHA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:13.527Z]]), reason [after recovery from store]]: took 22ms done applying updated cluster_state (version: 49, uuid: qpD99zz-TUCML692kMmneg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:13,628][TRACE][org.elasticsearch.tasks  ] [node_s0] unregister task for id: 1233%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateMergeMaxThreadCount(org.elasticsearch.indices.settings.UpdateSettingsIT)",
  "startTimestamp": 1460960053398,
  "executionTime": 341
 }
]

[
 "TEST_STARTED",
 "ID#testUpdateSettingsWithBlocks(org.elasticsearch.indices.settings.UpdateSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUpdateSettingsWithBlocks(org.elasticsearch.indices.settings.UpdateSettingsIT)",
  "startTimestamp": 1460960053740,
  "executionTime": 365
 }
]

[
 "TEST_STARTED",
 "ID#testResetDefault(org.elasticsearch.indices.settings.UpdateSettingsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testResetDefault(org.elasticsearch.indices.settings.UpdateSettingsIT)",
  "startTimestamp": 1460960054105,
  "executionTime": 186
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.settings.UpdateSettingsIT",
  "startTimestamp": 1460960046538,
  "executionTime": 7797
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.AggregationsIntegrationIT",
   "displayName": "org.elasticsearch.search.aggregations.AggregationsIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.AggregationsIntegrationIT",
   "children": [
    {
     "id": "ID#testScroll(org.elasticsearch.search.aggregations.AggregationsIntegrationIT)",
     "displayName": "testScroll(org.elasticsearch.search.aggregations.AggregationsIntegrationIT)",
     "methodName": "testScroll",
     "className": "org.elasticsearch.search.aggregations.AggregationsIntegrationIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960054341
 }
]

[
 "TEST_STARTED",
 "ID#testScroll(org.elasticsearch.search.aggregations.AggregationsIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testScroll(org.elasticsearch.search.aggregations.AggregationsIntegrationIT)",
  "startTimestamp": 1460960055682,
  "executionTime": 50
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.AggregationsIntegrationIT",
  "startTimestamp": 1460960054341,
  "executionTime": 1539
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
   "displayName": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
   "methodName": null,
   "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
   "children": [
    {
     "id": "ID#testDeleteOrphanSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDeleteOrphanSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDeleteOrphanSnapshot",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testSnapshotStatus(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testSnapshotStatus(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testSnapshotStatus",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testFreshIndexUUID(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testFreshIndexUUID(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testFreshIndexUUID",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testBasicWorkFlow(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testBasicWorkFlow(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testBasicWorkFlow",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testChangeSettingsOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testChangeSettingsOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testChangeSettingsOnRestore",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testRestoreWithDifferentMappingsAndSettings(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testRestoreWithDifferentMappingsAndSettings(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testRestoreWithDifferentMappingsAndSettings",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDeleteRepositoryWhileSnapshotting(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDeleteRepositoryWhileSnapshotting(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDeleteRepositoryWhileSnapshotting",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDataFileFailureDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDataFileFailureDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDataFileFailureDuringSnapshot",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDeleteSnapshotWithMissingIndexAndShardMetadata(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDeleteSnapshotWithMissingIndexAndShardMetadata(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDeleteSnapshotWithMissingIndexAndShardMetadata",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testThrottling(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testThrottling(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testThrottling",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDeleteIndexDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDeleteIndexDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDeleteIndexDuringSnapshot",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testMoveShardWhileSnapshotting(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testMoveShardWhileSnapshotting(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testMoveShardWhileSnapshotting",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testSingleGetAfterRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testSingleGetAfterRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testSingleGetAfterRestore",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDeleteSnapshotWithMissingMetadata(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDeleteSnapshotWithMissingMetadata(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDeleteSnapshotWithMissingMetadata",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDeletionOfFailingToRecoverIndexShouldStopRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDeletionOfFailingToRecoverIndexShouldStopRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDeletionOfFailingToRecoverIndexShouldStopRestore",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testSnapshotRelocatingPrimary(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testSnapshotRelocatingPrimary(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testSnapshotRelocatingPrimary",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testEmptySnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testEmptySnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testEmptySnapshot",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testReadonlyRepository(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testReadonlyRepository(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testReadonlyRepository",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testSnapshotName(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testSnapshotName(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testSnapshotName",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testBatchingShardUpdateTask(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testBatchingShardUpdateTask(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testBatchingShardUpdateTask",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testRestoreTemplates(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testRestoreTemplates(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testRestoreTemplates",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDataFileFailureDuringRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDataFileFailureDuringRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDataFileFailureDuringRestore",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testIncludeGlobalState(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testIncludeGlobalState(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testIncludeGlobalState",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testRenameOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testRenameOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testRenameOnRestore",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDeleteSnapshotWithCorruptedSnapshotFile(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDeleteSnapshotWithCorruptedSnapshotFile(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDeleteSnapshotWithCorruptedSnapshotFile",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testUrlRepository(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testUrlRepository(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testUrlRepository",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testRecreateBlocksOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testRecreateBlocksOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testRecreateBlocksOnRestore",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testDeleteSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testDeleteSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testDeleteSnapshot",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testListCorruptedSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testListCorruptedSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testListCorruptedSnapshot",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testSnapshotMoreThanOnce(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testSnapshotMoreThanOnce(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testSnapshotMoreThanOnce",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testSnapshotClosedIndex(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testSnapshotClosedIndex(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testSnapshotClosedIndex",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testRestoreAliases(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testRestoreAliases(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testRestoreAliases",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testSnapshotFileFailureDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testSnapshotFileFailureDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testSnapshotFileFailureDuringSnapshot",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testUnallocatedShards(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testUnallocatedShards(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testUnallocatedShards",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    },
    {
     "id": "ID#testSnapshotSingleClosedIndex(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "displayName": "testSnapshotSingleClosedIndex(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
     "methodName": "testSnapshotSingleClosedIndex",
     "className": "org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960055903
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteOrphanSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteOrphanSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960055914,
  "executionTime": 462
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotStatus(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotStatus(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960056376,
  "executionTime": 769
 }
]

[
 "TEST_STARTED",
 "ID#testFreshIndexUUID(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFreshIndexUUID(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960057146,
  "executionTime": 890
 }
]

[
 "TEST_STARTED",
 "ID#testBasicWorkFlow(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasicWorkFlow(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960058036,
  "executionTime": 1875
 }
]

[
 "TEST_STARTED",
 "ID#testChangeSettingsOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:20,265][WARN ][org.elasticsearch.snapshots] [node_s0] [test-repo:test-snap] failed to restore snapshot%0ASnapshotRestoreException[[test-repo:test-snap] cannot modify setting [index.number_of_shards] on restore]%0A%09at org.elasticsearch.snapshots.RestoreService$1.updateIndexSettings(RestoreService.java:416)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:241)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:20,276][WARN ][org.elasticsearch.snapshots] [node_s0] [test-repo:test-snap] failed to restore snapshot%0Ajava.lang.IllegalArgumentException: must specify non-negative number of shards for index [test-idx]%0A%09at org.elasticsearch.cluster.metadata.IndexMetaData$Builder.build(IndexMetaData.java:753)%0A%09at org.elasticsearch.snapshots.RestoreService$1.updateIndexSettings(RestoreService.java:422)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:241)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChangeSettingsOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960059912,
  "executionTime": 726
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreWithDifferentMappingsAndSettings(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreWithDifferentMappingsAndSettings(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960060638,
  "executionTime": 530
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteRepositoryWhileSnapshotting(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:21,543][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [test-repo]%0Ajava.lang.IllegalStateException: trying to modify or unregister repository that is currently used %0A%09at org.elasticsearch.repositories.RepositoriesService.ensureRepositoryNotInUse(RepositoriesService.java:421)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$000(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:113)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteRepositoryWhileSnapshotting(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960061168,
  "executionTime": 929
 }
]

[
 "TEST_STARTED",
 "ID#testDataFileFailureDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:22,402][WARN ][org.elasticsearch.snapshots] [node_s0] [[test-idx][0]] [test-repo:test-snap] failed to create snapshot%0A[test-idx][[test-idx][0]] IndexShardSnapshotFailedException[Failed to perform snapshot (index files)]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:600)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.snapshot(BlobStoreIndexShardRepository.java:183)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.snapshot(SnapshotShardsService.java:343)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.access$200(SnapshotShardsService.java:79)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService$1.doRun(SnapshotShardsService.java:299)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.writeBlob(MockRepository.java:363)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshotFile(BlobStoreIndexShardRepository.java:652)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:598)%0A%09... 8 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDataFileFailureDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960062097,
  "executionTime": 341
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteSnapshotWithMissingIndexAndShardMetadata(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteSnapshotWithMissingIndexAndShardMetadata(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960062438,
  "executionTime": 502
 }
]

[
 "TEST_STARTED",
 "ID#testThrottling(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThrottling(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960062941,
  "executionTime": 14443
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteIndexDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteIndexDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960077385,
  "executionTime": 1220
 }
]

[
 "TEST_STARTED",
 "ID#testMoveShardWhileSnapshotting(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMoveShardWhileSnapshotting(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960078606,
  "executionTime": 808
 }
]

[
 "TEST_STARTED",
 "ID#testSingleGetAfterRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleGetAfterRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960079415,
  "executionTime": 403
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteSnapshotWithMissingMetadata(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,099][WARN ][org.elasticsearch.repositories.fs] [node_s0] cannot read metadata for snapshot [test-repo:test-snap-1]%0ASnapshotMissingException[[test-repo:test-snap-1] is missing]; nested: NoSuchFileException[/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT_34FFB022680374F5-001/tempDir-001/repos/YVEMUWKBQf/meta-test-snap-1.dat];%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreRepository.readSnapshotMetaData(BlobStoreRepository.java:470)%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreRepository.deleteSnapshot(BlobStoreRepository.java:308)%0A%09at org.elasticsearch.snapshots.SnapshotsService$8.run(SnapshotsService.java:1009)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT_34FFB022680374F5-001/tempDir-001/repos/YVEMUWKBQf/meta-test-snap-1.dat%0A%09at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)%0A%09at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214)%0A%09at java.nio.file.Files.newByteChannel(Files.java:361)%0A%09at java.nio.file.Files.newByteChannel(Files.java:407)%0A%09at java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newInputStream(FilterFileSystemProvider.java:193)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newInputStream(FilterFileSystemProvider.java:193)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newInputStream(FilterFileSystemProvider.java:193)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newInputStream(HandleTrackingFS.java:93)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newInputStream(FilterFileSystemProvider.java:193)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newInputStream(HandleTrackingFS.java:93)%0A%09at java.nio.file.Files.newInputStream(Files.java:152)%0A%09at org.elasticsearch.common.blobstore.fs.FsBlobContainer.readBlob(FsBlobContainer.java:93)%0A%09at org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat.readBlob(ChecksumBlobStoreFormat.java:100)%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreFormat.read(BlobStoreFormat.java:86)%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreRepository.readSnapshotMetaData(BlobStoreRepository.java:468)%0A%09... 5 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteSnapshotWithMissingMetadata(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960079818,
  "executionTime": 416
 }
]

[
 "TEST_STARTED",
 "ID#testDeletionOfFailingToRecoverIndexShouldStopRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,808][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][3]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][3]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][3]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][3]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][3]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,821][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][5]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][5]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][5]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][5]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][5]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,821][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][3] received shard failed for [test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=9NQT8YjkQDiaX2tGLa1B1w], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:40.779Z], details[restore_source[test-repo/test-snap]]], indexUUID [CxLuFZDLT2Kkj_LgGzqs-g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][3]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][3]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][3]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][3]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,823][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][5] received shard failed for [test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=3AJcd530RceEOcRmnlpqSg], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:40.779Z], details[restore_source[test-repo/test-snap]]], indexUUID [CxLuFZDLT2Kkj_LgGzqs-g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][5]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][5]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][5]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][5]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,823][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,826][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][7]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][7]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][7]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][7]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][7]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,836][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=f1RnlzkCSMy6nd57CmN33A], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:40.779Z], details[restore_source[test-repo/test-snap]]], indexUUID [CxLuFZDLT2Kkj_LgGzqs-g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,840][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][7] received shard failed for [test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=1PJN-N1SSDaFSn_4Unj76g], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:40.779Z], details[restore_source[test-repo/test-snap]]], indexUUID [CxLuFZDLT2Kkj_LgGzqs-g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][7]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][7]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][7]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][7]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,851][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][0]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][0]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][0]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][0]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][0]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,862][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][0] received shard failed for [test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=vAw5dB-xRG27ZLkhIvrMLg], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:40.779Z], details[restore_source[test-repo/test-snap]]], indexUUID [CxLuFZDLT2Kkj_LgGzqs-g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][0]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][0]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][0]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][0]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,863][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][2]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][2]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][2]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][2]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][2]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,877][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][2] received shard failed for [test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=4moKWwxRQmSQ6hke2E3_vA], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:40.779Z], details[restore_source[test-repo/test-snap]]], indexUUID [CxLuFZDLT2Kkj_LgGzqs-g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][2]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][2]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][2]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][2]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,878][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][4]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][4]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][4]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][4]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][4]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,879][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][4] received shard failed for [test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=O8ntNzgKTWSFZ72eCRz9xA], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:40.779Z], details[restore_source[test-repo/test-snap]]], indexUUID [CxLuFZDLT2Kkj_LgGzqs-g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][4]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][4]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][4]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][4]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,879][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][6]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][6]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][6]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][6]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][6]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:40,881][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][6] received shard failed for [test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=URqXrUilTCWVKIu_ja4gUA], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:40.779Z], details[restore_source[test-repo/test-snap]]], indexUUID [CxLuFZDLT2Kkj_LgGzqs-g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][6]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][6]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][6]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][6]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeletionOfFailingToRecoverIndexShouldStopRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960080234,
  "executionTime": 1047
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotRelocatingPrimary(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotRelocatingPrimary(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960081282,
  "executionTime": 2674
 }
]

[
 "TEST_STARTED",
 "ID#testEmptySnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptySnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960083956,
  "executionTime": 43
 }
]

[
 "TEST_STARTED",
 "ID#testReadonlyRepository(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,331][WARN ][org.elasticsearch.snapshots] [node_s0] failed to create snapshot [readonly-repo:test-snap-2]%0ARepositoryException[[readonly-repo] cannot create snapshot in a readonly repository]%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreRepository.initializeSnapshot(BlobStoreRepository.java:267)%0A%09at org.elasticsearch.snapshots.SnapshotsService.beginSnapshot(SnapshotsService.java:309)%0A%09at org.elasticsearch.snapshots.SnapshotsService.access$600(SnapshotsService.java:95)%0A%09at org.elasticsearch.snapshots.SnapshotsService$1$1.run(SnapshotsService.java:231)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testReadonlyRepository(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960084000,
  "executionTime": 376
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotName(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotName(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960084376,
  "executionTime": 45
 }
]

[
 "TEST_STARTED",
 "ID#testBatchingShardUpdateTask(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,439][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [delete_repository [*]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,439][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [delete_repository [*]]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create-index-template [random_index_template], cause [api]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [506], source [create-index-template [random_index_template], cause [api]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [506]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [506], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [506], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 506%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 506, uuid: 1pduDd32Qw2xuGkXXZL5nA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,440][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 506%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,441][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 1ms done applying updated cluster_state (version: 506, uuid: 1pduDd32Qw2xuGkXXZL5nA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,442][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 506%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,443][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create-index-template [random_index_template], cause [api]]: took 3ms done applying updated cluster_state (version: 506, uuid: 1pduDd32Qw2xuGkXXZL5nA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,443][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [put_repository [test-repo]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [507], source [put_repository [test-repo]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [507]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [507], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [507], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 507%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 507, uuid: ZQw-lF1MRA-7nh9lLtnnWA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,444][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 507%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,447][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 507%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,447][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 2ms done applying updated cluster_state (version: 507, uuid: ZQw-lF1MRA-7nh9lLtnnWA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,451][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [put_repository [test-repo]]: took 7ms done applying updated cluster_state (version: 507, uuid: ZQw-lF1MRA-7nh9lLtnnWA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,452][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create-index [test-idx], cause [api]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,454][INFO ][org.elasticsearch.cluster.metadata] [node_s0] [test-idx] creating index, cause [api], templates [random_index_template], shards [9]/[0], mappings [_default_]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,457][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [508], source [create-index [test-idx], cause [api]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,457][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [508]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,457][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,457][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [508], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,457][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 508%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,457][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,458][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 508, uuid: QlGqs3PVRUuQSm5b9paOWw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,458][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [508], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,458][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 508%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,464][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 7 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=32lWgLYBTmmj7TCiX1NxMw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,464][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][7] received shard started for [[test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=32lWgLYBTmmj7TCiX1NxMw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,466][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 3 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mrA466FyS_y1NF2wox8WRw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,466][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][3] received shard started for [[test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mrA466FyS_y1NF2wox8WRw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,467][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 8ms done applying updated cluster_state (version: 508, uuid: QlGqs3PVRUuQSm5b9paOWw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,467][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 508%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,468][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 1 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mw3yYNhgS4yBPI6sMhIF6A], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,469][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard started for [[test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mw3yYNhgS4yBPI6sMhIF6A], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,469][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 5 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=lP78j6NnRXaiYMLXXHa3hg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,469][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][5] received shard started for [[test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=lP78j6NnRXaiYMLXXHa3hg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,474][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 2 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=dmPVreP0ShWajO0ZSt1PJg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,475][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][2] received shard started for [[test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=dmPVreP0ShWajO0ZSt1PJg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,477][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 6 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=OkbRWGiNQHWtBGnLWS06ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,478][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][6] received shard started for [[test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=OkbRWGiNQHWtBGnLWS06ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,478][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create-index [test-idx], cause [api]]: took 25ms done applying updated cluster_state (version: 508, uuid: QlGqs3PVRUuQSm5b9paOWw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,478][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=32lWgLYBTmmj7TCiX1NxMw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mrA466FyS_y1NF2wox8WRw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mw3yYNhgS4yBPI6sMhIF6A], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=lP78j6NnRXaiYMLXXHa3hg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=dmPVreP0ShWajO0ZSt1PJg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=OkbRWGiNQHWtBGnLWS06ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,479][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 4 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,479][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][4] received shard started for [[test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,479][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 0 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,479][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [509], source [shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=32lWgLYBTmmj7TCiX1NxMw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mrA466FyS_y1NF2wox8WRw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mw3yYNhgS4yBPI6sMhIF6A], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=lP78j6NnRXaiYMLXXHa3hg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=dmPVreP0ShWajO0ZSt1PJg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=OkbRWGiNQHWtBGnLWS06ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,479][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][0] received shard started for [[test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,480][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [509]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,480][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,480][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [509], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,480][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,481][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [509], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,481][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 509%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,481][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 509%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,481][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 509, uuid: hTXyBu6sStywiCkap28TBg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,488][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 7ms done applying updated cluster_state (version: 509, uuid: hTXyBu6sStywiCkap28TBg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,488][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 509%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,497][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 4 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,497][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][4] received shard started for [[test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,497][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 0 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,497][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][0] received shard started for [[test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,500][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=32lWgLYBTmmj7TCiX1NxMw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mrA466FyS_y1NF2wox8WRw], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=mw3yYNhgS4yBPI6sMhIF6A], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], s[INITIALIZING], a[id=lP78j6NnRXaiYMLXXHa3hg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=dmPVreP0ShWajO0ZSt1PJg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=OkbRWGiNQHWtBGnLWS06ug], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store]]: took 21ms done applying updated cluster_state (version: 509, uuid: hTXyBu6sStywiCkap28TBg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,500][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,500][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 8 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,504][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][8] received shard started for [[test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from store], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,504][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [510], source [shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,506][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [510]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,506][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,507][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [510], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,507][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 510%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,507][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,507][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [510], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,507][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 510%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,508][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 510, uuid: 4Wjr6OETRF6VfJje8nhqyA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,509][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 1ms done applying updated cluster_state (version: 510, uuid: 4Wjr6OETRF6VfJje8nhqyA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,509][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][6]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,509][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 510%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,509][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 8 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,509][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][8] received shard started for [[test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,511][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][6]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,512][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][2]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,513][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=Kx7RvgeAQw-7bD7YVmMnqg], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=MynTUjjvR3uP0iFOta0oaA], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]: took 12ms done applying updated cluster_state (version: 510, uuid: 4Wjr6OETRF6VfJje8nhqyA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,518][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,519][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[test-idx][8], [test-idx][8]] ...]).%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,519][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [511], source [shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,519][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [511]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,520][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,520][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [511], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,520][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 511%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,520][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][2]] active fully on other nodes)]: took 8ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,520][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,520][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [511], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,521][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 511, uuid: HPiXSceYTcSud_We8WBmLQ)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,521][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 511%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,522][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 1ms done applying updated cluster_state (version: 511, uuid: HPiXSceYTcSud_We8WBmLQ)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,522][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][2]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,522][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 511%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,525][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][2]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,525][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][4]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,526][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [after recovery from store],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[1], s[INITIALIZING], a[id=mKddeYPoQf25JkTXGHidfQ], unassigned_info[[reason=INDEX_CREATED], at[2016-04-18T06:14:44.454Z]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]: took 7ms done applying updated cluster_state (version: 511, uuid: HPiXSceYTcSud_We8WBmLQ)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,526][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,526][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,526][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,526][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,526][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,526][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [cluster_health (wait_for_events [LANGUID])]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,527][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [cluster_health (wait_for_events [LANGUID])]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,528][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][4]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,528][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][0]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,528][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,531][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][0]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,531][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][6]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,531][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,531][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,533][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][6]] active fully on other nodes)]: took 1ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,533][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][8]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,533][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,533][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [put-mapping [RANDOM_BOGUS_TYPE______],put-mapping [type1]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,534][DEBUG][org.elasticsearch.cluster.metadata] [node_s0] [test-idx] create_mapping [RANDOM_BOGUS_TYPE______] with source [{\"RANDOM_BOGUS_TYPE______\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,535][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][8]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,537][DEBUG][org.elasticsearch.cluster.metadata] [node_s0] [test-idx] create_mapping [type1] with source [{\"type1\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"boolean\"}}],\"properties\":{\"field1\":{\"type\":\"string\",\"fielddata\":{\"loading\":\"lazy\"}}}}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,537][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [512], source [put-mapping [RANDOM_BOGUS_TYPE______],put-mapping [type1]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,537][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [512]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,538][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,538][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [512], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,539][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 512%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,538][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,539][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 512, uuid: 9ZzsTfWBSxSjxv8O6e-PVA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,539][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [512], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,539][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 512%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,542][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 3ms done applying updated cluster_state (version: 512, uuid: 9ZzsTfWBSxSjxv8O6e-PVA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,542][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 512%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,544][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [put-mapping [RANDOM_BOGUS_TYPE______],put-mapping [type1]]: took 10ms done applying updated cluster_state (version: 512, uuid: 9ZzsTfWBSxSjxv8O6e-PVA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,544][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [put-mapping [type1],put-mapping [type1]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,553][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [put-mapping [type1],put-mapping [type1]]: took 8ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,553][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,553][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,553][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,553][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create_snapshot [test-snap]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [513], source [create_snapshot [test-snap]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [513]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [513], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [513], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 513%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 513%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,761][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 513, uuid: 2OpPOn0ZQSuhf380-LSjYg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,762][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 513, uuid: 2OpPOn0ZQSuhf380-LSjYg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,762][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 513%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,762][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [create_snapshot [test-snap]]: took 1ms done applying updated cluster_state (version: 513, uuid: 2OpPOn0ZQSuhf380-LSjYg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update_snapshot [test-snap]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [514], source [update_snapshot [test-snap]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [514]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [514], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [514], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 514%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 514%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,773][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 514, uuid: f9pHk4_DQm6vik8SNs0VDw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,774][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 514, uuid: f9pHk4_DQm6vik8SNs0VDw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,774][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 514%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,774][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update_snapshot [test-snap]]: took 1ms done applying updated cluster_state (version: 514, uuid: f9pHk4_DQm6vik8SNs0VDw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,774][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [test_block]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,829][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [test_block]: took 55ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [515], source [update snapshot state]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [515]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [515], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [515], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 515%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 515%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 515, uuid: UEdNQL0NRDal14pvadW4eA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,830][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 515, uuid: UEdNQL0NRDal14pvadW4eA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 515%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 1ms done applying updated cluster_state (version: 515, uuid: UEdNQL0NRDal14pvadW4eA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [remove snapshot metadata]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [516], source [remove snapshot metadata]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,831][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [516]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [516], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [516], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 516%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 516%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 516, uuid: RRKj1uGLQhCoXXnn8d3feA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 516, uuid: RRKj1uGLQhCoXXnn8d3feA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 516%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,832][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [remove snapshot metadata]: took 1ms done applying updated cluster_state (version: 516, uuid: RRKj1uGLQhCoXXnn8d3feA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,833][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [close-indices [test-idx]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,833][INFO ][org.elasticsearch.cluster.metadata] [node_s0] closing indices [[test-idx]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,833][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [517], source [close-indices [test-idx]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,833][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [517]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,833][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,833][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [517], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,833][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 517%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,833][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,834][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [517], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,834][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 517%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,834][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 517, uuid: WDsCidC6Q-COHL4DTgO78A)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,838][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 4ms done applying updated cluster_state (version: 517, uuid: WDsCidC6Q-COHL4DTgO78A)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,838][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 517%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,842][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [close-indices [test-idx]]: took 9ms done applying updated cluster_state (version: 517, uuid: WDsCidC6Q-COHL4DTgO78A)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,844][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [restore_snapshot[test-snap]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,848][DEBUG][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] skipping rebalance due to in-flight shard/store fetches%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,849][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [518], source [restore_snapshot[test-snap]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,849][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [518]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,849][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,849][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,849][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [518], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,850][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 518%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,850][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [518], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,850][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 518%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,850][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 1ms done applying updated cluster_state (version: 518, uuid: UdviQ8XpTX282Myll-PGIg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,852][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 2ms done applying updated cluster_state (version: 518, uuid: UdviQ8XpTX282Myll-PGIg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,852][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 518%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,854][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [restore_snapshot[test-snap]]: took 10ms done applying updated cluster_state (version: 518, uuid: UdviQ8XpTX282Myll-PGIg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,854][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [cluster_reroute(async_shard_fetch)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,857][DEBUG][org.elasticsearch.cluster.routing.allocation.allocator] [node_s0] skipping rebalance due to in-flight shard/store fetches%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,857][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [519], source [cluster_reroute(async_shard_fetch)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,857][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [519]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,857][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,857][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [519], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,857][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 519%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,858][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 519, uuid: xZwU4lZ_TNq8Qka7YIqSFA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,857][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,858][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [519], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,858][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 519%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,864][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 6ms done applying updated cluster_state (version: 519, uuid: xZwU4lZ_TNq8Qka7YIqSFA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,864][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 519%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,873][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 1 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,878][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [cluster_reroute(async_shard_fetch)]: took 24ms done applying updated cluster_state (version: 519, uuid: xZwU4lZ_TNq8Qka7YIqSFA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,879][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [test_block]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,879][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [test_block]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,879][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [cluster_reroute(async_shard_fetch)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,882][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 8 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,890][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard started for [[test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,890][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][8] received shard started for [[test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,894][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [520], source [cluster_reroute(async_shard_fetch)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,894][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [520]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,894][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,894][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,894][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [520], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,894][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [520], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,894][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 520%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,894][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 520%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,895][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 1 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,895][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard started for [[test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,895][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 520, uuid: m_fHmmojRfCiIng5qC26EA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,900][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 4 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,900][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 7 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,900][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][4] received shard started for [[test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,901][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][7] received shard started for [[test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,902][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 7 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,902][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][7] received shard started for [[test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,903][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 0 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,904][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][0] received shard started for [[test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,905][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 2 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,905][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][2] received shard started for [[test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 11ms done applying updated cluster_state (version: 520, uuid: m_fHmmojRfCiIng5qC26EA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 520%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 4 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][4] received shard started for [[test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 8 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][8] received shard started for [[test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 2 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][2] received shard started for [[test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 0 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,906][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][0] received shard started for [[test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,907][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [cluster_reroute(async_shard_fetch)]: took 28ms done applying updated cluster_state (version: 520, uuid: m_fHmmojRfCiIng5qC26EA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,907][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,908][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [521], source [shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,909][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [521]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,909][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,909][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [521], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,909][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,909][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 521%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,909][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [521], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,909][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 521%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,910][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 521, uuid: 7TQ13F7xSayyXC9XTETSfg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,912][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 3 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=5XrecX1LS_O2CmJW4fOs3g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,912][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][3] received shard started for [[test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=5XrecX1LS_O2CmJW4fOs3g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,914][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 5ms done applying updated cluster_state (version: 521, uuid: 7TQ13F7xSayyXC9XTETSfg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,914][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 521%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,917][DEBUG][org.elasticsearch.cluster.action.shard] [node_s1] 5 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=jP3p52dLQn-s5Q9l4SNewQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,923][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][5] received shard started for [[test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=jP3p52dLQn-s5Q9l4SNewQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,925][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=YkQ1eO_vTEmlj5an4Nfj-g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][7], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Rt2hdS9bSWGB-Uraif7Myg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][4], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=UlJSBPO8SMulSlKD1iu7Sw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][8], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=gVolSBTiRgit3mPrzbmosw], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][2], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=er54NGFeTpSPBa6QWCSvhg], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started],shard-started ([test-idx][0], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=zZcV2PFZSIuvPTqQIJrpQA], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard state is [POST_RECOVERY], mark shard as started]]: took 17ms done applying updated cluster_state (version: 521, uuid: 7TQ13F7xSayyXC9XTETSfg)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,926][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=5XrecX1LS_O2CmJW4fOs3g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=jP3p52dLQn-s5Q9l4SNewQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,927][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [522], source [shard-started ([test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=5XrecX1LS_O2CmJW4fOs3g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=jP3p52dLQn-s5Q9l4SNewQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,927][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [522]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,927][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,927][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [522], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,927][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 522%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,928][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 522, uuid: dlL-dt0vR3iuJg1uYyfwmw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,927][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,928][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [522], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,928][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 522%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,933][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 5ms done applying updated cluster_state (version: 522, uuid: dlL-dt0vR3iuJg1uYyfwmw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,933][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 522%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,933][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][8]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,934][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] 6 sending [internal:cluster/shard/started] to [LU-Nwa22SdSbpxN6h4JNhg] for shard [[test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=GjB2S_AdQ0GVcttzdYz6PQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,934][DEBUG][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][6] received shard started for [[test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=GjB2S_AdQ0GVcttzdYz6PQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]], indexUUID [EjpY4nJOTlmMYmCGyOVYGA], message [after recovery from repository], failure [Unknown]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,935][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][3], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=5XrecX1LS_O2CmJW4fOs3g], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository],shard-started ([test-idx][5], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=jP3p52dLQn-s5Q9l4SNewQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository]]: took 9ms done applying updated cluster_state (version: 522, uuid: dlL-dt0vR3iuJg1uYyfwmw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,935][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=GjB2S_AdQ0GVcttzdYz6PQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,935][INFO ][org.elasticsearch.cluster.routing.allocation] [node_s0] Cluster health status changed from [RED] to [GREEN] (reason: [shards started [[test-idx][6]] ...]).%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,935][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][8]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,936][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [523], source [shard-started ([test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=GjB2S_AdQ0GVcttzdYz6PQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,936][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [523]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,936][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][0]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,936][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,936][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [523], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,936][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 523%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,936][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 523, uuid: OkyojugmRg6cBIk8j8JH7g)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,938][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][0]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,938][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][2]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,941][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][2]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,941][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,941][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [523], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,941][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 523%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,943][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 2ms done applying updated cluster_state (version: 523, uuid: OkyojugmRg6cBIk8j8JH7g)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,943][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 523%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,944][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][2]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,945][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][2]] active fully on other nodes)]: took 1ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,946][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][0]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,948][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][0]] active fully on other nodes)]: took 1ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,948][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [shard-started ([test-idx][6], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=GjB2S_AdQ0GVcttzdYz6PQ], unassigned_info[[reason=EXISTING_INDEX_RESTORED], at[2016-04-18T06:14:44.844Z], details[restore_source[test-repo/test-snap]]]), reason [after recovery from repository]]: took 12ms done applying updated cluster_state (version: 523, uuid: OkyojugmRg6cBIk8j8JH7g)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,948][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [test_block]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,948][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [test_block]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,948][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [test_block]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,953][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][4]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,956][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][4]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,956][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][6]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,958][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][6]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,958][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][8]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,961][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [indices_store ([[test-idx][8]] active fully on other nodes)]: took 2ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,962][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [test_block]: took 14ms no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,962][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,963][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [524], source [update snapshot state]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,963][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [524]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,963][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,963][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [524], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,963][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 524%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,963][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [524], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 524%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 524, uuid: rL7zvR-CQqqoFnzq1sKVdw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 524, uuid: rL7zvR-CQqqoFnzq1sKVdw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 524%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 1ms done applying updated cluster_state (version: 524, uuid: rL7zvR-CQqqoFnzq1sKVdw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,964][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [update snapshot state]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][7]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][1]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][5]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:44,965][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [indices_store ([[test-idx][3]] active fully on other nodes)]: took 0s no change in cluster_state%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,008][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [delete-index [test-idx]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,008][DEBUG][org.elasticsearch.cluster.metadata] [node_s0] [test-idx] deleting index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,008][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [525], source [delete-index [test-idx]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,008][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [525]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,009][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,009][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,009][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [525], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,009][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 525%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,009][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [525], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,009][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 525%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,009][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 525, uuid: HWAALw1WR_2HZFtGrSvZEA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,027][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 18ms done applying updated cluster_state (version: 525, uuid: HWAALw1WR_2HZFtGrSvZEA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,027][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 525%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,050][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [delete-index [test-idx]]: took 42ms done applying updated cluster_state (version: 525, uuid: HWAALw1WR_2HZFtGrSvZEA)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [remove-index-template [random_index_template]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [526], source [remove-index-template [random_index_template]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [526]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [526], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 526%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 526, uuid: AJ6ThGKMRRSl7lC3srFNEQ)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [526], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,059][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 526%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,062][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 2ms done applying updated cluster_state (version: 526, uuid: AJ6ThGKMRRSl7lC3srFNEQ)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,062][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 526%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,063][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [remove-index-template [random_index_template]]: took 4ms done applying updated cluster_state (version: 526, uuid: AJ6ThGKMRRSl7lC3srFNEQ)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [delete_repository [*]]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s0] cluster state updated, version [527], source [delete_repository [*]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s0] publishing cluster state version [527]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: execute%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s1] cluster state updated, version [527], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s2] cluster state updated, version [527], source [local-disco-receive(from master)]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s2] set local cluster state to version 527%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s1] set local cluster state to version 527%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,064][DEBUG][org.elasticsearch.cluster.service] [node_s2] processing [local-disco-receive(from master)]: took 0s done applying updated cluster_state (version: 527, uuid: 9ZFMJOf0ToezQoiGFRIijw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,066][DEBUG][org.elasticsearch.cluster.service] [node_s1] processing [local-disco-receive(from master)]: took 1ms done applying updated cluster_state (version: 527, uuid: 9ZFMJOf0ToezQoiGFRIijw)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,066][DEBUG][org.elasticsearch.cluster.service] [node_s0] set local cluster state to version 527%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,068][DEBUG][org.elasticsearch.cluster.service] [node_s0] processing [delete_repository [*]]: took 3ms done applying updated cluster_state (version: 527, uuid: 9ZFMJOf0ToezQoiGFRIijw)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBatchingShardUpdateTask(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960084422,
  "executionTime": 652
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreTemplates(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreTemplates(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960085074,
  "executionTime": 120
 }
]

[
 "TEST_STARTED",
 "ID#testDataFileFailureDuringRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,423][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,424][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[1], restoring[test-repo:test-snap], s[INITIALIZING], a[id=RCIinehoQM-SMZ_hcwrFKQ], unassigned_info[[reason=NEW_INDEX_RESTORED], at[2016-04-18T06:14:45.411Z], details[restore_source[test-repo/test-snap]]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,436][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,436][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=aNqGPPX-TLqDaLGru-x2zg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.426Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,439][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=aNqGPPX-TLqDaLGru-x2zg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.426Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard is marked as failed, resend shard failure], failure [Unknown]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,445][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[3], restoring[test-repo:test-snap], s[INITIALIZING], a[id=aNqGPPX-TLqDaLGru-x2zg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.426Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard is marked as failed, resend shard failure], failure [Unknown]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,460][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,463][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[5], restoring[test-repo:test-snap], s[INITIALIZING], a[id=EkpQEFM6R7CjasRxkri7gg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.448Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,470][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[5], restoring[test-repo:test-snap], s[INITIALIZING], a[id=EkpQEFM6R7CjasRxkri7gg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.448Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [master {node_s0}{LU-Nwa22SdSbpxN6h4JNhg}{local}{local[287]}[mode=>local] marked shard as initializing, but shard is marked as failed, resend shard failure], failure [Unknown]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,478][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,479][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[7], restoring[test-repo:test-snap], s[INITIALIZING], a[id=7ED6xcU-QJiX8PnxvZLDrw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.470Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,487][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,490][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[9], restoring[test-repo:test-snap], s[INITIALIZING], a[id=fCBQTebVTEalsJNsITOb5g], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.479Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,500][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,501][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[11], restoring[test-repo:test-snap], s[INITIALIZING], a[id=iKnR7R6uS6iOdpWcq3Y_uA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.491Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,510][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,512][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[13], restoring[test-repo:test-snap], s[INITIALIZING], a[id=eeHhRTvzTFiKBw3l5oEdGQ], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.501Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,522][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,522][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[15], restoring[test-repo:test-snap], s[INITIALIZING], a[id=h_YrJVhaQ12C3ay0XvsZ3Q], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.513Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,531][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,533][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[17], restoring[test-repo:test-snap], s[INITIALIZING], a[id=VLsyh-_tSGSHLr_EwvfhCA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.523Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,548][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,548][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[19], restoring[test-repo:test-snap], s[INITIALIZING], a[id=PtImzk9jS22GSP5yEr1BvQ], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.534Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,557][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,559][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[21], restoring[test-repo:test-snap], s[INITIALIZING], a[id=JvJuZA73QY26gsuZab8e6g], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.549Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,568][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,569][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[23], restoring[test-repo:test-snap], s[INITIALIZING], a[id=e8tV7GyZRFSA2C0vgq_Mrw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.560Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,578][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,580][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[25], restoring[test-repo:test-snap], s[INITIALIZING], a[id=C1lBacybRHi_yI17rSj1mg], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.569Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,590][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,591][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[27], restoring[test-repo:test-snap], s[INITIALIZING], a[id=Tj51G5ecTz6NyOpDGzqT1g], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.581Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,602][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,614][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[29], restoring[test-repo:test-snap], s[INITIALIZING], a[id=goT9WDKuTDO52IXZdP0FzA], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.591Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,632][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,633][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[31], restoring[test-repo:test-snap], s[INITIALIZING], a[id=JbdK9oXCS7mHQIgEeaSYAw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.615Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,650][WARN ][org.elasticsearch.indices.cluster] [node_s1] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,654][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[ZDoUOGFPS96eJfPT5Al9tg], [P], v[33], restoring[test-repo:test-snap], s[INITIALIZING], a[id=j39iV-UVSV2t_rGT6TncpQ], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.633Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,662][WARN ][org.elasticsearch.indices.cluster] [node_s0] [[test-idx][1]] marking and sending shard failed due to [failed recovery]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:45,663][WARN ][org.elasticsearch.cluster.action.shard] [node_s0] [test-idx][1] received shard failed for [test-idx][1], node[LU-Nwa22SdSbpxN6h4JNhg], [P], v[35], restoring[test-repo:test-snap], s[INITIALIZING], a[id=x4UfMgDoSmKn0nlnUJNckw], unassigned_info[[reason=ALLOCATION_FAILED], at[2016-04-18T06:14:45.655Z], details[failed recovery, failure IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]], indexUUID [79nATquuS9CoslH2Hgin7g], message [failed recovery], failure [IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException]; ]%0A[test-idx][[test-idx][1]] IndexShardRecoveryException[failed recovery]; nested: IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:165)%0A%09at org.elasticsearch.index.shard.StoreRecovery.recoverFromRepository(StoreRecovery.java:97)%0A%09at org.elasticsearch.index.shard.IndexShard.restoreFromRepository(IndexShard.java:1065)%0A%09at org.elasticsearch.indices.cluster.IndicesClusterStateService.lambda$applyInitializingShard$196(IndicesClusterStateService.java:665)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[restore failed]; nested: IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:265)%0A%09at org.elasticsearch.index.shard.StoreRecovery.lambda$recoverFromRepository$190(StoreRecovery.java:99)%0A%09at org.elasticsearch.index.shard.StoreRecovery.executeRecovery(StoreRecovery.java:122)%0A%09... 6 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[failed to restore snapshot [test-snap]]; nested: IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:207)%0A%09at org.elasticsearch.index.shard.StoreRecovery.restore(StoreRecovery.java:260)%0A%09... 8 more%0ACaused by: [test-idx][[test-idx][1]] IndexShardRestoreFailedException[Failed to recover index]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:866)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.restore(BlobStoreIndexShardRepository.java:205)%0A%09... 9 more%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:277)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.readBlob(MockRepository.java:321)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$PartSliceStream.openSlice(BlobStoreIndexShardRepository.java:768)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.nextStream(SlicedInputStream.java:53)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.currentStream(SlicedInputStream.java:67)%0A%09at org.elasticsearch.index.snapshots.blobstore.SlicedInputStream.read(SlicedInputStream.java:88)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:133)%0A%09at org.elasticsearch.index.snapshots.blobstore.RateLimitingInputStream.read(RateLimitingInputStream.java:69)%0A%09at java.io.FilterInputStream.read(FilterInputStream.java:107)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restoreFile(BlobStoreIndexShardRepository.java:923)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$RestoreContext.restore(BlobStoreIndexShardRepository.java:863)%0A%09... 10 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDataFileFailureDuringRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960085194,
  "executionTime": 542
 }
]

[
 "TEST_STARTED",
 "ID#testIncludeGlobalState(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIncludeGlobalState(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960085736,
  "executionTime": 490
 }
]

[
 "TEST_STARTED",
 "ID#testRenameOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:47,137][WARN ][org.elasticsearch.snapshots] [node_s0] [test-repo][test-snap] failed to restore snapshot%0ASnapshotRestoreException[[test-repo:test-snap] indices [test-idx-2] and [test-idx-1] are renamed into the same index [same-name]]%0A%09at org.elasticsearch.snapshots.RestoreService.renamedIndices(RestoreService.java:694)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:209)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction.masterOperation(TransportMasterNodeAction.java:78)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:162)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:47,149][WARN ][org.elasticsearch.snapshots] [node_s0] [test-repo][test-snap] failed to restore snapshot%0ASnapshotRestoreException[[test-repo:test-snap] indices [test-idx-2] and [test-idx-1] are renamed into the same index [test-idx-1]]%0A%09at org.elasticsearch.snapshots.RestoreService.renamedIndices(RestoreService.java:694)%0A%09at org.elasticsearch.snapshots.RestoreService.restoreSnapshot(RestoreService.java:209)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:82)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.restore.TransportRestoreSnapshotAction.masterOperation(TransportRestoreSnapshotAction.java:41)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction.masterOperation(TransportMasterNodeAction.java:78)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:162)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:47,153][WARN ][org.elasticsearch.snapshots] [node_s0] [test-repo:test-snap] failed to restore snapshot%0A[__WRONG__] InvalidIndexNameException[Invalid index name [__WRONG__], must not start with '_']%0A%09at org.elasticsearch.cluster.metadata.MetaDataCreateIndexService.validateIndexName(MetaDataCreateIndexService.java:152)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:253)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:47,157][WARN ][org.elasticsearch.snapshots] [node_s0] [test-repo:test-snap] failed to restore snapshot%0A[alias-3] InvalidIndexNameException[Invalid index name [alias-3], already exists as alias]%0A%09at org.elasticsearch.cluster.metadata.MetaDataCreateIndexService.validateIndexName(MetaDataCreateIndexService.java:170)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:253)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:47,159][WARN ][org.elasticsearch.snapshots] [node_s0] [test-repo:test-snap] failed to restore snapshot%0ASnapshotRestoreException[[test-repo:test-snap] cannot rename index [test-idx-1] into [alias-1] because of conflict with an alias with the same name]%0A%09at org.elasticsearch.snapshots.RestoreService$1.checkAliasNameConflicts(RestoreService.java:336)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:314)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:47,161][WARN ][org.elasticsearch.snapshots] [node_s0] [test-repo:test-snap] failed to restore snapshot%0ASnapshotRestoreException[[test-repo:test-snap] cannot rename index [test-idx-1] into [alias-2] because of conflict with an alias with the same name]%0A%09at org.elasticsearch.snapshots.RestoreService$1.checkAliasNameConflicts(RestoreService.java:336)%0A%09at org.elasticsearch.snapshots.RestoreService$1.execute(RestoreService.java:314)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRenameOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960086226,
  "executionTime": 1056
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteSnapshotWithCorruptedSnapshotFile(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:47,733][WARN ][org.elasticsearch.repositories.fs] [node_s0] cannot read snapshot file [test-repo:test-snap-1]%0Ajava.lang.IllegalStateException: class org.apache.lucene.store.BufferedChecksumIndexInput cannot seek backwards (pos=-11 getFilePointer()=0)%0A%09at org.apache.lucene.store.ChecksumIndexInput.seek(ChecksumIndexInput.java:50)%0A%09at org.apache.lucene.codecs.CodecUtil.checksumEntireFile(CodecUtil.java:448)%0A%09at org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat.readBlob(ChecksumBlobStoreFormat.java:106)%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreFormat.read(BlobStoreFormat.java:86)%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreRepository.readSnapshot(BlobStoreRepository.java:438)%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreRepository.deleteSnapshot(BlobStoreRepository.java:298)%0A%09at org.elasticsearch.snapshots.SnapshotsService$8.run(SnapshotsService.java:1009)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteSnapshotWithCorruptedSnapshotFile(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960087282,
  "executionTime": 673
 }
]

[
 "TEST_STARTED",
 "ID#testUrlRepository(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUrlRepository(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960087955,
  "executionTime": 511
 }
]

[
 "TEST_STARTED",
 "ID#testRecreateBlocksOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRecreateBlocksOnRestore(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960088466,
  "executionTime": 315
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960088781,
  "executionTime": 8296
 }
]

[
 "TEST_STARTED",
 "ID#testListCorruptedSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:14:57,881][WARN ][org.elasticsearch.snapshots] [node_s0] failed to get snapshot [test-repo:test-snap-2]%0Ajava.lang.IllegalStateException: class org.apache.lucene.store.BufferedChecksumIndexInput cannot seek backwards (pos=-8 getFilePointer()=0)%0A%09at org.apache.lucene.store.ChecksumIndexInput.seek(ChecksumIndexInput.java:50)%0A%09at org.apache.lucene.codecs.CodecUtil.checksumEntireFile(CodecUtil.java:448)%0A%09at org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat.readBlob(ChecksumBlobStoreFormat.java:106)%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreFormat.read(BlobStoreFormat.java:86)%0A%09at org.elasticsearch.repositories.blobstore.BlobStoreRepository.readSnapshot(BlobStoreRepository.java:438)%0A%09at org.elasticsearch.snapshots.SnapshotsService.snapshots(SnapshotsService.java:153)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.get.TransportGetSnapshotsAction.masterOperation(TransportGetSnapshotsAction.java:80)%0A%09at org.elasticsearch.action.admin.cluster.snapshots.get.TransportGetSnapshotsAction.masterOperation(TransportGetSnapshotsAction.java:49)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction.masterOperation(TransportMasterNodeAction.java:78)%0A%09at org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$3.doRun(TransportMasterNodeAction.java:162)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testListCorruptedSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960097077,
  "executionTime": 992
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotMoreThanOnce(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotMoreThanOnce(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960098069,
  "executionTime": 492
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotClosedIndex(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotClosedIndex(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960098561,
  "executionTime": 331
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreAliases(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreAliases(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960098892,
  "executionTime": 2042
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotFileFailureDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:01,435][WARN ][org.elasticsearch.snapshots] [node_s1] [[test-idx][3]] [test-repo:test-snap] failed to create snapshot%0A[test-idx][[test-idx][3]] IndexShardSnapshotFailedException[Failed to write commit point]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:617)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.snapshot(BlobStoreIndexShardRepository.java:183)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.snapshot(SnapshotShardsService.java:343)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.access$200(SnapshotShardsService.java:79)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService$1.doRun(SnapshotShardsService.java:299)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:293)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.writeBlob(MockRepository.java:357)%0A%09at org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat.writeBlob(ChecksumBlobStoreFormat.java:182)%0A%09at org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat.write(ChecksumBlobStoreFormat.java:154)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:615)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:01,447][WARN ][org.elasticsearch.snapshots] [node_s1] [[test-idx][1]] [test-repo:test-snap] failed to create snapshot%0A[test-idx][[test-idx][1]] IndexShardSnapshotFailedException[Failed to write file list]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$Context.finalize(BlobStoreIndexShardRepository.java:399)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:628)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.snapshot(BlobStoreIndexShardRepository.java:183)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.snapshot(SnapshotShardsService.java:343)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.access$200(SnapshotShardsService.java:79)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService$1.doRun(SnapshotShardsService.java:299)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:293)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.move(MockRepository.java:351)%0A%09at org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat.writeAtomic(ChecksumBlobStoreFormat.java:135)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$Context.finalize(BlobStoreIndexShardRepository.java:397)%0A%09... 9 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:01,451][WARN ][org.elasticsearch.snapshots] [node_s0] [[test-idx][2]] [test-repo:test-snap] failed to create snapshot%0A[test-idx][[test-idx][2]] IndexShardSnapshotFailedException[failed to list blobs]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:525)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.snapshot(BlobStoreIndexShardRepository.java:183)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.snapshot(SnapshotShardsService.java:343)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.access$200(SnapshotShardsService.java:79)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService$1.doRun(SnapshotShardsService.java:299)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:293)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.listBlobs(MockRepository.java:339)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:523)%0A%09... 8 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:01,459][WARN ][org.elasticsearch.snapshots] [node_s0] [[test-idx][0]] [test-repo:test-snap] failed to create snapshot%0A[test-idx][[test-idx][0]] IndexShardSnapshotFailedException[Failed to write commit point]; nested: IOException[Random IOException];%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:617)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.snapshot(BlobStoreIndexShardRepository.java:183)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.snapshot(SnapshotShardsService.java:343)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService.access$200(SnapshotShardsService.java:79)%0A%09at org.elasticsearch.snapshots.SnapshotShardsService$1.doRun(SnapshotShardsService.java:299)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: java.io.IOException: Random IOException%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.maybeIOExceptionOrBlock(MockRepository.java:293)%0A%09at org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore$MockBlobContainer.writeBlob(MockRepository.java:357)%0A%09at org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat.writeBlob(ChecksumBlobStoreFormat.java:182)%0A%09at org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat.write(ChecksumBlobStoreFormat.java:154)%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository$SnapshotContext.snapshot(BlobStoreIndexShardRepository.java:615)%0A%09... 8 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotFileFailureDuringSnapshot(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960100934,
  "executionTime": 611
 }
]

[
 "TEST_STARTED",
 "ID#testUnallocatedShards(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnallocatedShards(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960101545,
  "executionTime": 117
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotSingleClosedIndex(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotSingleClosedIndex(org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT)",
  "startTimestamp": 1460960101663,
  "executionTime": 162
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.snapshots.SharedClusterSnapshotRestoreIT",
  "startTimestamp": 1460960055903,
  "executionTime": 46851
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.GlobalIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.GlobalIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.GlobalIT",
   "children": [
    {
     "id": "ID#testNonTopLevel(org.elasticsearch.search.aggregations.bucket.GlobalIT)",
     "displayName": "testNonTopLevel(org.elasticsearch.search.aggregations.bucket.GlobalIT)",
     "methodName": "testNonTopLevel",
     "className": "org.elasticsearch.search.aggregations.bucket.GlobalIT",
     "children": []
    },
    {
     "id": "ID#testWithStatsSubAggregator(org.elasticsearch.search.aggregations.bucket.GlobalIT)",
     "displayName": "testWithStatsSubAggregator(org.elasticsearch.search.aggregations.bucket.GlobalIT)",
     "methodName": "testWithStatsSubAggregator",
     "className": "org.elasticsearch.search.aggregations.bucket.GlobalIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960102761
 }
]

[
 "TEST_STARTED",
 "ID#testNonTopLevel(org.elasticsearch.search.aggregations.bucket.GlobalIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNonTopLevel(org.elasticsearch.search.aggregations.bucket.GlobalIT)",
  "startTimestamp": 1460960103054,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testWithStatsSubAggregator(org.elasticsearch.search.aggregations.bucket.GlobalIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithStatsSubAggregator(org.elasticsearch.search.aggregations.bucket.GlobalIT)",
  "startTimestamp": 1460960103077,
  "executionTime": 27
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.GlobalIT",
  "startTimestamp": 1460960102761,
  "executionTime": 437
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.tribe.TribeIT",
   "displayName": "org.elasticsearch.tribe.TribeIT",
   "methodName": null,
   "className": "org.elasticsearch.tribe.TribeIT",
   "children": [
    {
     "id": "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testTribeOnOneCluster",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testIndexWriteBlocks",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testCloseAndOpenIndex",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testOnConflictDrop",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testGlobalReadWriteBlocks",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    },
    {
     "id": "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
     "displayName": "testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
     "methodName": "testOnConflictPrefer",
     "className": "org.elasticsearch.tribe.TribeIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960103206
 }
]

[
 "TEST_STARTED",
 "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:03,479][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTribeOnOneCluster(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1460960103279,
  "executionTime": 768
 }
]

[
 "TEST_STARTED",
 "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:04,338][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexWriteBlocks(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1460960104048,
  "executionTime": 736
 }
]

[
 "TEST_STARTED",
 "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:04,966][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCloseAndOpenIndex(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1460960104784,
  "executionTime": 740
 }
]

[
 "TEST_STARTED",
 "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:05,894][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnConflictDrop(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1460960105524,
  "executionTime": 760
 }
]

[
 "TEST_STARTED",
 "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:06,476][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGlobalReadWriteBlocks(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1460960106284,
  "executionTime": 442
 }
]

[
 "TEST_STARTED",
 "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:06,967][WARN ][org.elasticsearch.discovery] [tribe_node] waited for 0s and no initial state was set by the discovery%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOnConflictPrefer(org.elasticsearch.tribe.TribeIT)",
  "startTimestamp": 1460960106726,
  "executionTime": 516
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.tribe.TribeIT",
  "startTimestamp": 1460960103206,
  "executionTime": 4065
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.ParentIdAggIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.ParentIdAggIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.ParentIdAggIT",
   "children": [
    {
     "id": "ID#testParentIdAggregation(org.elasticsearch.search.aggregations.bucket.ParentIdAggIT)",
     "displayName": "testParentIdAggregation(org.elasticsearch.search.aggregations.bucket.ParentIdAggIT)",
     "methodName": "testParentIdAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.ParentIdAggIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960107277
 }
]

[
 "TEST_STARTED",
 "ID#testParentIdAggregation(org.elasticsearch.search.aggregations.bucket.ParentIdAggIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testParentIdAggregation(org.elasticsearch.search.aggregations.bucket.ParentIdAggIT)",
  "startTimestamp": 1460960107295,
  "executionTime": 406
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.ParentIdAggIT",
  "startTimestamp": 1460960107277,
  "executionTime": 460
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.ClusterInfoServiceIT",
   "displayName": "org.elasticsearch.cluster.ClusterInfoServiceIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
   "children": [
    {
     "id": "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "displayName": "testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "methodName": "testClusterInfoServiceCollectsInformation",
     "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
     "children": []
    },
    {
     "id": "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "displayName": "testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
     "methodName": "testClusterInfoServiceInformationClearOnError",
     "className": "org.elasticsearch.cluster.ClusterInfoServiceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960107744
 }
]

[
 "TEST_STARTED",
 "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterInfoServiceCollectsInformation(org.elasticsearch.cluster.ClusterInfoServiceIT)",
  "startTimestamp": 1460960107754,
  "executionTime": 411
 }
]

[
 "TEST_STARTED",
 "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:10,429][WARN ][org.elasticsearch.cluster] [node_t0] Failed to execute NodeStatsAction for ClusterInfoUpdateJob%0AElasticsearchException[force exception on [cluster:monitor/nodes/stats]]%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT$BlockingActionFilter.apply(ClusterInfoServiceIT.java:105)%0A%09at org.elasticsearch.action.support.ActionFilter$Simple.apply(ActionFilter.java:64)%0A%09at org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:134)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:108)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:74)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.updateNodeStats(InternalClusterInfoService.java:255)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.refresh(InternalClusterInfoService.java:291)%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT.testClusterInfoServiceInformationClearOnError(ClusterInfoServiceIT.java:250)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:10,430][WARN ][org.elasticsearch.cluster] [node_t0] Failed to execute IndicesStatsAction for ClusterInfoUpdateJob%0AElasticsearchException[force exception on [indices:monitor/stats]]%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT$BlockingActionFilter.apply(ClusterInfoServiceIT.java:105)%0A%09at org.elasticsearch.action.support.ActionFilter$Simple.apply(ActionFilter.java:64)%0A%09at org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:134)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:108)%0A%09at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:74)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.updateIndicesStats(InternalClusterInfoService.java:269)%0A%09at org.elasticsearch.cluster.InternalClusterInfoService.refresh(InternalClusterInfoService.java:320)%0A%09at org.elasticsearch.cluster.ClusterInfoServiceIT.testClusterInfoServiceInformationClearOnError(ClusterInfoServiceIT.java:250)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterInfoServiceInformationClearOnError(org.elasticsearch.cluster.ClusterInfoServiceIT)",
  "startTimestamp": 1460960108166,
  "executionTime": 2317
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.ClusterInfoServiceIT",
  "startTimestamp": 1460960107744,
  "executionTime": 2747
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
   "displayName": "org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
   "methodName": null,
   "className": "org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
   "children": [
    {
     "id": "ID#testSnapshotStatusWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "displayName": "testSnapshotStatusWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "methodName": "testSnapshotStatusWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
     "children": []
    },
    {
     "id": "ID#testDeleteSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "displayName": "testDeleteSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "methodName": "testDeleteSnapshotWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
     "children": []
    },
    {
     "id": "ID#testCreateSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "displayName": "testCreateSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "methodName": "testCreateSnapshotWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
     "children": []
    },
    {
     "id": "ID#testGetSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "displayName": "testGetSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "methodName": "testGetSnapshotWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
     "children": []
    },
    {
     "id": "ID#testCreateSnapshotWithIndexBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "displayName": "testCreateSnapshotWithIndexBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "methodName": "testCreateSnapshotWithIndexBlocks",
     "className": "org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
     "children": []
    },
    {
     "id": "ID#testRestoreSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "displayName": "testRestoreSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
     "methodName": "testRestoreSnapshotWithBlocks",
     "className": "org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960110498
 }
]

[
 "TEST_STARTED",
 "ID#testSnapshotStatusWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSnapshotStatusWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
  "startTimestamp": 1460960110509,
  "executionTime": 522
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:11,791][WARN ][org.elasticsearch.transport] [node_t1] Transport response handler not found of id [161]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
  "startTimestamp": 1460960111031,
  "executionTime": 766
 }
]

[
 "TEST_STARTED",
 "ID#testCreateSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
  "startTimestamp": 1460960111797,
  "executionTime": 1496
 }
]

[
 "TEST_STARTED",
 "ID#testGetSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testGetSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
  "startTimestamp": 1460960113293,
  "executionTime": 565
 }
]

[
 "TEST_STARTED",
 "ID#testCreateSnapshotWithIndexBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCreateSnapshotWithIndexBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
  "startTimestamp": 1460960113858,
  "executionTime": 904
 }
]

[
 "TEST_STARTED",
 "ID#testRestoreSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRestoreSnapshotWithBlocks(org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT)",
  "startTimestamp": 1460960114762,
  "executionTime": 1193
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.admin.cluster.snapshots.SnapshotBlocksIT",
  "startTimestamp": 1460960110498,
  "executionTime": 5556
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
   "children": [
    {
     "id": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testDocCountTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960116059
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1460960116215,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1460960116233,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1460960116243,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1460960116254,
  "executionTime": 16
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1460960116270,
  "executionTime": 10
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1460960116281,
  "executionTime": 11
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.StatsBucketIT)",
  "startTimestamp": 1460960116292,
  "executionTime": 9
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.StatsBucketIT",
  "startTimestamp": 1460960116059,
  "executionTime": 295
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.analyze.HunspellServiceIT",
   "displayName": "org.elasticsearch.indices.analyze.HunspellServiceIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
   "children": [
    {
     "id": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testDicWithNoAff",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testDicWithTwoAffs",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testLocaleDirectoryWithLocaleSpecificConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    },
    {
     "id": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "displayName": "testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
     "methodName": "testLocaleDirectoryWithNodeLevelConfig",
     "className": "org.elasticsearch.indices.analyze.HunspellServiceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960116359
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithNoAff(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1460960116371,
  "executionTime": 36
 }
]

[
 "TEST_STARTED",
 "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:16,416][ERROR][org.elasticsearch.indices.analysis] [node_t0] exception while loading dictionary en_US%0Ajava.lang.IllegalStateException: failed to load hunspell dictionary for locale: en_US%0A%09at org.elasticsearch.indices.analysis.HunspellService.lambda$new$136(HunspellService.java:91)%0A%09at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)%0A%09at org.elasticsearch.indices.analysis.HunspellService.getDictionary(HunspellService.java:108)%0A%09at org.elasticsearch.indices.analysis.HunspellService.scanAndLoadDictionaries(HunspellService.java:132)%0A%09at org.elasticsearch.indices.analysis.HunspellService.<init>(HunspellService.java:95)%0A%09at org.elasticsearch.indices.analysis.AnalysisModule.configure(AnalysisModule.java:163)%0A%09at org.elasticsearch.common.inject.AbstractModule.configure(AbstractModule.java:59)%0A%09at org.elasticsearch.common.inject.spi.Elements$RecordingBinder.install(Elements.java:233)%0A%09at org.elasticsearch.common.inject.spi.Elements.getElements(Elements.java:103)%0A%09at org.elasticsearch.common.inject.InjectorShell$Builder.build(InjectorShell.java:148)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:99)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:96)%0A%09at org.elasticsearch.common.inject.Guice.createInjector(Guice.java:70)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createInjector(ModulesBuilder.java:46)%0A%09at org.elasticsearch.node.Node.<init>(Node.java:203)%0A%09at org.elasticsearch.node.MockNode.<init>(MockNode.java:43)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:601)%0A%09at org.elasticsearch.test.InternalTestCluster.buildNode(InternalTestCluster.java:580)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1457)%0A%09at org.elasticsearch.test.InternalTestCluster.startNode(InternalTestCluster.java:1450)%0A%09at org.elasticsearch.indices.analyze.HunspellServiceIT.testDicWithTwoAffs(HunspellServiceIT.java:101)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)%0A%09at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)%0A%09at java.lang.reflect.Method.invoke(Method.java:497)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)%0A%09at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)%0A%09at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)%0A%09at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)%0A%09at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)%0A%09at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)%0A%09at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)%0A%09at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: ElasticsearchException[Too many affix files exist for hunspell dictionary [en_US]]%0A%09at org.elasticsearch.indices.analysis.HunspellService.loadDictionary(HunspellService.java:174)%0A%09at org.elasticsearch.indices.analysis.HunspellService.lambda$new$136(HunspellService.java:89)%0A%09... 57 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDicWithTwoAffs(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1460960116407,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithLocaleSpecificConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1460960116448,
  "executionTime": 1044
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDirectoryWithNodeLevelConfig(org.elasticsearch.indices.analyze.HunspellServiceIT)",
  "startTimestamp": 1460960117492,
  "executionTime": 500
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.analyze.HunspellServiceIT",
  "startTimestamp": 1460960116359,
  "executionTime": 1637
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT",
   "displayName": "org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT",
   "methodName": null,
   "className": "org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT",
   "children": [
    {
     "id": "ID#testFieldValueFactor(org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT)",
     "displayName": "testFieldValueFactor(org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT)",
     "methodName": "testFieldValueFactor",
     "className": "org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960117999
 }
]

[
 "TEST_STARTED",
 "ID#testFieldValueFactor(org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFieldValueFactor(org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT)",
  "startTimestamp": 1460960118006,
  "executionTime": 208
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.functionscore.FunctionScoreFieldValueIT",
  "startTimestamp": 1460960117999,
  "executionTime": 223
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.basic.TransportSearchFailuresIT",
   "displayName": "org.elasticsearch.search.basic.TransportSearchFailuresIT",
   "methodName": null,
   "className": "org.elasticsearch.search.basic.TransportSearchFailuresIT",
   "children": [
    {
     "id": "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportSearchFailuresIT)",
     "displayName": "testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportSearchFailuresIT)",
     "methodName": "testFailedSearchWithWrongQuery",
     "className": "org.elasticsearch.search.basic.TransportSearchFailuresIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960118227
 }
]

[
 "TEST_STARTED",
 "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportSearchFailuresIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFailedSearchWithWrongQuery(org.elasticsearch.search.basic.TransportSearchFailuresIT)",
  "startTimestamp": 1460960118234,
  "executionTime": 797
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.basic.TransportSearchFailuresIT",
  "startTimestamp": 1460960118227,
  "executionTime": 819
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
   "displayName": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
   "methodName": null,
   "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
   "children": [
    {
     "id": "ID#testIndexCausesIndexCreation(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "displayName": "testIndexCausesIndexCreation(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "methodName": "testIndexCausesIndexCreation",
     "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
     "children": []
    },
    {
     "id": "ID#testNoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "displayName": "testNoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "methodName": "testNoReplicas",
     "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
     "children": []
    },
    {
     "id": "ID#testOneReplica(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "displayName": "testOneReplica(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "methodName": "testOneReplica",
     "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
     "children": []
    },
    {
     "id": "ID#testTwoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "displayName": "testTwoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
     "methodName": "testTwoReplicas",
     "className": "org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960119051
 }
]

[
 "TEST_STARTED",
 "ID#testIndexCausesIndexCreation(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndexCausesIndexCreation(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
  "startTimestamp": 1460960119061,
  "executionTime": 2700
 }
]

[
 "TEST_STARTED",
 "ID#testNoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
  "startTimestamp": 1460960121761,
  "executionTime": 3682
 }
]

[
 "TEST_STARTED",
 "ID#testOneReplica(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testOneReplica(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
  "startTimestamp": 1460960125444,
  "executionTime": 2637
 }
]

[
 "TEST_STARTED",
 "ID#testTwoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTwoReplicas(org.elasticsearch.search.basic.SearchWhileCreatingIndexIT)",
  "startTimestamp": 1460960128081,
  "executionTime": 2992
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:15:31,087][WARN ][org.elasticsearch.transport] [node_s1] Transport response handler not found of id [2813]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.basic.SearchWhileCreatingIndexIT",
  "startTimestamp": 1460960119051,
  "executionTime": 12078
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
   "children": [
    {
     "id": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "displayName": "testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "methodName": "testDocCountTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
     "children": []
    },
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
     "children": []
    },
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960131136
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountTopLevel(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
  "startTimestamp": 1460960131607,
  "executionTime": 68
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
  "startTimestamp": 1460960131675,
  "executionTime": 71
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
  "startTimestamp": 1460960131746,
  "executionTime": 53
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
  "startTimestamp": 1460960131799,
  "executionTime": 56
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
  "startTimestamp": 1460960131855,
  "executionTime": 56
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
  "startTimestamp": 1460960131911,
  "executionTime": 41
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.AvgBucketIT)",
  "startTimestamp": 1460960131952,
  "executionTime": 43
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.AvgBucketIT",
  "startTimestamp": 1460960131136,
  "executionTime": 1078
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.cluster.allocation.ClusterRerouteIT",
   "displayName": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
   "methodName": null,
   "className": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
   "children": [
    {
     "id": "ID#testDelayWithALargeAmountOfShards(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "displayName": "testDelayWithALargeAmountOfShards(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "methodName": "testDelayWithALargeAmountOfShards",
     "className": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
     "children": []
    },
    {
     "id": "ID#testRerouteWithAllocateLocalGateway_disableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "displayName": "testRerouteWithAllocateLocalGateway_disableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "methodName": "testRerouteWithAllocateLocalGateway_disableAllocationSettings",
     "className": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
     "children": []
    },
    {
     "id": "ID#testClusterRerouteWithBlocks(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "displayName": "testClusterRerouteWithBlocks(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "methodName": "testClusterRerouteWithBlocks",
     "className": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
     "children": []
    },
    {
     "id": "ID#testRerouteWithCommands_enableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "displayName": "testRerouteWithCommands_enableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "methodName": "testRerouteWithCommands_enableAllocationSettings",
     "className": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
     "children": []
    },
    {
     "id": "ID#testRerouteWithAllocateLocalGateway_enableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "displayName": "testRerouteWithAllocateLocalGateway_enableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "methodName": "testRerouteWithAllocateLocalGateway_enableAllocationSettings",
     "className": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
     "children": []
    },
    {
     "id": "ID#testRerouteWithCommands_disableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "displayName": "testRerouteWithCommands_disableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "methodName": "testRerouteWithCommands_disableAllocationSettings",
     "className": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
     "children": []
    },
    {
     "id": "ID#testRerouteExplain(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "displayName": "testRerouteExplain(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
     "methodName": "testRerouteExplain",
     "className": "org.elasticsearch.cluster.allocation.ClusterRerouteIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960132221
 }
]

[
 "TEST_STARTED",
 "ID#testDelayWithALargeAmountOfShards(org.elasticsearch.cluster.allocation.ClusterRerouteIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDelayWithALargeAmountOfShards(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
  "startTimestamp": 1460960132232,
  "executionTime": 88252
 }
]

[
 "TEST_STARTED",
 "ID#testRerouteWithAllocateLocalGateway_disableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRerouteWithAllocateLocalGateway_disableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
  "startTimestamp": 1460960220484,
  "executionTime": 268
 }
]

[
 "TEST_STARTED",
 "ID#testClusterRerouteWithBlocks(org.elasticsearch.cluster.allocation.ClusterRerouteIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testClusterRerouteWithBlocks(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
  "startTimestamp": 1460960220753,
  "executionTime": 227
 }
]

[
 "TEST_STARTED",
 "ID#testRerouteWithCommands_enableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRerouteWithCommands_enableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
  "startTimestamp": 1460960220980,
  "executionTime": 135
 }
]

[
 "TEST_STARTED",
 "ID#testRerouteWithAllocateLocalGateway_enableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRerouteWithAllocateLocalGateway_enableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
  "startTimestamp": 1460960221116,
  "executionTime": 226
 }
]

[
 "TEST_STARTED",
 "ID#testRerouteWithCommands_disableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRerouteWithCommands_disableAllocationSettings(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
  "startTimestamp": 1460960221343,
  "executionTime": 194
 }
]

[
 "TEST_STARTED",
 "ID#testRerouteExplain(org.elasticsearch.cluster.allocation.ClusterRerouteIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRerouteExplain(org.elasticsearch.cluster.allocation.ClusterRerouteIT)",
  "startTimestamp": 1460960221537,
  "executionTime": 152
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.cluster.allocation.ClusterRerouteIT",
  "startTimestamp": 1460960132221,
  "executionTime": 89856
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.percolator.MultiPercolatorIT",
   "displayName": "org.elasticsearch.percolator.MultiPercolatorIT",
   "methodName": null,
   "className": "org.elasticsearch.percolator.MultiPercolatorIT",
   "children": [
    {
     "id": "ID#testWithRouting(org.elasticsearch.percolator.MultiPercolatorIT)",
     "displayName": "testWithRouting(org.elasticsearch.percolator.MultiPercolatorIT)",
     "methodName": "testWithRouting",
     "className": "org.elasticsearch.percolator.MultiPercolatorIT",
     "children": []
    },
    {
     "id": "ID#testNestedMultiPercolation(org.elasticsearch.percolator.MultiPercolatorIT)",
     "displayName": "testNestedMultiPercolation(org.elasticsearch.percolator.MultiPercolatorIT)",
     "methodName": "testNestedMultiPercolation",
     "className": "org.elasticsearch.percolator.MultiPercolatorIT",
     "children": []
    },
    {
     "id": "ID#testBasics(org.elasticsearch.percolator.MultiPercolatorIT)",
     "displayName": "testBasics(org.elasticsearch.percolator.MultiPercolatorIT)",
     "methodName": "testBasics",
     "className": "org.elasticsearch.percolator.MultiPercolatorIT",
     "children": []
    },
    {
     "id": "ID#testStartTimeIsPropagatedToShardRequests(org.elasticsearch.percolator.MultiPercolatorIT)",
     "displayName": "testStartTimeIsPropagatedToShardRequests(org.elasticsearch.percolator.MultiPercolatorIT)",
     "methodName": "testStartTimeIsPropagatedToShardRequests",
     "className": "org.elasticsearch.percolator.MultiPercolatorIT",
     "children": []
    },
    {
     "id": "ID#testExistingDocsOnly(org.elasticsearch.percolator.MultiPercolatorIT)",
     "displayName": "testExistingDocsOnly(org.elasticsearch.percolator.MultiPercolatorIT)",
     "methodName": "testExistingDocsOnly",
     "className": "org.elasticsearch.percolator.MultiPercolatorIT",
     "children": []
    },
    {
     "id": "ID#testWithDocsOnly(org.elasticsearch.percolator.MultiPercolatorIT)",
     "displayName": "testWithDocsOnly(org.elasticsearch.percolator.MultiPercolatorIT)",
     "methodName": "testWithDocsOnly",
     "className": "org.elasticsearch.percolator.MultiPercolatorIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960222084
 }
]

[
 "TEST_STARTED",
 "ID#testWithRouting(org.elasticsearch.percolator.MultiPercolatorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithRouting(org.elasticsearch.percolator.MultiPercolatorIT)",
  "startTimestamp": 1460960222095,
  "executionTime": 502
 }
]

[
 "TEST_STARTED",
 "ID#testNestedMultiPercolation(org.elasticsearch.percolator.MultiPercolatorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedMultiPercolation(org.elasticsearch.percolator.MultiPercolatorIT)",
  "startTimestamp": 1460960222597,
  "executionTime": 382
 }
]

[
 "TEST_STARTED",
 "ID#testBasics(org.elasticsearch.percolator.MultiPercolatorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBasics(org.elasticsearch.percolator.MultiPercolatorIT)",
  "startTimestamp": 1460960222980,
  "executionTime": 664
 }
]

[
 "TEST_STARTED",
 "ID#testStartTimeIsPropagatedToShardRequests(org.elasticsearch.percolator.MultiPercolatorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testStartTimeIsPropagatedToShardRequests(org.elasticsearch.percolator.MultiPercolatorIT)",
  "startTimestamp": 1460960223644,
  "executionTime": 243
 }
]

[
 "TEST_STARTED",
 "ID#testExistingDocsOnly(org.elasticsearch.percolator.MultiPercolatorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistingDocsOnly(org.elasticsearch.percolator.MultiPercolatorIT)",
  "startTimestamp": 1460960223887,
  "executionTime": 600
 }
]

[
 "TEST_STARTED",
 "ID#testWithDocsOnly(org.elasticsearch.percolator.MultiPercolatorIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithDocsOnly(org.elasticsearch.percolator.MultiPercolatorIT)",
  "startTimestamp": 1460960224487,
  "executionTime": 875
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:05,374][WARN ][org.elasticsearch.transport] [node_s1] Transport response handler not found of id [269]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.percolator.MultiPercolatorIT",
  "startTimestamp": 1460960222084,
  "executionTime": 3297
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.BooleanTermsIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.BooleanTermsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.BooleanTermsIT",
   "children": [
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.bucket.BooleanTermsIT",
     "children": []
    },
    {
     "id": "ID#testMultiValueField(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
     "displayName": "testMultiValueField(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
     "methodName": "testMultiValueField",
     "className": "org.elasticsearch.search.aggregations.bucket.BooleanTermsIT",
     "children": []
    },
    {
     "id": "ID#testSingleValueField(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
     "displayName": "testSingleValueField(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
     "methodName": "testSingleValueField",
     "className": "org.elasticsearch.search.aggregations.bucket.BooleanTermsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960225387
 }
]

[
 "TEST_STARTED",
 "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
  "startTimestamp": 1460960226031,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValueField(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValueField(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
  "startTimestamp": 1460960226048,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValueField(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValueField(org.elasticsearch.search.aggregations.bucket.BooleanTermsIT)",
  "startTimestamp": 1460960226080,
  "executionTime": 17
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.BooleanTermsIT",
  "startTimestamp": 1460960225387,
  "executionTime": 869
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.flush.FlushIT",
   "displayName": "org.elasticsearch.indices.flush.FlushIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.flush.FlushIT",
   "children": [
    {
     "id": "ID#testSyncedFlush(org.elasticsearch.indices.flush.FlushIT)",
     "displayName": "testSyncedFlush(org.elasticsearch.indices.flush.FlushIT)",
     "methodName": "testSyncedFlush",
     "className": "org.elasticsearch.indices.flush.FlushIT",
     "children": []
    },
    {
     "id": "ID#testSyncedFlushWithConcurrentIndexing(org.elasticsearch.indices.flush.FlushIT)",
     "displayName": "testSyncedFlushWithConcurrentIndexing(org.elasticsearch.indices.flush.FlushIT)",
     "methodName": "testSyncedFlushWithConcurrentIndexing",
     "className": "org.elasticsearch.indices.flush.FlushIT",
     "children": []
    },
    {
     "id": "ID#testUnallocatedShardsDoesNotHang(org.elasticsearch.indices.flush.FlushIT)",
     "displayName": "testUnallocatedShardsDoesNotHang(org.elasticsearch.indices.flush.FlushIT)",
     "methodName": "testUnallocatedShardsDoesNotHang",
     "className": "org.elasticsearch.indices.flush.FlushIT",
     "children": []
    },
    {
     "id": "ID#testWaitIfOngoing(org.elasticsearch.indices.flush.FlushIT)",
     "displayName": "testWaitIfOngoing(org.elasticsearch.indices.flush.FlushIT)",
     "methodName": "testWaitIfOngoing",
     "className": "org.elasticsearch.indices.flush.FlushIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960226273
 }
]

[
 "TEST_STARTED",
 "ID#testSyncedFlush(org.elasticsearch.indices.flush.FlushIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,284][INFO ][org.elasticsearch.indices.flush] [FlushIT#testSyncedFlush]: setup test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,304][TRACE][org.elasticsearch.indices.breaker] [node_s0] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,304][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,304][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,304][DEBUG][org.elasticsearch.indices] [node_s0] using indexing buffer size [49mb] with indices.memory.shard_inactive_time [5m], indices.memory.interval [5s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,306][DEBUG][org.elasticsearch.indices.cache.query] [node_s0] using [node] query cache with size [10%25], actual_size [49mb], max filter count [1000]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,306][DEBUG][org.elasticsearch.indices.fielddata.cache] [node_s0] using size [724566016b] [691mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,311][DEBUG][org.elasticsearch.indices.recovery] [node_s0] using max_bytes_per_sec[40mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,333][TRACE][org.elasticsearch.indices.breaker] [node_s1] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,333][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,333][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,334][DEBUG][org.elasticsearch.indices] [node_s1] using indexing buffer size [49mb] with indices.memory.shard_inactive_time [5m], indices.memory.interval [5s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,335][DEBUG][org.elasticsearch.indices.cache.query] [node_s1] using [node] query cache with size [10%25], actual_size [49mb], max filter count [1000]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,335][DEBUG][org.elasticsearch.indices.fielddata.cache] [node_s1] using size [-1] [-1b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,339][DEBUG][org.elasticsearch.indices.recovery] [node_s1] using max_bytes_per_sec[43mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,361][TRACE][org.elasticsearch.indices.breaker] [node_s2] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,361][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,361][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,362][DEBUG][org.elasticsearch.indices] [node_s2] using indexing buffer size [49mb] with indices.memory.shard_inactive_time [5m], indices.memory.interval [5s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,363][DEBUG][org.elasticsearch.indices.cache.query] [node_s2] using [node] query cache with size [10%25], actual_size [49mb], max filter count [1000]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,364][DEBUG][org.elasticsearch.indices.fielddata.cache] [node_s2] using size [-1] [-1b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,368][DEBUG][org.elasticsearch.indices.recovery] [node_s2] using max_bytes_per_sec[7mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,390][TRACE][org.elasticsearch.indices.breaker] [node_s3] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,390][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,390][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,391][DEBUG][org.elasticsearch.indices] [node_s3] using indexing buffer size [49mb] with indices.memory.shard_inactive_time [5m], indices.memory.interval [5s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,392][DEBUG][org.elasticsearch.indices.cache.query] [node_s3] using [node] query cache with size [10%25], actual_size [49mb], max filter count [1000]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,392][DEBUG][org.elasticsearch.indices.fielddata.cache] [node_s3] using size [-1] [-1b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,397][DEBUG][org.elasticsearch.indices.recovery] [node_s3] using max_bytes_per_sec[8mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,404][TRACE][org.elasticsearch.indices.breaker] [transport_client_node_s2] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,404][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,404][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,411][TRACE][org.elasticsearch.indices.breaker] [transport_client_node_s3] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,411][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,411][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,427][TRACE][org.elasticsearch.indices.breaker] [transport_client_node_s0] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,427][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,427][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,428][INFO ][org.elasticsearch.indices.flush] test using _default_ mappings: [{\"_default_\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"match_mapping_type\":\"string\",\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}}}},{\"template-longs\":{\"match_mapping_type\":\"long\",\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}}}},{\"template-doubles\":{\"match_mapping_type\":\"double\",\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}}}},{\"template-geo_points\":{\"match_mapping_type\":\"geo_point\",\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}}}},{\"template-booleans\":{\"match_mapping_type\":\"boolean\",\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}}}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,434][INFO ][org.elasticsearch.indices.flush] [FlushIT#testSyncedFlush]: starting test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,434][INFO ][org.elasticsearch.indices.flush] using custom data_path for index: [yXDiaSLEaU]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,436][DEBUG][org.elasticsearch.indices] [node_s0] creating Index [test], shards [1]/[1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,437][DEBUG][org.elasticsearch.indices] [node_s0] [test] closing ... (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,437][DEBUG][org.elasticsearch.indices] [node_s0] [test] closing index service (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,437][DEBUG][org.elasticsearch.indices] [node_s0] [test] closed... (reason [cleaning up after validating index on master])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,438][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test] creating index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,439][DEBUG][org.elasticsearch.indices] [node_s2] creating Index [test], shards [1]/[1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,439][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test] adding mapping [_default_], source [{\"_default_\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,440][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test][0] creating shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,447][TRACE][org.elasticsearch.indices] [node_s2] [test][0] warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,448][TRACE][org.elasticsearch.indices] [node_s2] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,449][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test] creating index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,449][DEBUG][org.elasticsearch.indices] [node_s1] creating Index [test], shards [1]/[1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,450][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test] adding mapping [_default_], source [{\"_default_\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,450][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test][0] creating shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,453][TRACE][org.elasticsearch.indices.recovery] [node_s1] [test][0] started recovery from {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local], id [743]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,460][TRACE][org.elasticsearch.indices.recovery] [node_s1] collecting local files for [test][0] [743]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,461][TRACE][org.elasticsearch.indices.recovery] [node_s1] [test][0] starting recovery from {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,461][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] starting recovery to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,461][TRACE][org.elasticsearch.indices.recovery] [node_s2] captured translog id [-1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,461][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: recovering [segments_1], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,461][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: recovering_files [1] with total_size [130b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,465][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,467][TRACE][org.elasticsearch.indices] [node_s1] [test][0] warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,468][TRACE][org.elasticsearch.indices] [node_s1] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,469][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: remote engine start took [4.6ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,469][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices.recovery] [node_s2] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase2] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] no translog operations to send to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase2] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: took [184.6micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] finalizing recovery to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices] [node_s1] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] finalizing recovery to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: took [371.2micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,470][TRACE][org.elasticsearch.indices.recovery] [node_s1] [test][0] marking recovery from {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local] as done, id [743]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,471][TRACE][org.elasticsearch.indices.recovery] [node_s1] [test][0] recovery completed from {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local], took[17ms]%0A   phase1: recovered_files [1] with total_size of [130b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [4ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,478][DEBUG][org.elasticsearch.indices.flush] indices [_all] are green%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,481][INFO ][org.elasticsearch.indices.flush] --> sync flushing index [test]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,484][TRACE][org.elasticsearch.indices.flush] [node_s0] [test][0] sending pre-synced flush request to [test][0], node[WihTE3gnR6Slo4G524M1OQ], [P], v[3], s[STARTED], a[id=spTp6cVNRKiNCzTb-F_pxA]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,491][TRACE][org.elasticsearch.indices.flush] [node_s0] [test][0] sending pre-synced flush request to [test][0], node[YTVZbJVLTxeYjeyqJM8zRw], [R], v[3], s[STARTED], a[id=UP52k_chRJKVNPkDnHkH8g]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,492][TRACE][org.elasticsearch.indices.flush] [node_s2] [test][0] performing pre sync flush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,492][TRACE][org.elasticsearch.indices.flush] [node_s1] [test][0] performing pre sync flush%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,492][TRACE][org.elasticsearch.indices.flush] [node_s1] [test][0] pre sync flush done. commit id lWk5+5sL4j8ZhNoVMmV3yQ==%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,492][TRACE][org.elasticsearch.indices.flush] [node_s2] [test][0] pre sync flush done. commit id lWk5+5sL4j8ZhNoVMmV3yA==%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,493][TRACE][org.elasticsearch.indices.flush] [node_s0] [test][0] retrieving in flight operation count%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,494][TRACE][org.elasticsearch.indices.flush] [node_s2] [test][0] in flight operations sampled at [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,495][TRACE][org.elasticsearch.indices.flush] [node_s0] [test][0] sending synced flush request to [test][0], node[WihTE3gnR6Slo4G524M1OQ], [P], v[3], s[STARTED], a[id=spTp6cVNRKiNCzTb-F_pxA]. sync id [AVQoA-y-uMCQZM6RIOGp].%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,496][TRACE][org.elasticsearch.indices.flush] [node_s0] [test][0] sending synced flush request to [test][0], node[YTVZbJVLTxeYjeyqJM8zRw], [R], v[3], s[STARTED], a[id=UP52k_chRJKVNPkDnHkH8g]. sync id [AVQoA-y-uMCQZM6RIOGp].%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,496][TRACE][org.elasticsearch.indices.flush] [node_s2] [test][0] performing sync flush. sync id [AVQoA-y-uMCQZM6RIOGp], expected commit id lWk5+5sL4j8ZhNoVMmV3yA==%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,498][TRACE][org.elasticsearch.indices.flush] [node_s2] [test][0] sync flush done. sync id [AVQoA-y-uMCQZM6RIOGp], result [SUCCESS]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,502][TRACE][org.elasticsearch.indices.flush] [node_s1] [test][0] performing sync flush. sync id [AVQoA-y-uMCQZM6RIOGp], expected commit id lWk5+5sL4j8ZhNoVMmV3yQ==%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,504][TRACE][org.elasticsearch.indices.flush] [node_s1] [test][0] sync flush done. sync id [AVQoA-y-uMCQZM6RIOGp], result [SUCCESS]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,549][TRACE][org.elasticsearch.indices.breaker] [node_s4] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,549][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,549][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,549][DEBUG][org.elasticsearch.indices] [node_s4] using indexing buffer size [49mb] with indices.memory.shard_inactive_time [5m], indices.memory.interval [5s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,551][DEBUG][org.elasticsearch.indices.cache.query] [node_s4] using [node] query cache with size [10%25], actual_size [49mb], max filter count [1000]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,551][DEBUG][org.elasticsearch.indices.fielddata.cache] [node_s4] using size [-1] [-1b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,556][DEBUG][org.elasticsearch.indices.recovery] [node_s4] using max_bytes_per_sec[113mb]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,572][TRACE][org.elasticsearch.indices.breaker] [transport_client_node_s4] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,572][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,572][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,575][DEBUG][org.elasticsearch.indices.cluster] [node_s4] [test] creating index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,575][DEBUG][org.elasticsearch.indices] [node_s4] creating Index [test], shards [1]/[1]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,576][DEBUG][org.elasticsearch.indices.cluster] [node_s4] [test] adding mapping [_default_], source [{\"_default_\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,576][DEBUG][org.elasticsearch.indices.cluster] [node_s4] [test][0] creating shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,578][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] started recovery from {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local], id [744]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,578][TRACE][org.elasticsearch.indices.recovery] [node_s4] collecting local files for [test][0] [744]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,580][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] starting recovery from {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,580][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] starting recovery to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,580][TRACE][org.elasticsearch.indices.recovery] [node_s2] captured translog id [-1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,580][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]: recovering [segments_2], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,580][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]: recovering_files [1] with total_size [159b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,584][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,587][TRACE][org.elasticsearch.indices] [node_s4] [test][0] warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,587][TRACE][org.elasticsearch.indices] [node_s4] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,589][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]: remote engine start took [4.7ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,589][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase1] to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,589][TRACE][org.elasticsearch.indices.recovery] [node_s2] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,589][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase2] to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,589][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] no translog operations to send to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,589][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,589][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery [phase2] to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]: took [142.8micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,589][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] finalizing recovery to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,590][TRACE][org.elasticsearch.indices] [node_s4] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,590][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] finalizing recovery to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]: took [231micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,590][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] marking recovery from {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local] as done, id [744]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,590][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery completed from {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local], took[11ms]%0A   phase1: recovered_files [1] with total_size of [159b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [4ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,591][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test][0] removing shard (not allocated)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,601][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test] cleaning index (no shards allocated)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,601][DEBUG][org.elasticsearch.indices] [node_s2] [test] closing ... (reason [removing index (no shards allocated)])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,601][DEBUG][org.elasticsearch.indices] [node_s2] [test] closing index service (reason [removing index (no shards allocated)])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,601][DEBUG][org.elasticsearch.indices] [node_s2] [test] closed... (reason [removing index (no shards allocated)])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,601][TRACE][org.elasticsearch.indices.store] [node_s2] [test][0] sending shard active check to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,601][TRACE][org.elasticsearch.indices.store] [node_s2] [test][0] sending shard active check to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,602][TRACE][org.elasticsearch.indices.store] [node_s2] [test][0] is active on node {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,606][TRACE][org.elasticsearch.indices.store] [node_s2] [test][0] is active on node {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,610][DEBUG][org.elasticsearch.indices] [node_s2] [test][0] deleted shard reason [no longer used]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,618][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test][0] removing shard (not allocated)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,618][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test] cleaning index (no shards allocated)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,618][DEBUG][org.elasticsearch.indices] [node_s1] [test] closing ... (reason [removing index (no shards allocated)])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,618][DEBUG][org.elasticsearch.indices] [node_s1] [test] closing index service (reason [removing index (no shards allocated)])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,618][DEBUG][org.elasticsearch.indices] [node_s1] [test] closed... (reason [removing index (no shards allocated)])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,619][TRACE][org.elasticsearch.indices.store] [node_s1] [test][0] sending shard active check to {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,619][TRACE][org.elasticsearch.indices.store] [node_s1] [test][0] is active on node {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,623][DEBUG][org.elasticsearch.indices.flush] indices [test] are green%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,623][DEBUG][org.elasticsearch.indices] [node_s1] [test][0] deleted shard reason [no longer used]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,626][TRACE][org.elasticsearch.indices.store] [node_s2] listing store meta data for [test][0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,626][TRACE][org.elasticsearch.indices.store] [node_s4] listing store meta data for [test][0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,626][TRACE][org.elasticsearch.indices.store] [node_s1] listing store meta data for [test][0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,626][TRACE][org.elasticsearch.indices.store] [node_s0] listing store meta data for [test][0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,626][TRACE][org.elasticsearch.indices.store] [node_s2] [test][0] didn't find any store meta data to load (took [371.5micros])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,626][TRACE][org.elasticsearch.indices.store] [node_s1] [test][0] didn't find any store meta data to load (took [399.2micros])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,627][DEBUG][org.elasticsearch.indices.store] [node_s4] [test][0] loaded store meta data (took [538.3micros])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,627][TRACE][org.elasticsearch.indices.store] [node_s0] [test][0] didn't find any store meta data to load (took [556.6micros])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,632][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test] creating index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,632][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test] creating index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,632][DEBUG][org.elasticsearch.indices] [node_s1] creating Index [test], shards [1]/[3]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,632][DEBUG][org.elasticsearch.indices] [node_s2] creating Index [test], shards [1]/[3]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,632][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test] adding mapping [_default_], source [{\"_default_\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,633][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test][0] creating shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,632][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test] adding mapping [_default_], source [{\"_default_\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,634][TRACE][org.elasticsearch.indices.recovery] [node_s1] [test][0] started recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local], id [745]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,634][TRACE][org.elasticsearch.indices.recovery] [node_s1] collecting local files for [test][0] [745]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,635][TRACE][org.elasticsearch.indices.recovery] [node_s1] [test][0] starting recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,635][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test][0] creating shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,635][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] starting recovery to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,635][TRACE][org.elasticsearch.indices.recovery] [node_s4] captured translog id [-1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,635][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: recovering [segments_3], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,635][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: recovering_files [1] with total_size [159b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,636][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] started recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local], id [746]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,636][TRACE][org.elasticsearch.indices.recovery] [node_s2] collecting local files for [test][0] [746]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,636][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] starting recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,636][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] starting recovery to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,641][TRACE][org.elasticsearch.indices.recovery] [node_s4] captured translog id [-1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,642][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]: recovering [segments_3], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,642][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]: recovering_files [1] with total_size [159b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,643][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test] creating index%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,643][DEBUG][org.elasticsearch.indices] [node_s0] creating Index [test], shards [1]/[3]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,643][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test] adding mapping [_default_], source [{\"_default_\":{\"_timestamp\":{\"enabled\":false},\"dynamic_templates\":[{\"template-strings\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"string\"}},{\"template-longs\":{\"mapping\":{\"fielddata\":{\"loading\":\"eager\"}},\"match_mapping_type\":\"long\"}},{\"template-doubles\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"double\"}},{\"template-geo_points\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"geo_point\"}},{\"template-booleans\":{\"mapping\":{\"fielddata\":{\"loading\":\"lazy\"}},\"match_mapping_type\":\"boolean\"}}]}}]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,644][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,644][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test][0] creating shard%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,645][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,645][TRACE][org.elasticsearch.indices.recovery] [node_s0] [test][0] started recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local], id [747]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,645][TRACE][org.elasticsearch.indices] [node_s1] [test][0] warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,645][TRACE][org.elasticsearch.indices.recovery] [node_s0] collecting local files for [test][0] [747]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,645][TRACE][org.elasticsearch.indices] [node_s1] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,646][TRACE][org.elasticsearch.indices.recovery] [node_s0] [test][0] starting recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,646][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] starting recovery to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local], mark_as_relocated false%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,646][TRACE][org.elasticsearch.indices.recovery] [node_s4] captured translog id [-1] for recovery%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,646][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]: recovering [segments_3], does not exists in remote%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,646][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]: recovering_files [1] with total_size [159b], reusing_files [0] with total_size [0b]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices] [node_s2] [test][0] warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices] [node_s2] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: remote engine start took [3.2ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase2] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] no translog operations to send to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase2] to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: took [143.6micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] finalizing recovery to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices] [node_s1] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,647][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] finalizing recovery to {node_s1}{YTVZbJVLTxeYjeyqJM8zRw}{local}{local[441]}[mode=>local]: took [198.3micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s1] [test][0] marking recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local] as done, id [745]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s1] [test][0] recovery completed from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local], took[13ms]%0A   phase1: recovered_files [1] with total_size of [159b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [3ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]: remote engine start took [3.3ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.cluster] [node_s2] ignoring recovery instruction for an existing shard [test][0] (shard state: [RECOVERING])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s4] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase2] to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] no translog operations to send to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase2] to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]: took [103.3micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,648][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] finalizing recovery to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,649][TRACE][org.elasticsearch.indices] [node_s2] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,649][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] finalizing recovery to {node_s2}{WihTE3gnR6Slo4G524M1OQ}{local}{local[442]}[mode=>local]: took [224.4micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,649][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] marking recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local] as done, id [746]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,649][TRACE][org.elasticsearch.indices.recovery] [node_s2] [test][0] recovery completed from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local], took[13ms]%0A   phase1: recovered_files [1] with total_size of [159b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [3ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,650][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]: prepare remote engine for translog%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,652][TRACE][org.elasticsearch.indices.cluster] [node_s0] ignoring recovery instruction for an existing shard [test][0] (shard state: [RECOVERING])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,652][TRACE][org.elasticsearch.indices] [node_s0] [test][0] warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,652][TRACE][org.elasticsearch.indices] [node_s0] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,653][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]: remote engine start took [3.6ms]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,653][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase1] to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]: took [0s]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s4] snapshot translog for recovery. current size is [0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase2] to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]: sending transaction log operations%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] no translog operations to send to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] sent final batch of [0][0b] (total: [0]) translog operations to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] recovery [phase2] to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]: took [101.4micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] finalizing recovery to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices] [node_s0] [test][0] top warming [ElasticsearchDirectoryReader()]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s4] [test][0] finalizing recovery to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]: took [230.8micros]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s0] [test][0] marking recovery from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local] as done, id [747]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,654][TRACE][org.elasticsearch.indices.recovery] [node_s0] [test][0] recovery completed from {node_s4}{qY1oKDG-QtqGKS3GaNCV-A}{local}{local[447]}[mode=>local], took[8ms]%0A   phase1: recovered_files [1] with total_size of [159b], took [0s], throttling_wait [0s]%0A         : reusing_files   [0] with total_size of [0b]%0A   phase2: start took [3ms]%0A         : recovered [0] transaction log operations, took [0s]%0A%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,658][TRACE][org.elasticsearch.indices.cluster] [node_s0] [test][0] master marked shard as initializing, but shard has state [POST_RECOVERY], resending shard started to {node_s0}{BoC8mif2SNa_rVSmd5t1AA}{local}{local[440]}[mode=>local]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,668][DEBUG][org.elasticsearch.indices.flush] indices [test] are green%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,673][TRACE][org.elasticsearch.indices.breaker] [transport_client_node_s1] parent circuit breaker with settings [parent,type=PARENT,limit=360395571/343.6mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,674][TRACE][org.elasticsearch.indices.breaker.request] creating ChildCircuitBreaker with settings [request,type=MEMORY,limit=205940326/196.3mb,overhead=1.0]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,674][TRACE][org.elasticsearch.indices.breaker.fielddata] creating ChildCircuitBreaker with settings [fielddata,type=MEMORY,limit=308910489/294.5mb,overhead=1.03]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,676][INFO ][org.elasticsearch.indices.flush] [FlushIT#testSyncedFlush]: finished test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,676][INFO ][org.elasticsearch.indices.flush] [FlushIT#testSyncedFlush]: cleaning up after test%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,677][TRACE][org.elasticsearch.indices.flush] Check consistency for [5] nodes%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,710][DEBUG][org.elasticsearch.indices.cluster] [node_s1] [test] cleaning index, no longer part of the metadata%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,710][DEBUG][org.elasticsearch.indices.cluster] [node_s3] [test] cleaning index, no longer part of the metadata%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,710][DEBUG][org.elasticsearch.indices] [node_s1] [test] closing ... (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,710][DEBUG][org.elasticsearch.indices] [node_s1] [test] closing index service (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,710][DEBUG][org.elasticsearch.indices.cluster] [node_s4] [test] cleaning index, no longer part of the metadata%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,710][DEBUG][org.elasticsearch.indices.cluster] [node_s2] [test] cleaning index, no longer part of the metadata%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,711][DEBUG][org.elasticsearch.indices] [node_s2] [test] closing ... (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,711][DEBUG][org.elasticsearch.indices] [node_s2] [test] closing index service (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,710][DEBUG][org.elasticsearch.indices] [node_s4] [test] closing ... (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,711][DEBUG][org.elasticsearch.indices] [node_s4] [test] closing index service (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,711][TRACE][org.elasticsearch.indices] [node_s1] [test][0] deleting shard reason [delete index]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,711][TRACE][org.elasticsearch.indices] [node_s2] [test][0] deleting shard reason [delete index]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,711][TRACE][org.elasticsearch.indices] [node_s4] [test][0] deleting shard reason [delete index]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,713][DEBUG][org.elasticsearch.indices] [node_s1] [test] closed... (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,713][DEBUG][org.elasticsearch.indices] [node_s1] [test] deleting index store reason [index no longer part of the metadata]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,713][DEBUG][org.elasticsearch.indices] [node_s2] [test] closed... (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,714][DEBUG][org.elasticsearch.indices] [node_s2] [test] deleting index store reason [index no longer part of the metadata]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,714][DEBUG][org.elasticsearch.indices] [node_s4] [test] closed... (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,714][DEBUG][org.elasticsearch.indices] [node_s4] [test] deleting index store reason [index no longer part of the metadata]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,714][DEBUG][org.elasticsearch.indices] [node_s2] [test] processing pending deletes%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,714][DEBUG][org.elasticsearch.indices] [node_s1] [test] processing pending deletes%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,715][DEBUG][org.elasticsearch.indices] [node_s4] [test] processing pending deletes%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,715][DEBUG][org.elasticsearch.indices.cluster] [node_s0] [test] cleaning index, no longer part of the metadata%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,715][DEBUG][org.elasticsearch.indices] [node_s0] [test] closing ... (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,715][DEBUG][org.elasticsearch.indices] [node_s0] [test] closing index service (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,716][TRACE][org.elasticsearch.indices] [node_s0] [test][0] deleting shard reason [delete index]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,718][DEBUG][org.elasticsearch.indices] [node_s0] [test] closed... (reason [index no longer part of the metadata])%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,718][DEBUG][org.elasticsearch.indices] [node_s0] [test] deleting index store reason [index no longer part of the metadata]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,719][DEBUG][org.elasticsearch.indices] [node_s0] [test] processing pending deletes%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:06,732][INFO ][org.elasticsearch.indices.flush] [FlushIT#testSyncedFlush]: cleaned up after test%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSyncedFlush(org.elasticsearch.indices.flush.FlushIT)",
  "startTimestamp": 1460960226283,
  "executionTime": 450
 }
]

[
 "TEST_STARTED",
 "ID#testSyncedFlushWithConcurrentIndexing(org.elasticsearch.indices.flush.FlushIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:07,079][WARN ][org.elasticsearch.transport] [node_s1] Transport response handler not found of id [73]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:07,079][WARN ][org.elasticsearch.transport] [node_s1] Transport response handler not found of id [75]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:07,291][WARN ][org.elasticsearch.index.store] [node_s2] [test][3] failed to build store metadata. checking segment info integrity (with commit [no])%0Ajava.nio.file.NoSuchFileException: /Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.indices.flush.FlushIT_34FFB022680374F5-001/tempDir-001/data/SUITE-CHILD_VM=[1]-CLUSTER_SEED=[-8283680787666517908]-HASH=[23BC8D0577F5]-cluster/nodes/2/indices/test/3/index/segments_4%0A%09at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)%0A%09at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)%0A%09at sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:177)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newFileChannel(FilterFileSystemProvider.java:203)%0A%09at org.apache.lucene.mockfile.DisableFsyncFS.newFileChannel(DisableFsyncFS.java:46)%0A%09at org.apache.lucene.mockfile.FilterFileSystemProvider.newFileChannel(FilterFileSystemProvider.java:203)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newFileChannel(HandleTrackingFS.java:167)%0A%09at org.apache.lucene.mockfile.HandleTrackingFS.newFileChannel(HandleTrackingFS.java:167)%0A%09at java.nio.channels.FileChannel.open(FileChannel.java:287)%0A%09at java.nio.channels.FileChannel.open(FileChannel.java:335)%0A%09at org.apache.lucene.store.NIOFSDirectory.openInput(NIOFSDirectory.java:82)%0A%09at org.apache.lucene.store.FileSwitchDirectory.openInput(FileSwitchDirectory.java:186)%0A%09at org.apache.lucene.store.FilterDirectory.openInput(FilterDirectory.java:89)%0A%09at org.apache.lucene.store.FilterDirectory.openInput(FilterDirectory.java:89)%0A%09at org.elasticsearch.index.store.Store$MetadataSnapshot.checksumFromLuceneFile(Store.java:963)%0A%09at org.elasticsearch.index.store.Store$MetadataSnapshot.loadMetadata(Store.java:871)%0A%09at org.elasticsearch.index.store.Store$MetadataSnapshot.<init>(Store.java:794)%0A%09at org.elasticsearch.index.store.Store.getMetadata(Store.java:266)%0A%09at org.elasticsearch.index.store.Store.getMetadataOrEmpty(Store.java:225)%0A%09at org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.listStoreMetaData(TransportNodesListShardStoreMetaData.java:164)%0A%09at org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.nodeOperation(TransportNodesListShardStoreMetaData.java:145)%0A%09at org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.nodeOperation(TransportNodesListShardStoreMetaData.java:70)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$NodeTransportHandler.messageReceived(TransportNodesAction.java:232)%0A%09at org.elasticsearch.action.support.nodes.TransportNodesAction$NodeTransportHandler.messageReceived(TransportNodesAction.java:228)%0A%09at org.elasticsearch.transport.TransportRequestHandler.messageReceived(TransportRequestHandler.java:33)%0A%09at org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:65)%0A%09at org.elasticsearch.transport.local.LocalTransport$2.doRun(LocalTransport.java:296)%0A%09at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSyncedFlushWithConcurrentIndexing(org.elasticsearch.indices.flush.FlushIT)",
  "startTimestamp": 1460960226733,
  "executionTime": 773
 }
]

[
 "TEST_STARTED",
 "ID#testUnallocatedShardsDoesNotHang(org.elasticsearch.indices.flush.FlushIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnallocatedShardsDoesNotHang(org.elasticsearch.indices.flush.FlushIT)",
  "startTimestamp": 1460960227506,
  "executionTime": 71
 }
]

[
 "TEST_STARTED",
 "ID#testWaitIfOngoing(org.elasticsearch.indices.flush.FlushIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWaitIfOngoing(org.elasticsearch.indices.flush.FlushIT)",
  "startTimestamp": 1460960227577,
  "executionTime": 2874
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.flush.FlushIT",
  "startTimestamp": 1460960226273,
  "executionTime": 4193
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
   "children": [
    {
     "id": "ID#testShardSizeEqualsSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testShardSizeEqualsSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testShardSizeEqualsSizeString",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testNoShardSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testNoShardSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testNoShardSizeString",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testNoShardSizeTermOrderDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testNoShardSizeTermOrderDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testNoShardSizeTermOrderDouble",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testWithShardSizeLongSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testWithShardSizeLongSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testWithShardSizeLongSingleShard",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testWithShardSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testWithShardSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testWithShardSizeLong",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testWithShardSizeStringSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testWithShardSizeStringSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testWithShardSizeStringSingleShard",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testNoShardSizeTermOrderLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testNoShardSizeTermOrderLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testNoShardSizeTermOrderLong",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testShardSizeEqualsSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testShardSizeEqualsSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testShardSizeEqualsSizeDouble",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testNoShardSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testNoShardSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testNoShardSizeDouble",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testShardSizeEqualsSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testShardSizeEqualsSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testShardSizeEqualsSizeLong",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testNoShardSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testNoShardSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testNoShardSizeLong",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testWithShardSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testWithShardSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testWithShardSizeDouble",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testNoShardSizeTermOrderString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testNoShardSizeTermOrderString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testNoShardSizeTermOrderString",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testWithShardSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testWithShardSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testWithShardSizeString",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    },
    {
     "id": "ID#testWithShardSizeDoubleSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "displayName": "testWithShardSizeDoubleSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
     "methodName": "testWithShardSizeDoubleSingleShard",
     "className": "org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960230474
 }
]

[
 "TEST_STARTED",
 "ID#testShardSizeEqualsSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardSizeEqualsSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960230484,
  "executionTime": 604
 }
]

[
 "TEST_STARTED",
 "ID#testNoShardSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoShardSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960231088,
  "executionTime": 1747
 }
]

[
 "TEST_STARTED",
 "ID#testNoShardSizeTermOrderDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoShardSizeTermOrderDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960232835,
  "executionTime": 1293
 }
]

[
 "TEST_STARTED",
 "ID#testWithShardSizeLongSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithShardSizeLongSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960234129,
  "executionTime": 270
 }
]

[
 "TEST_STARTED",
 "ID#testWithShardSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithShardSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960234400,
  "executionTime": 206
 }
]

[
 "TEST_STARTED",
 "ID#testWithShardSizeStringSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithShardSizeStringSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960234606,
  "executionTime": 200
 }
]

[
 "TEST_STARTED",
 "ID#testNoShardSizeTermOrderLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoShardSizeTermOrderLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960234806,
  "executionTime": 89
 }
]

[
 "TEST_STARTED",
 "ID#testShardSizeEqualsSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardSizeEqualsSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960234896,
  "executionTime": 212
 }
]

[
 "TEST_STARTED",
 "ID#testNoShardSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoShardSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960235109,
  "executionTime": 250
 }
]

[
 "TEST_STARTED",
 "ID#testShardSizeEqualsSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testShardSizeEqualsSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960235360,
  "executionTime": 778
 }
]

[
 "TEST_STARTED",
 "ID#testNoShardSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoShardSizeLong(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960236138,
  "executionTime": 199
 }
]

[
 "TEST_STARTED",
 "ID#testWithShardSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithShardSizeDouble(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960236337,
  "executionTime": 73
 }
]

[
 "TEST_STARTED",
 "ID#testNoShardSizeTermOrderString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoShardSizeTermOrderString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960236410,
  "executionTime": 144
 }
]

[
 "TEST_STARTED",
 "ID#testWithShardSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithShardSizeString(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960236554,
  "executionTime": 476
 }
]

[
 "TEST_STARTED",
 "ID#testWithShardSizeDoubleSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithShardSizeDoubleSingleShard(org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT)",
  "startTimestamp": 1460960237030,
  "executionTime": 406
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.ShardSizeTermsIT",
  "startTimestamp": 1460960230474,
  "executionTime": 6973
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.query.ExistsIT",
   "displayName": "org.elasticsearch.search.query.ExistsIT",
   "methodName": null,
   "className": "org.elasticsearch.search.query.ExistsIT",
   "children": [
    {
     "id": "ID#testEmptyIndex(org.elasticsearch.search.query.ExistsIT)",
     "displayName": "testEmptyIndex(org.elasticsearch.search.query.ExistsIT)",
     "methodName": "testEmptyIndex",
     "className": "org.elasticsearch.search.query.ExistsIT",
     "children": []
    },
    {
     "id": "ID#testExists(org.elasticsearch.search.query.ExistsIT)",
     "displayName": "testExists(org.elasticsearch.search.query.ExistsIT)",
     "methodName": "testExists",
     "className": "org.elasticsearch.search.query.ExistsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960237453
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyIndex(org.elasticsearch.search.query.ExistsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyIndex(org.elasticsearch.search.query.ExistsIT)",
  "startTimestamp": 1460960237464,
  "executionTime": 87
 }
]

[
 "TEST_STARTED",
 "ID#testExists(org.elasticsearch.search.query.ExistsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExists(org.elasticsearch.search.query.ExistsIT)",
  "startTimestamp": 1460960237551,
  "executionTime": 162
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.query.ExistsIT",
  "startTimestamp": 1460960237453,
  "executionTime": 265
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.transport.ActionNamesIT",
   "displayName": "org.elasticsearch.transport.ActionNamesIT",
   "methodName": null,
   "className": "org.elasticsearch.transport.ActionNamesIT",
   "children": [
    {
     "id": "ID#testActionNamesCategories(org.elasticsearch.transport.ActionNamesIT)",
     "displayName": "testActionNamesCategories(org.elasticsearch.transport.ActionNamesIT)",
     "methodName": "testActionNamesCategories",
     "className": "org.elasticsearch.transport.ActionNamesIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960237723
 }
]

[
 "TEST_STARTED",
 "ID#testActionNamesCategories(org.elasticsearch.transport.ActionNamesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testActionNamesCategories(org.elasticsearch.transport.ActionNamesIT)",
  "startTimestamp": 1460960237734,
  "executionTime": 134
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.transport.ActionNamesIT",
  "startTimestamp": 1460960237723,
  "executionTime": 152
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
   "displayName": "org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
   "methodName": null,
   "className": "org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
   "children": [
    {
     "id": "ID#testBreakerWithRandomExceptions(org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT)",
     "displayName": "testBreakerWithRandomExceptions(org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT)",
     "methodName": "testBreakerWithRandomExceptions",
     "className": "org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960237881
 }
]

[
 "TEST_STARTED",
 "ID#testBreakerWithRandomExceptions(org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBreakerWithRandomExceptions(org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT)",
  "startTimestamp": 1460960237892,
  "executionTime": 810
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.indices.memory.breaker.RandomExceptionCircuitBreakerIT",
  "startTimestamp": 1460960237881,
  "executionTime": 836
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.action.termvectors.GetTermVectorsIT",
   "displayName": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
   "methodName": null,
   "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
   "children": [
    {
     "id": "ID#testTermVectorsWithVersion(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testTermVectorsWithVersion(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testTermVectorsWithVersion",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testRandomPayloadWithDelimitedPayloadTokenFilter(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testRandomPayloadWithDelimitedPayloadTokenFilter(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testRandomPayloadWithDelimitedPayloadTokenFilter",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testDuelESLucene(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testDuelESLucene(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testDuelESLucene",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testDuelWithAndWithoutTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testDuelWithAndWithoutTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testDuelWithAndWithoutTermVectors",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testPerFieldAnalyzer(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testPerFieldAnalyzer(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testPerFieldAnalyzer",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleWildCards(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testSimpleWildCards(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testSimpleWildCards",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testArtificialNonExistingField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testArtificialNonExistingField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testArtificialNonExistingField",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testRandomSingleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testRandomSingleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testRandomSingleTermVectors",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleTermVectorsWithGenerate(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testSimpleTermVectorsWithGenerate(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testSimpleTermVectorsWithGenerate",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testFilterLength(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testFilterLength(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testFilterLength",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testNoSuchDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testNoSuchDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testNoSuchDoc",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testExistingFieldWithNoTermVectorsNoNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testExistingFieldWithNoTermVectorsNoNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testExistingFieldWithNoTermVectorsNoNPE",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testArtificialVsExisting(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testArtificialVsExisting(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testArtificialVsExisting",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testExistingFieldButNotInDocNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testExistingFieldButNotInDocNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testExistingFieldButNotInDocNPE",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testNotIndexedField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testNotIndexedField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testNotIndexedField",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testSimpleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testSimpleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testSimpleTermVectors",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testDfs(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testDfs(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testDfs",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testFilterDocFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testFilterDocFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testFilterDocFreq",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testArtificialNoDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testArtificialNoDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testArtificialNoDoc",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    },
    {
     "id": "ID#testFilterTermFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "displayName": "testFilterTermFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
     "methodName": "testFilterTermFreq",
     "className": "org.elasticsearch.action.termvectors.GetTermVectorsIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960238731
 }
]

[
 "TEST_STARTED",
 "ID#testTermVectorsWithVersion(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTermVectorsWithVersion(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960238741,
  "executionTime": 179
 }
]

[
 "TEST_STARTED",
 "ID#testRandomPayloadWithDelimitedPayloadTokenFilter(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomPayloadWithDelimitedPayloadTokenFilter(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960238920,
  "executionTime": 92
 }
]

[
 "TEST_STARTED",
 "ID#testDuelESLucene(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelESLucene(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960239013,
  "executionTime": 357
 }
]

[
 "TEST_STARTED",
 "ID#testDuelWithAndWithoutTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDuelWithAndWithoutTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960239370,
  "executionTime": 276
 }
]

[
 "TEST_STARTED",
 "ID#testPerFieldAnalyzer(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPerFieldAnalyzer(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960239646,
  "executionTime": 184
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleWildCards(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleWildCards(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960239831,
  "executionTime": 85
 }
]

[
 "TEST_STARTED",
 "ID#testArtificialNonExistingField(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArtificialNonExistingField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960239916,
  "executionTime": 93
 }
]

[
 "TEST_STARTED",
 "ID#testRandomSingleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRandomSingleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960240009,
  "executionTime": 226
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTermVectorsWithGenerate(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTermVectorsWithGenerate(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960240235,
  "executionTime": 269
 }
]

[
 "TEST_STARTED",
 "ID#testFilterLength(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterLength(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960240504,
  "executionTime": 85
 }
]

[
 "TEST_STARTED",
 "ID#testNoSuchDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoSuchDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960240589,
  "executionTime": 108
 }
]

[
 "TEST_STARTED",
 "ID#testExistingFieldWithNoTermVectorsNoNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistingFieldWithNoTermVectorsNoNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960240697,
  "executionTime": 51
 }
]

[
 "TEST_STARTED",
 "ID#testArtificialVsExisting(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArtificialVsExisting(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960240748,
  "executionTime": 169
 }
]

[
 "TEST_STARTED",
 "ID#testExistingFieldButNotInDocNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExistingFieldButNotInDocNPE(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960240917,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testNotIndexedField(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNotIndexedField(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960240964,
  "executionTime": 75
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTermVectors(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960241039,
  "executionTime": 190
 }
]

[
 "TEST_STARTED",
 "ID#testDfs(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDfs(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960241229,
  "executionTime": 136
 }
]

[
 "TEST_STARTED",
 "ID#testFilterDocFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterDocFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960241366,
  "executionTime": 92
 }
]

[
 "TEST_STARTED",
 "ID#testArtificialNoDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testArtificialNoDoc(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960241459,
  "executionTime": 101
 }
]

[
 "TEST_STARTED",
 "ID#testFilterTermFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFilterTermFreq(org.elasticsearch.action.termvectors.GetTermVectorsIT)",
  "startTimestamp": 1460960241560,
  "executionTime": 73
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.action.termvectors.GetTermVectorsIT",
  "startTimestamp": 1460960238731,
  "executionTime": 2914
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
   "displayName": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
   "methodName": null,
   "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
   "children": [
    {
     "id": "ID#testSearchReturnsTokenCount",
     "displayName": "testSearchReturnsTokenCount",
     "methodName": null,
     "className": "testSearchReturnsTokenCount",
     "children": [
      {
       "id": "ID#testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=true}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=false}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=true}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=false}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      }
     ]
    },
    {
     "id": "ID#testFacetByTokenCount",
     "displayName": "testFacetByTokenCount",
     "methodName": null,
     "className": "testFacetByTokenCount",
     "children": [
      {
       "id": "ID#testFacetByTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testFacetByTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testFacetByTokenCount {storeCountedFields=true loadCountedFields=true}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testFacetByTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testFacetByTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testFacetByTokenCount {storeCountedFields=true loadCountedFields=false}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testFacetByTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testFacetByTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testFacetByTokenCount {storeCountedFields=false loadCountedFields=true}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testFacetByTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testFacetByTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testFacetByTokenCount {storeCountedFields=false loadCountedFields=false}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      }
     ]
    },
    {
     "id": "ID#testSearchByTokenCount",
     "displayName": "testSearchByTokenCount",
     "methodName": null,
     "className": "testSearchByTokenCount",
     "children": [
      {
       "id": "ID#testSearchByTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testSearchByTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testSearchByTokenCount {storeCountedFields=true loadCountedFields=true}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testSearchByTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testSearchByTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testSearchByTokenCount {storeCountedFields=true loadCountedFields=false}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testSearchByTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testSearchByTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testSearchByTokenCount {storeCountedFields=false loadCountedFields=true}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      },
      {
       "id": "ID#testSearchByTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "displayName": "testSearchByTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
       "methodName": "testSearchByTokenCount {storeCountedFields=false loadCountedFields=false}",
       "className": "org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
       "children": []
      }
     ]
    }
   ]
  },
  "startTimestamp": 1460960241656
 }
]

[
 "TEST_STARTED",
 "ID#testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960241666,
  "executionTime": 243
 }
]

[
 "TEST_STARTED",
 "ID#testFacetByTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFacetByTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960241909,
  "executionTime": 156
 }
]

[
 "TEST_STARTED",
 "ID#testSearchByTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchByTokenCount {storeCountedFields=true loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960242065,
  "executionTime": 134
 }
]

[
 "TEST_STARTED",
 "ID#testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchReturnsTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960242199,
  "executionTime": 143
 }
]

[
 "TEST_STARTED",
 "ID#testFacetByTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFacetByTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960242342,
  "executionTime": 147
 }
]

[
 "TEST_STARTED",
 "ID#testSearchByTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchByTokenCount {storeCountedFields=true loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960242490,
  "executionTime": 132
 }
]

[
 "TEST_STARTED",
 "ID#testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960242623,
  "executionTime": 103
 }
]

[
 "TEST_STARTED",
 "ID#testFacetByTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFacetByTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960242726,
  "executionTime": 136
 }
]

[
 "TEST_STARTED",
 "ID#testSearchByTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchByTokenCount {storeCountedFields=false loadCountedFields=true}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960242862,
  "executionTime": 124
 }
]

[
 "TEST_STARTED",
 "ID#testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchReturnsTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960242986,
  "executionTime": 106
 }
]

[
 "TEST_STARTED",
 "ID#testFacetByTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testFacetByTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960243092,
  "executionTime": 152
 }
]

[
 "TEST_STARTED",
 "ID#testSearchByTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchByTokenCount {storeCountedFields=false loadCountedFields=false}(org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT)",
  "startTimestamp": 1460960243244,
  "executionTime": 122
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.index.mapper.core.TokenCountFieldMapperIntegrationIT",
  "startTimestamp": 1460960241656,
  "executionTime": 1718
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.http.netty.HttpPublishPortIT",
   "displayName": "org.elasticsearch.http.netty.HttpPublishPortIT",
   "methodName": null,
   "className": "org.elasticsearch.http.netty.HttpPublishPortIT",
   "children": [
    {
     "id": "ID#testHttpPublishPort(org.elasticsearch.http.netty.HttpPublishPortIT)",
     "displayName": "testHttpPublishPort(org.elasticsearch.http.netty.HttpPublishPortIT)",
     "methodName": "testHttpPublishPort",
     "className": "org.elasticsearch.http.netty.HttpPublishPortIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960243378
 }
]

[
 "TEST_STARTED",
 "ID#testHttpPublishPort(org.elasticsearch.http.netty.HttpPublishPortIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHttpPublishPort(org.elasticsearch.http.netty.HttpPublishPortIT)",
  "startTimestamp": 1460960243384,
  "executionTime": 60
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.http.netty.HttpPublishPortIT",
  "startTimestamp": 1460960243378,
  "executionTime": 72
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT",
   "displayName": "org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT",
   "children": [
    {
     "id": "ID#testIndicesBoost(org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT)",
     "displayName": "testIndicesBoost(org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT)",
     "methodName": "testIndicesBoost",
     "className": "org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960243454
 }
]

[
 "TEST_STARTED",
 "ID#testIndicesBoost(org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIndicesBoost(org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT)",
  "startTimestamp": 1460960243460,
  "executionTime": 320
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.indicesboost.SimpleIndicesBoostSearchIT",
  "startTimestamp": 1460960243454,
  "executionTime": 336
 }
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
   "displayName": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
   "children": [
    {
     "id": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "displayName": "testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "methodName": "testMultiValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
     "children": []
    },
    {
     "id": "ID#testSingleValueFieldAsSubAggToGeohashGrid(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "displayName": "testSingleValueFieldAsSubAggToGeohashGrid(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "methodName": "testSingleValueFieldAsSubAggToGeohashGrid",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
     "children": []
    },
    {
     "id": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "displayName": "testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "methodName": "testEmptyAggregation",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
     "children": []
    },
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
     "children": []
    },
    {
     "id": "ID#testSingleValueFieldGetProperty(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "displayName": "testSingleValueFieldGetProperty(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "methodName": "testSingleValueFieldGetProperty",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
     "children": []
    },
    {
     "id": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "displayName": "testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "methodName": "testSingleValuedField",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
     "children": []
    },
    {
     "id": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "displayName": "testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
     "methodName": "testPartiallyUnmapped",
     "className": "org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960243795
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValuedField(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
  "startTimestamp": 1460960244855,
  "executionTime": 20
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValueFieldAsSubAggToGeohashGrid(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValueFieldAsSubAggToGeohashGrid(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
  "startTimestamp": 1460960244876,
  "executionTime": 37
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
  "startTimestamp": 1460960244913,
  "executionTime": 29
 }
]

[
 "TEST_STARTED",
 "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnmapped(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
  "startTimestamp": 1460960244942,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValueFieldGetProperty(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValueFieldGetProperty(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
  "startTimestamp": 1460960244968,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSingleValuedField(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
  "startTimestamp": 1460960244990,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.metrics.GeoCentroidIT)",
  "startTimestamp": 1460960245007,
  "executionTime": 17
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.metrics.GeoCentroidIT",
  "startTimestamp": 1460960243795,
  "executionTime": 1360
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.discovery.zen.ZenDiscoveryIT",
   "displayName": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
   "methodName": null,
   "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
   "children": [
    {
     "id": "ID#testNoShardRelocationsOccurWhenElectedMasterNodeFails(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testNoShardRelocationsOccurWhenElectedMasterNodeFails(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testNoShardRelocationsOccurWhenElectedMasterNodeFails",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testDiscoveryStats(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testDiscoveryStats(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testDiscoveryStats",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testHandleNodeJoin_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testHandleNodeJoin_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testHandleNodeJoin_incompatibleMinVersion",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testJoinElectedMaster_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testJoinElectedMaster_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testJoinElectedMaster_incompatibleMinVersion",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testChangeRejoinOnMasterOptionIsDynamic(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testChangeRejoinOnMasterOptionIsDynamic(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testChangeRejoinOnMasterOptionIsDynamic",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testHandleNodeJoin_incompatibleClusterState(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testHandleNodeJoin_incompatibleClusterState(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testHandleNodeJoin_incompatibleClusterState",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testNodeFailuresAreProcessedOnce(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testNodeFailuresAreProcessedOnce(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testNodeFailuresAreProcessedOnce",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    },
    {
     "id": "ID#testNodeRejectsClusterStateWithWrongMasterNode(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "displayName": "testNodeRejectsClusterStateWithWrongMasterNode(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
     "methodName": "testNodeRejectsClusterStateWithWrongMasterNode",
     "className": "org.elasticsearch.discovery.zen.ZenDiscoveryIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960245292
 }
]

[
 "TEST_STARTED",
 "ID#testNoShardRelocationsOccurWhenElectedMasterNodeFails(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:31,604][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t2}{FPdAfFO9T0i84PGkF7wKQQ}{127.0.0.1}{127.0.0.1:9502}[master=>false, mode=>network],{node_t1}{1MUnQb85T3mkU6rV8wSUiw}{127.0.0.1}{127.0.0.1:9501}[data=>false, mode=>network],{node_t3}{7rCmSyxERe-gliP2_F9Rbg}{127.0.0.1}{127.0.0.1:9503}[mode=>network, master=>false],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:31,611][WARN ][org.elasticsearch.discovery.zen.ping.unicast] [node_t1] failed to send ping to [{#zen_unicast_6#}{::1}{[::1]:9500}]%0ARemoteTransportException[[node_t0][[::1]:9500][internal:discovery/zen/unicast]]; nested: IllegalStateException[received ping request while not started];%0ACaused by: java.lang.IllegalStateException: received ping request while not started%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.handlePingRequest(UnicastZenPing.java:497)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing.access$2400(UnicastZenPing.java:83)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$UnicastPingRequestHandler.messageReceived(UnicastZenPing.java:522)%0A%09at org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing$UnicastPingRequestHandler.messageReceived(UnicastZenPing.java:518)%0A%09at org.elasticsearch.transport.TransportRequestHandler.messageReceived(TransportRequestHandler.java:33)%0A%09at org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:65)%0A%09at org.elasticsearch.transport.netty.MessageChannelHandler.handleRequest(MessageChannelHandler.java:258)%0A%09at org.elasticsearch.transport.netty.MessageChannelHandler.messageReceived(MessageChannelHandler.java:128)%0A%09at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)%0A%09at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)%0A%09at org.elasticsearch.common.netty.OpenChannelsHandler.handleUpstream(OpenChannelsHandler.java:83)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)%0A%09at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:337)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)%0A%09at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)%0A%09at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)%0A%09at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:31,619][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = transport disconnected), current nodes: {{node_t2}{FPdAfFO9T0i84PGkF7wKQQ}{127.0.0.1}{127.0.0.1:9502}[mode=>network, master=>false],{node_t1}{1MUnQb85T3mkU6rV8wSUiw}{127.0.0.1}{127.0.0.1:9501}[mode=>network, data=>false],{node_t3}{7rCmSyxERe-gliP2_F9Rbg}{127.0.0.1}{127.0.0.1:9503}[master=>false, mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:31,621][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = transport disconnected), current nodes: {{node_t2}{FPdAfFO9T0i84PGkF7wKQQ}{127.0.0.1}{127.0.0.1:9502}[master=>false, mode=>network],{node_t1}{1MUnQb85T3mkU6rV8wSUiw}{127.0.0.1}{127.0.0.1:9501}[mode=>network, data=>false],{node_t3}{7rCmSyxERe-gliP2_F9Rbg}{127.0.0.1}{127.0.0.1:9503}[mode=>network, master=>false],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:34,680][WARN ][org.elasticsearch.discovery.zen] [node_t2] master left (reason = transport disconnected), current nodes: {{node_t2}{FPdAfFO9T0i84PGkF7wKQQ}{127.0.0.1}{127.0.0.1:9502}[master=>false, mode=>network],{node_t3}{7rCmSyxERe-gliP2_F9Rbg}{127.0.0.1}{127.0.0.1:9503}[mode=>network, master=>false],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:34,683][WARN ][org.elasticsearch.discovery.zen] [node_t3] master left (reason = transport disconnected), current nodes: {{node_t2}{FPdAfFO9T0i84PGkF7wKQQ}{127.0.0.1}{127.0.0.1:9502}[master=>false, mode=>network],{node_t3}{7rCmSyxERe-gliP2_F9Rbg}{127.0.0.1}{127.0.0.1:9503}[master=>false, mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoShardRelocationsOccurWhenElectedMasterNodeFails(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1460960245299,
  "executionTime": 9396
 }
]

[
 "TEST_STARTED",
 "ID#testDiscoveryStats(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDiscoveryStats(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1460960254695,
  "executionTime": 3074
 }
]

[
 "TEST_STARTED",
 "ID#testHandleNodeJoin_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandleNodeJoin_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1460960257769,
  "executionTime": 3045
 }
]

[
 "TEST_STARTED",
 "ID#testJoinElectedMaster_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:40,817][WARN ][org.elasticsearch.discovery.zen.elect] ignoring master [{_node_id}{local}{local[_id]}], because the version [1.6.0] is lower than the minimum compatible version [2.0.0-beta1]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testJoinElectedMaster_incompatibleMinVersion(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1460960260815,
  "executionTime": 3070
 }
]

[
 "TEST_STARTED",
 "ID#testChangeRejoinOnMasterOptionIsDynamic(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testChangeRejoinOnMasterOptionIsDynamic(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1460960263886,
  "executionTime": 3075
 }
]

[
 "TEST_STARTED",
 "ID#testHandleNodeJoin_incompatibleClusterState(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:53,079][WARN ][org.elasticsearch.discovery.zen] [node_t0] failed to validate incoming join request from node [{node_t1}{7FMF7G-6QaGV7s2FT2jCzg}{127.0.0.1}{127.0.0.1:9501}[mode=>network]]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:53,079][WARN ][org.elasticsearch.transport.netty] [node_t1] exception caught on transport layer [[id: 0xc1d8b1fb, /127.0.0.1:61847 => /127.0.0.1:9501]], closing connection%0Ajava.lang.IllegalStateException: Message not fully read (request) for requestId [14], action [internal:discovery/zen/join/validate], readerIndex [217] vs expected [441]; resetting%0A%09at org.elasticsearch.transport.netty.MessageChannelHandler.messageReceived(MessageChannelHandler.java:135)%0A%09at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)%0A%09at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)%0A%09at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)%0A%09at org.elasticsearch.common.netty.OpenChannelsHandler.handleUpstream(OpenChannelsHandler.java:83)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)%0A%09at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)%0A%09at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)%0A%09at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:337)%0A%09at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)%0A%09at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)%0A%09at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)%0A%09at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:54,075][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = failed to ping, tried [3] times, each with  maximum [30s] timeout), current nodes: {{node_t1}{7FMF7G-6QaGV7s2FT2jCzg}{127.0.0.1}{127.0.0.1:9501}[mode=>network],}%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:17:57,089][WARN ][org.elasticsearch.discovery.zen] [node_t1] master left (reason = shut_down), current nodes: {{node_t1}{7FMF7G-6QaGV7s2FT2jCzg}{127.0.0.1}{127.0.0.1:9501}[mode=>network],}%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testHandleNodeJoin_incompatibleClusterState(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1460960266961,
  "executionTime": 10144
 }
]

[
 "TEST_STARTED",
 "ID#testNodeFailuresAreProcessedOnce(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:03,248][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [4]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:03,248][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [4]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:03,291][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [6]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:03,304][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [6]%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:03,304][TRACE][org.elasticsearch.action.admin.cluster.health] [node_t0] Calculating health based on state version [6]%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodeFailuresAreProcessedOnce(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1460960277105,
  "executionTime": 6230
 }
]

[
 "TEST_STARTED",
 "ID#testNodeRejectsClusterStateWithWrongMasterNode(org.elasticsearch.discovery.zen.ZenDiscoveryIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:06,422][WARN ][org.elasticsearch.discovery.zen.publish] [node_t0] received a cluster state from a different master than the current one, rejecting (received {abc}{local}{local[abc]}, current {node_t1}{2e1M5jFwSCChjcrLm5aWrw}{127.0.0.1}{127.0.0.1:9541}[mode=>network])%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNodeRejectsClusterStateWithWrongMasterNode(org.elasticsearch.discovery.zen.ZenDiscoveryIT)",
  "startTimestamp": 1460960283335,
  "executionTime": 3108
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.discovery.zen.ZenDiscoveryIT",
  "startTimestamp": 1460960245292,
  "executionTime": 41175
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
   "displayName": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
   "children": [
    {
     "id": "ID#testMultiValues(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testMultiValues(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testMultiValues",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testSimple(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testSimple(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testSimple",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testEmptyAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testWithSubAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testWithSubAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testWithSubAggregation",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testSimpleWithCustomKeys(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testSimpleWithCustomKeys(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testSimpleWithCustomKeys",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testUnmapped",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    },
    {
     "id": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "displayName": "testPartiallyUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
     "methodName": "testPartiallyUnmapped",
     "className": "org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960286586
 }
]

[
 "TEST_STARTED",
 "ID#testMultiValues(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiValues(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1460960287478,
  "executionTime": 54
 }
]

[
 "TEST_STARTED",
 "ID#testSimple(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimple(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1460960287532,
  "executionTime": 46
 }
]

[
 "TEST_STARTED",
 "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testEmptyAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1460960287578,
  "executionTime": 61
 }
]

[
 "TEST_STARTED",
 "ID#testWithSubAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWithSubAggregation(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1460960287639,
  "executionTime": 48
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleWithCustomKeys(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleWithCustomKeys(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1460960287688,
  "executionTime": 68
 }
]

[
 "TEST_STARTED",
 "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1460960287756,
  "executionTime": 73
 }
]

[
 "TEST_STARTED",
 "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPartiallyUnmapped(org.elasticsearch.search.aggregations.bucket.GeoDistanceIT)",
  "startTimestamp": 1460960287829,
  "executionTime": 81
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:08,127][WARN ][org.elasticsearch.transport] [node_s1] Transport response handler not found of id [365]%0A"
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.bucket.GeoDistanceIT",
  "startTimestamp": 1460960286586,
  "executionTime": 1559
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
   "displayName": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
   "methodName": null,
   "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
   "children": [
    {
     "id": "ID#testDocCountopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testDocCountopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testDocCountopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testNested(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testNested",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevelDefaultPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testMetricTopLevelDefaultPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testMetricTopLevelDefaultPercents",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testDocCountAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testMetricAsSubAggWithInsertZeros",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testBadPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testBadPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testBadPercents",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testNestedWithDecimal(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testNestedWithDecimal(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testNestedWithDecimal",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testBadPercents_asSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testBadPercents_asSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testBadPercents_asSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testWrongPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testWrongPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testWrongPercents",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testMetricAsSubAgg",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testMetricTopLevel",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    },
    {
     "id": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "displayName": "testNoBuckets(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
     "methodName": "testNoBuckets",
     "className": "org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960288344
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288636,
  "executionTime": 14
 }
]

[
 "TEST_STARTED",
 "ID#testNested(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNested(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288650,
  "executionTime": 27
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevelDefaultPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevelDefaultPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288677,
  "executionTime": 28
 }
]

[
 "TEST_STARTED",
 "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDocCountAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288705,
  "executionTime": 17
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAggWithInsertZeros(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288723,
  "executionTime": 32
 }
]

[
 "TEST_STARTED",
 "ID#testBadPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288756,
  "executionTime": 23
 }
]

[
 "TEST_STARTED",
 "ID#testNestedWithDecimal(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedWithDecimal(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288779,
  "executionTime": 24
 }
]

[
 "TEST_STARTED",
 "ID#testBadPercents_asSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testBadPercents_asSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288803,
  "executionTime": 22
 }
]

[
 "TEST_STARTED",
 "ID#testWrongPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testWrongPercents(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288825,
  "executionTime": 26
 }
]

[
 "TEST_STARTED",
 "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricAsSubAgg(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288851,
  "executionTime": 71
 }
]

[
 "TEST_STARTED",
 "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMetricTopLevel(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288923,
  "executionTime": 18
 }
]

[
 "TEST_STARTED",
 "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNoBuckets(org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT)",
  "startTimestamp": 1460960288941,
  "executionTime": 25
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.aggregations.pipeline.PercentilesBucketIT",
  "startTimestamp": 1460960288344,
  "executionTime": 733
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.fetch.FetchSubPhasePluginIT",
   "displayName": "org.elasticsearch.search.fetch.FetchSubPhasePluginIT",
   "methodName": null,
   "className": "org.elasticsearch.search.fetch.FetchSubPhasePluginIT",
   "children": [
    {
     "id": "ID#testPlugin(org.elasticsearch.search.fetch.FetchSubPhasePluginIT)",
     "displayName": "testPlugin(org.elasticsearch.search.fetch.FetchSubPhasePluginIT)",
     "methodName": "testPlugin",
     "className": "org.elasticsearch.search.fetch.FetchSubPhasePluginIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960289101
 }
]

[
 "TEST_STARTED",
 "ID#testPlugin(org.elasticsearch.search.fetch.FetchSubPhasePluginIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testPlugin(org.elasticsearch.search.fetch.FetchSubPhasePluginIT)",
  "startTimestamp": 1460960289111,
  "executionTime": 148
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.fetch.FetchSubPhasePluginIT",
  "startTimestamp": 1460960289101,
  "executionTime": 165
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "displayName": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "methodName": null,
   "className": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
   "children": [
    {
     "id": "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
     "displayName": "testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
     "methodName": "testNativeExplainScript",
     "className": "org.elasticsearch.search.functionscore.ExplainableScriptIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960289354
 }
]

[
 "TEST_STARTED",
 "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNativeExplainScript(org.elasticsearch.search.functionscore.ExplainableScriptIT)",
  "startTimestamp": 1460960289374,
  "executionTime": 270
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.functionscore.ExplainableScriptIT",
  "startTimestamp": 1460960289354,
  "executionTime": 296
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "displayName": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
   "children": [
    {
     "id": "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
     "displayName": "testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
     "methodName": "testSimpleMultiSearch",
     "className": "org.elasticsearch.search.msearch.SimpleMultiSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960289860
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleMultiSearch(org.elasticsearch.search.msearch.SimpleMultiSearchIT)",
  "startTimestamp": 1460960289871,
  "executionTime": 348
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.msearch.SimpleMultiSearchIT",
  "startTimestamp": 1460960289860,
  "executionTime": 372
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.nested.SimpleNestedIT",
   "displayName": "org.elasticsearch.search.nested.SimpleNestedIT",
   "methodName": null,
   "className": "org.elasticsearch.search.nested.SimpleNestedIT",
   "children": [
    {
     "id": "ID#testExplain(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testExplain(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testExplain",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    },
    {
     "id": "ID#testSortNestedWithNestedFilter(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testSortNestedWithNestedFilter(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testSortNestedWithNestedFilter",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    },
    {
     "id": "ID#testSimpleNested(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testSimpleNested(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testSimpleNested",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    },
    {
     "id": "ID#testCheckFixedBitSetCache(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testCheckFixedBitSetCache(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testCheckFixedBitSetCache",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    },
    {
     "id": "ID#testNestedSortingWithNestedFilterAsFilter(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testNestedSortingWithNestedFilterAsFilter(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testNestedSortingWithNestedFilterAsFilter",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    },
    {
     "id": "ID#testMultiNested(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testMultiNested(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testMultiNested",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    },
    {
     "id": "ID#testSimpleNestedSorting(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testSimpleNestedSorting(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testSimpleNestedSorting",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    },
    {
     "id": "ID#testDeleteNestedDocsWithAlias(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testDeleteNestedDocsWithAlias(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testDeleteNestedDocsWithAlias",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    },
    {
     "id": "ID#testSimpleNestedSortingWithNestedFilterMissing(org.elasticsearch.search.nested.SimpleNestedIT)",
     "displayName": "testSimpleNestedSortingWithNestedFilterMissing(org.elasticsearch.search.nested.SimpleNestedIT)",
     "methodName": "testSimpleNestedSortingWithNestedFilterMissing",
     "className": "org.elasticsearch.search.nested.SimpleNestedIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960290371
 }
]

[
 "TEST_STARTED",
 "ID#testExplain(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testExplain(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960290383,
  "executionTime": 198
 }
]

[
 "TEST_STARTED",
 "ID#testSortNestedWithNestedFilter(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSortNestedWithNestedFilter(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960290581,
  "executionTime": 391
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleNested(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleNested(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960290972,
  "executionTime": 323
 }
]

[
 "TEST_STARTED",
 "ID#testCheckFixedBitSetCache(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testCheckFixedBitSetCache(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960291295,
  "executionTime": 178
 }
]

[
 "TEST_STARTED",
 "ID#testNestedSortingWithNestedFilterAsFilter(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testNestedSortingWithNestedFilterAsFilter(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960291473,
  "executionTime": 108
 }
]

[
 "TEST_STARTED",
 "ID#testMultiNested(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMultiNested(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960291581,
  "executionTime": 133
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleNestedSorting(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleNestedSorting(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960291714,
  "executionTime": 438
 }
]

[
 "TEST_STARTED",
 "ID#testDeleteNestedDocsWithAlias(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testDeleteNestedDocsWithAlias(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960292153,
  "executionTime": 269
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleNestedSortingWithNestedFilterMissing(org.elasticsearch.search.nested.SimpleNestedIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleNestedSortingWithNestedFilterMissing(org.elasticsearch.search.nested.SimpleNestedIT)",
  "startTimestamp": 1460960292423,
  "executionTime": 292
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.nested.SimpleNestedIT",
  "startTimestamp": 1460960290371,
  "executionTime": 2357
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.search.simple.SimpleSearchIT",
   "displayName": "org.elasticsearch.search.simple.SimpleSearchIT",
   "methodName": null,
   "className": "org.elasticsearch.search.simple.SimpleSearchIT",
   "children": [
    {
     "id": "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleId",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testLargeFromAndSizeSucceeds",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testLocaleDependentDate",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeBackwardsCompatibilityRecommendation",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSize",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeOkBySetting",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testQueryNumericFieldWithRegex",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSearchRandomPreference",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testInsaneFromAndSize",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleDateRange",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testIpCidr",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleIp",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSearchNullIndex",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testTooLargeFromAndSizeOkByDynamicSetting",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    },
    {
     "id": "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
     "displayName": "testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
     "methodName": "testSimpleTerminateAfterCount",
     "className": "org.elasticsearch.search.simple.SimpleSearchIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960292892
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleId(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960292909,
  "executionTime": 155
 }
]

[
 "TEST_STARTED",
 "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLargeFromAndSizeSucceeds(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960293064,
  "executionTime": 366
 }
]

[
 "TEST_STARTED",
 "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testLocaleDependentDate(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960293430,
  "executionTime": 491
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeBackwardsCompatibilityRecommendation(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960293921,
  "executionTime": 149
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960294070,
  "executionTime": 109
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeOkBySetting(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960294180,
  "executionTime": 116
 }
]

[
 "TEST_STARTED",
 "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testQueryNumericFieldWithRegex(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960294296,
  "executionTime": 70
 }
]

[
 "TEST_STARTED",
 "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchRandomPreference(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960294366,
  "executionTime": 99
 }
]

[
 "TEST_STARTED",
 "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testInsaneFromAndSize(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960294465,
  "executionTime": 227
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleDateRange(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960294693,
  "executionTime": 255
 }
]

[
 "TEST_STARTED",
 "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testIpCidr(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960294948,
  "executionTime": 292
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleIp(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960295240,
  "executionTime": 232
 }
]

[
 "TEST_STARTED",
 "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSearchNullIndex(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960295472,
  "executionTime": 21
 }
]

[
 "TEST_STARTED",
 "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testTooLargeFromAndSizeOkByDynamicSetting(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960295494,
  "executionTime": 183
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTerminateAfterCount(org.elasticsearch.search.simple.SimpleSearchIT)",
  "startTimestamp": 1460960295677,
  "executionTime": 145
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.search.simple.SimpleSearchIT",
  "startTimestamp": 1460960292892,
  "executionTime": 2937
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.snapshots.RepositoriesIT",
   "displayName": "org.elasticsearch.snapshots.RepositoriesIT",
   "methodName": null,
   "className": "org.elasticsearch.snapshots.RepositoriesIT",
   "children": [
    {
     "id": "ID#testRepositoryVerification(org.elasticsearch.snapshots.RepositoriesIT)",
     "displayName": "testRepositoryVerification(org.elasticsearch.snapshots.RepositoriesIT)",
     "methodName": "testRepositoryVerification",
     "className": "org.elasticsearch.snapshots.RepositoriesIT",
     "children": []
    },
    {
     "id": "ID#testRepositoryAckTimeout(org.elasticsearch.snapshots.RepositoriesIT)",
     "displayName": "testRepositoryAckTimeout(org.elasticsearch.snapshots.RepositoriesIT)",
     "methodName": "testRepositoryAckTimeout",
     "className": "org.elasticsearch.snapshots.RepositoriesIT",
     "children": []
    },
    {
     "id": "ID#testRepositoryCreation(org.elasticsearch.snapshots.RepositoriesIT)",
     "displayName": "testRepositoryCreation(org.elasticsearch.snapshots.RepositoriesIT)",
     "methodName": "testRepositoryCreation",
     "className": "org.elasticsearch.snapshots.RepositoriesIT",
     "children": []
    },
    {
     "id": "ID#testRepositoryVerificationTimeout(org.elasticsearch.snapshots.RepositoriesIT)",
     "displayName": "testRepositoryVerificationTimeout(org.elasticsearch.snapshots.RepositoriesIT)",
     "methodName": "testRepositoryVerificationTimeout",
     "className": "org.elasticsearch.snapshots.RepositoriesIT",
     "children": []
    },
    {
     "id": "ID#testMisconfiguredRepository(org.elasticsearch.snapshots.RepositoriesIT)",
     "displayName": "testMisconfiguredRepository(org.elasticsearch.snapshots.RepositoriesIT)",
     "methodName": "testMisconfiguredRepository",
     "className": "org.elasticsearch.snapshots.RepositoriesIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960295918
 }
]

[
 "TEST_STARTED",
 "ID#testRepositoryVerification(org.elasticsearch.snapshots.RepositoriesIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,026][WARN ][org.elasticsearch.repositories] [node_s1] [test-repo-1] failed to verify repository%0ARepositoryVerificationException[[test-repo-1] a file written by master to the store [org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore@7116da66] cannot be accessed on the node [{node_s1}{YdZF6EP1S2WfGOZRzcmZmg}{local}{local[529]}[mode=>local]]. This might indicate that the store [org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore@7116da66] is not shared between this node and the master node or that permissions on the store don't allow reading files written by the master node]%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.verify(BlobStoreIndexShardRepository.java:239)%0A%09at org.elasticsearch.repositories.VerifyNodeRepositoryAction.doVerify(VerifyNodeRepositoryAction.java:120)%0A%09at org.elasticsearch.repositories.VerifyNodeRepositoryAction.access$200(VerifyNodeRepositoryAction.java:49)%0A%09at org.elasticsearch.repositories.VerifyNodeRepositoryAction$VerifyNodeRepositoryRequestHandler.messageReceived(VerifyNodeRepositoryAction.java:155)%0A%09at org.elasticsearch.repositories.VerifyNodeRepositoryAction$VerifyNodeRepositoryRequestHandler.messageReceived(VerifyNodeRepositoryAction.java:151)%0A%09at org.elasticsearch.transport.TransportRequestHandler.messageReceived(TransportRequestHandler.java:33)%0A%09at org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:65)%0A%09at org.elasticsearch.transport.local.LocalTransport.handleRequest(LocalTransport.java:290)%0A%09at org.elasticsearch.transport.local.LocalTransport.messageReceived(LocalTransport.java:251)%0A%09at org.elasticsearch.transport.local.LocalTransport$1.run(LocalTransport.java:229)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRepositoryVerification(org.elasticsearch.snapshots.RepositoriesIT)",
  "startTimestamp": 1460960295926,
  "executionTime": 132
 }
]

[
 "TEST_STARTED",
 "ID#testRepositoryAckTimeout(org.elasticsearch.snapshots.RepositoriesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRepositoryAckTimeout(org.elasticsearch.snapshots.RepositoriesIT)",
  "startTimestamp": 1460960296058,
  "executionTime": 44
 }
]

[
 "TEST_STARTED",
 "ID#testRepositoryCreation(org.elasticsearch.snapshots.RepositoriesIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRepositoryCreation(org.elasticsearch.snapshots.RepositoriesIT)",
  "startTimestamp": 1460960296102,
  "executionTime": 55
 }
]

[
 "TEST_STARTED",
 "ID#testRepositoryVerificationTimeout(org.elasticsearch.snapshots.RepositoriesIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,192][WARN ][org.elasticsearch.repositories] [node_s1] [test-repo-1] failed to verify repository%0ARepositoryVerificationException[[test-repo-1] a file written by master to the store [org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore@5023f517] cannot be accessed on the node [{node_s1}{YdZF6EP1S2WfGOZRzcmZmg}{local}{local[529]}[mode=>local]]. This might indicate that the store [org.elasticsearch.snapshots.mockstore.MockRepository$MockBlobStore@5023f517] is not shared between this node and the master node or that permissions on the store don't allow reading files written by the master node]%0A%09at org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository.verify(BlobStoreIndexShardRepository.java:239)%0A%09at org.elasticsearch.repositories.VerifyNodeRepositoryAction.doVerify(VerifyNodeRepositoryAction.java:120)%0A%09at org.elasticsearch.repositories.VerifyNodeRepositoryAction.access$200(VerifyNodeRepositoryAction.java:49)%0A%09at org.elasticsearch.repositories.VerifyNodeRepositoryAction$VerifyNodeRepositoryRequestHandler.messageReceived(VerifyNodeRepositoryAction.java:155)%0A%09at org.elasticsearch.repositories.VerifyNodeRepositoryAction$VerifyNodeRepositoryRequestHandler.messageReceived(VerifyNodeRepositoryAction.java:151)%0A%09at org.elasticsearch.transport.TransportRequestHandler.messageReceived(TransportRequestHandler.java:33)%0A%09at org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:65)%0A%09at org.elasticsearch.transport.local.LocalTransport.handleRequest(LocalTransport.java:290)%0A%09at org.elasticsearch.transport.local.LocalTransport.messageReceived(LocalTransport.java:251)%0A%09at org.elasticsearch.transport.local.LocalTransport$1.run(LocalTransport.java:229)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testRepositoryVerificationTimeout(org.elasticsearch.snapshots.RepositoriesIT)",
  "startTimestamp": 1460960296157,
  "executionTime": 50
 }
]

[
 "TEST_STARTED",
 "ID#testMisconfiguredRepository(org.elasticsearch.snapshots.RepositoriesIT)"
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,219][WARN ][org.elasticsearch.repositories.fs] [node_s0] the repository location is missing, it should point to a shared file system location that is available on all master and data nodes%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,219][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [fs][test-repo]%0Aorg.elasticsearch.common.inject.CreationException: Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] missing location]%0A  at org.elasticsearch.repositories.fs.FsRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.fs.FsRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error%0A%09at org.elasticsearch.common.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:361)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:178)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:162)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:55)%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:408)%0A%09at org.elasticsearch.repositories.RepositoriesService.registerRepository(RepositoriesService.java:373)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$100(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:115)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RepositoryException[[test-repo] missing location]%0A%09at org.elasticsearch.repositories.fs.FsRepository.<init>(FsRepository.java:74)%0A%09at sun.reflect.GeneratedConstructorAccessor420.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:49)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.FactoryProxy.get(FactoryProxy.java:58)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:50)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09... 15 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,224][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [test-repo]%0ARepositoryException[[test-repo] failed to create repository]; nested: CreationException[Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] missing location]%0A  at org.elasticsearch.repositories.fs.FsRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.fs.FsRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error]; nested: RepositoryException[[test-repo] missing location];%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:415)%0A%09at org.elasticsearch.repositories.RepositoriesService.registerRepository(RepositoriesService.java:373)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$100(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:115)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: org.elasticsearch.common.inject.CreationException: Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] missing location]%0A  at org.elasticsearch.repositories.fs.FsRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.fs.FsRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error%0A%09at org.elasticsearch.common.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:361)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:178)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:162)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:55)%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:408)%0A%09... 11 more%0ACaused by: RepositoryException[[test-repo] missing location]%0A%09at org.elasticsearch.repositories.fs.FsRepository.<init>(FsRepository.java:74)%0A%09at sun.reflect.GeneratedConstructorAccessor420.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:49)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.FactoryProxy.get(FactoryProxy.java:58)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:50)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09... 15 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,226][WARN ][org.elasticsearch.repositories.fs] [node_s0] The specified location [/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002] doesn't start with any repository paths specified by the path.repo setting: [[/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-001/repos]] %0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,226][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [fs][test-repo]%0Aorg.elasticsearch.common.inject.CreationException: Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] location [/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002] doesn't match any of the locations specified by path.repo]%0A  at org.elasticsearch.repositories.fs.FsRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.fs.FsRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error%0A%09at org.elasticsearch.common.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:361)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:178)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:162)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:55)%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:408)%0A%09at org.elasticsearch.repositories.RepositoriesService.registerRepository(RepositoriesService.java:373)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$100(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:115)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RepositoryException[[test-repo] location [/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002] doesn't match any of the locations specified by path.repo]%0A%09at org.elasticsearch.repositories.fs.FsRepository.<init>(FsRepository.java:80)%0A%09at sun.reflect.GeneratedConstructorAccessor420.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:49)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.FactoryProxy.get(FactoryProxy.java:58)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:50)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09... 15 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,226][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [test-repo]%0ARepositoryException[[test-repo] failed to create repository]; nested: CreationException[Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] location [/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002] doesn't match any of the locations specified by path.repo]%0A  at org.elasticsearch.repositories.fs.FsRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.fs.FsRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error]; nested: RepositoryException[[test-repo] location [/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002] doesn't match any of the locations specified by path.repo];%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:415)%0A%09at org.elasticsearch.repositories.RepositoriesService.registerRepository(RepositoriesService.java:373)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$100(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:115)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: org.elasticsearch.common.inject.CreationException: Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] location [/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002] doesn't match any of the locations specified by path.repo]%0A  at org.elasticsearch.repositories.fs.FsRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.fs.FsRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error%0A%09at org.elasticsearch.common.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:361)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:178)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:162)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:55)%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:408)%0A%09... 11 more%0ACaused by: RepositoryException[[test-repo] location [/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002] doesn't match any of the locations specified by path.repo]%0A%09at org.elasticsearch.repositories.fs.FsRepository.<init>(FsRepository.java:80)%0A%09at sun.reflect.GeneratedConstructorAccessor420.newInstance(Unknown Source)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:49)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.FactoryProxy.get(FactoryProxy.java:58)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:50)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09... 15 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,231][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [url][test-repo]%0Aorg.elasticsearch.common.inject.CreationException: Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] unsupported url protocol [netdoc] from URL [netdoc:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/]]%0A  at org.elasticsearch.repositories.uri.URLRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.uri.URLRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error%0A%09at org.elasticsearch.common.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:361)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:178)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:162)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:55)%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:408)%0A%09at org.elasticsearch.repositories.RepositoriesService.registerRepository(RepositoriesService.java:373)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$100(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:115)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RepositoryException[[test-repo] unsupported url protocol [netdoc] from URL [netdoc:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/]]%0A%09at org.elasticsearch.repositories.uri.URLRepository.checkURL(URLRepository.java:156)%0A%09at org.elasticsearch.repositories.uri.URLRepository.<init>(URLRepository.java:97)%0A%09at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)%0A%09at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:49)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.FactoryProxy.get(FactoryProxy.java:58)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:50)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09... 15 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,231][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [test-repo]%0ARepositoryException[[test-repo] failed to create repository]; nested: CreationException[Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] unsupported url protocol [netdoc] from URL [netdoc:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/]]%0A  at org.elasticsearch.repositories.uri.URLRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.uri.URLRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error]; nested: RepositoryException[[test-repo] unsupported url protocol [netdoc] from URL [netdoc:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/]];%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:415)%0A%09at org.elasticsearch.repositories.RepositoriesService.registerRepository(RepositoriesService.java:373)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$100(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:115)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: org.elasticsearch.common.inject.CreationException: Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] unsupported url protocol [netdoc] from URL [netdoc:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/]]%0A  at org.elasticsearch.repositories.uri.URLRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.uri.URLRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error%0A%09at org.elasticsearch.common.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:361)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:178)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:162)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:55)%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:408)%0A%09... 11 more%0ACaused by: RepositoryException[[test-repo] unsupported url protocol [netdoc] from URL [netdoc:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/]]%0A%09at org.elasticsearch.repositories.uri.URLRepository.checkURL(URLRepository.java:156)%0A%09at org.elasticsearch.repositories.uri.URLRepository.<init>(URLRepository.java:97)%0A%09at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)%0A%09at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:49)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.FactoryProxy.get(FactoryProxy.java:58)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:50)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09... 15 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,234][WARN ][org.elasticsearch.repositories.uri] [node_s0] The specified url [file:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/] doesn't start with any repository paths specified by the path.repo setting: [[/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-001/repos]] or by repositories.url.allowed_urls setting: [{}] %0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,234][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [url][test-repo]%0Aorg.elasticsearch.common.inject.CreationException: Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] file url [file:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls]%0A  at org.elasticsearch.repositories.uri.URLRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.uri.URLRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error%0A%09at org.elasticsearch.common.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:361)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:178)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:162)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:55)%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:408)%0A%09at org.elasticsearch.repositories.RepositoriesService.registerRepository(RepositoriesService.java:373)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$100(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:115)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: RepositoryException[[test-repo] file url [file:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls]%0A%09at org.elasticsearch.repositories.uri.URLRepository.checkURL(URLRepository.java:151)%0A%09at org.elasticsearch.repositories.uri.URLRepository.<init>(URLRepository.java:97)%0A%09at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)%0A%09at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:49)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.FactoryProxy.get(FactoryProxy.java:58)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:50)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09... 15 more%0A"
 }
]

[
 "APPEND_STDOUT",
 {
  "chunk": "[2016-04-18 02:18:16,235][WARN ][org.elasticsearch.repositories] [node_s0] failed to create repository [test-repo]%0ARepositoryException[[test-repo] failed to create repository]; nested: CreationException[Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] file url [file:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls]%0A  at org.elasticsearch.repositories.uri.URLRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.uri.URLRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error]; nested: RepositoryException[[test-repo] file url [file:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls];%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:415)%0A%09at org.elasticsearch.repositories.RepositoriesService.registerRepository(RepositoriesService.java:373)%0A%09at org.elasticsearch.repositories.RepositoriesService.access$100(RepositoriesService.java:60)%0A%09at org.elasticsearch.repositories.RepositoriesService$1.execute(RepositoriesService.java:115)%0A%09at org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:45)%0A%09at org.elasticsearch.cluster.service.InternalClusterService.runTasksForExecutor(InternalClusterService.java:447)%0A%09at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:761)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)%0A%09at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)%0A%09at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)%0A%09at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)%0A%09at java.lang.Thread.run(Thread.java:745)%0ACaused by: org.elasticsearch.common.inject.CreationException: Guice creation errors:%0A%0A1) Error injecting constructor, RepositoryException[[test-repo] file url [file:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls]%0A  at org.elasticsearch.repositories.uri.URLRepository.<init>(Unknown Source)%0A  while locating org.elasticsearch.repositories.uri.URLRepository%0A  while locating org.elasticsearch.repositories.Repository%0A%0A1 error%0A%09at org.elasticsearch.common.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:361)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:178)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:110)%0A%09at org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:162)%0A%09at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:55)%0A%09at org.elasticsearch.repositories.RepositoriesService.createRepositoryHolder(RepositoriesService.java:408)%0A%09... 11 more%0ACaused by: RepositoryException[[test-repo] file url [file:/Users/lwiskowski/CSE2410_spring2016_projectileDysfunction/core/build/testrun/integTest/J1/temp/org.elasticsearch.snapshots.RepositoriesIT_34FFB022680374F5-001/tempDir-002/] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls]%0A%09at org.elasticsearch.repositories.uri.URLRepository.checkURL(URLRepository.java:151)%0A%09at org.elasticsearch.repositories.uri.URLRepository.<init>(URLRepository.java:97)%0A%09at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)%0A%09at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)%0A%09at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)%0A%09at java.lang.reflect.Constructor.newInstance(Constructor.java:422)%0A%09at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:49)%0A%09at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)%0A%09at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)%0A%09at org.elasticsearch.common.inject.FactoryProxy.get(FactoryProxy.java:58)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:47)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:887)%0A%09at org.elasticsearch.common.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:43)%0A%09at org.elasticsearch.common.inject.Scopes$1$1.get(Scopes.java:59)%0A%09at org.elasticsearch.common.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:50)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:205)%0A%09at org.elasticsearch.common.inject.InjectorBuilder$1.call(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:197)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:187)%0A%09at org.elasticsearch.common.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)%0A%09... 15 more%0A"
 }
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testMisconfiguredRepository(org.elasticsearch.snapshots.RepositoriesIT)",
  "startTimestamp": 1460960296207,
  "executionTime": 40
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.snapshots.RepositoriesIT",
  "startTimestamp": 1460960295918,
  "executionTime": 342
 }
]

[
 "IDLE",
 {}
]

[
 "SUITE_STARTED",
 {
  "description": {
   "id": "ID#org.elasticsearch.timestamp.SimpleTimestampIT",
   "displayName": "org.elasticsearch.timestamp.SimpleTimestampIT",
   "methodName": null,
   "className": "org.elasticsearch.timestamp.SimpleTimestampIT",
   "children": [
    {
     "id": "ID#testThatUpdatingMappingShouldNotRemoveTimestampConfiguration(org.elasticsearch.timestamp.SimpleTimestampIT)",
     "displayName": "testThatUpdatingMappingShouldNotRemoveTimestampConfiguration(org.elasticsearch.timestamp.SimpleTimestampIT)",
     "methodName": "testThatUpdatingMappingShouldNotRemoveTimestampConfiguration",
     "className": "org.elasticsearch.timestamp.SimpleTimestampIT",
     "children": []
    },
    {
     "id": "ID#testSimpleTimestamp(org.elasticsearch.timestamp.SimpleTimestampIT)",
     "displayName": "testSimpleTimestamp(org.elasticsearch.timestamp.SimpleTimestampIT)",
     "methodName": "testSimpleTimestamp",
     "className": "org.elasticsearch.timestamp.SimpleTimestampIT",
     "children": []
    },
    {
     "id": "ID#testThatTimestampCanBeSwitchedOnAndOff(org.elasticsearch.timestamp.SimpleTimestampIT)",
     "displayName": "testThatTimestampCanBeSwitchedOnAndOff(org.elasticsearch.timestamp.SimpleTimestampIT)",
     "methodName": "testThatTimestampCanBeSwitchedOnAndOff",
     "className": "org.elasticsearch.timestamp.SimpleTimestampIT",
     "children": []
    }
   ]
  },
  "startTimestamp": 1460960296422
 }
]

[
 "TEST_STARTED",
 "ID#testThatUpdatingMappingShouldNotRemoveTimestampConfiguration(org.elasticsearch.timestamp.SimpleTimestampIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatUpdatingMappingShouldNotRemoveTimestampConfiguration(org.elasticsearch.timestamp.SimpleTimestampIT)",
  "startTimestamp": 1460960296437,
  "executionTime": 97
 }
]

[
 "TEST_STARTED",
 "ID#testSimpleTimestamp(org.elasticsearch.timestamp.SimpleTimestampIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testSimpleTimestamp(org.elasticsearch.timestamp.SimpleTimestampIT)",
  "startTimestamp": 1460960296534,
  "executionTime": 61
 }
]

[
 "TEST_STARTED",
 "ID#testThatTimestampCanBeSwitchedOnAndOff(org.elasticsearch.timestamp.SimpleTimestampIT)"
]

[
 "TEST_FINISHED",
 {
  "description": "ID#testThatTimestampCanBeSwitchedOnAndOff(org.elasticsearch.timestamp.SimpleTimestampIT)",
  "startTimestamp": 1460960296595,
  "executionTime": 49
 }
]

[
 "SUITE_COMPLETED",
 {
  "description": "ID#org.elasticsearch.timestamp.SimpleTimestampIT",
  "startTimestamp": 1460960296422,
  "executionTime": 226
 }
]

[
 "IDLE",
 {}
]

[
 "QUIT",
 {}
]

